name: Create Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: vscode/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          # Install VS Code extension tools
          npm install -g @vscode/vsce@latest
          
          # Install Python dependencies
          cd src
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
          # Install documentation tools
          pip install mkdocs-material
          pip install mkdocs-macros-plugin

      - name: Run tests
        run: |
          cd src
          python -m pytest tests/unit/ -v

      - name: Copy license
        run: cp LICENSE vscode/LICENSE.txt

      - name: Build VS Code extension
        run: |
          cd vscode
          npm run compile
          vsce package -o ../knightbatch-shtest.vsix

      - name: Build documentation
        run: |
          cd docs
          mkdocs build

      - name: Create release assets
        run: |
          # Create application package
          zip -r knightbatch-app.zip src docs README.md LICENSE -x 'docs/site/*'
          
          # Create documentation package
          zip -r knightbatch-docs.zip docs/site/
          
          # Create source package
          zip -r knightbatch-source.zip . -x 'docs/site/*' 'vscode/node_modules/*' 'src/venv/*' '*.pyc' '__pycache__/*'

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./vscode/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Git tag
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if ! git rev-parse "v$VERSION" >/dev/null 2>&1; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git tag -a "v$VERSION" -m "Release v$VERSION - Modular Architecture"
            git push origin "v$VERSION"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: KnightBatch v${{ steps.get_version.outputs.version }}
          body: |
            ## üéâ KnightBatch v${{ steps.get_version.outputs.version }}
            
            ### ‚ú® New Features
            - **Modular Architecture**: Complete rewrite with modular lexer, parser, and compiler
            - **VS Code Extension**: Enhanced extension with IntelliSense and compilation features
            - **Plugin System**: Extensible architecture for custom matchers and validations
            - **YAML Configuration**: External configuration for patterns and aliases
            
            ### üîß Improvements
            - **Better Error Handling**: Comprehensive error messages and debugging
            - **Enhanced Syntax Highlighting**: Support for SQL operations and file operations
            - **Modern Snippets**: Organized snippets for productivity
            - **Backward Compatibility**: Full support for legacy patterns
            
            ### üìö Documentation
            - **Complete Documentation**: Comprehensive guides for users and developers
            - **Architecture Documentation**: Technical documentation of modular system
            - **VS Code Extension Guide**: Complete extension documentation
            
            ### üß™ Testing
            - **Unit Tests**: Comprehensive test suite for all components
            - **Integration Tests**: End-to-end testing with real .shtest files
            - **CI/CD**: Automated testing and release process
            
            ### üì¶ Installation
            ```bash
            # Install from source
            git clone https://github.com/knightbatch/shtest-compiler.git
            cd shtest-compiler/src
            pip install -e .
            
            # Install VS Code extension
            # Download knightbatch-shtest.vsix and install in VS Code
            ```
            
            ### üîó Links
            - [Documentation](https://knightbatch.github.io/shtest-compiler/)
            - [Architecture Guide](https://knightbatch.github.io/shtest-compiler/modular_architecture/)
            - [VS Code Extension](https://knightbatch.github.io/shtest-compiler/vscode_extension/)
            
            ### üêõ Bug Fixes
            - Fixed import errors in modular system
            - Resolved circular import issues
            - Improved error reporting and debugging
            
            ### üìà Performance
            - Optimized compilation process
            - Reduced memory usage
            - Faster pattern matching
            
            ### üîÑ Migration
            - Backward compatible with existing .shtest files
            - Automatic migration of legacy patterns
            - No breaking changes for existing workflows
          files: |
            knightbatch-app.zip
            knightbatch-docs.zip
            knightbatch-source.zip
            knightbatch-shtest.vsix
          draft: false
          prerelease: false

