ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 5 lines
[DEBUG] Lexing text with 5 lines
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Exécution et vérification des logs, result=('Exécution et vérification des logs',), original=Étape: Exécution et vérification des logs at line 1
[DEBUG] Yielding token: STEP@1:0 'Exécution et vérification des logs' -> '('Exécution et vérification des logs',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: exécuter /opt/batch/traitement.sh produit=123 quantité=10 ; Résultat: retour 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=exécuter /opt/batch/traitement.sh produit=123 quantité=10, result=('exécuter /opt/batch/traitement.sh produit=123 quantité=10', 'retour 0', None), original=Action: exécuter /opt/batch/traitement.sh produit=123 quantité=10 ; Résultat: retour 0 at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'exécuter /opt/batch/traitement.sh produit=123 quantité=10' -> '('exécuter /opt/batch/traitement.sh produit=123 quantité=10', 'retour 0', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: vérifier qu'il n'y a pas d'erreurs dans les logs ; Résultat: aucun message d'erreur at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=vérifier qu'il n'y a pas d'erreurs dans les logs, result=("vérifier qu'il n'y a pas d'erreurs dans les logs", "aucun message d'erreur", None), original=Action: vérifier qu'il n'y a pas d'erreurs dans les logs ; Résultat: aucun message d'erreur at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'vérifier qu'il n'y a pas d'erreurs dans les logs' -> '("vérifier qu'il n'y a pas d'erreurs dans les logs", "aucun message d'erreur", None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: indiquer le chemin des logs /var/log/system.log ; Résultat: les logs sont accessibles at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=indiquer le chemin des logs /var/log/system.log, result=('indiquer le chemin des logs /var/log/system.log', 'les logs sont accessibles', None), original=Action: indiquer le chemin des logs /var/log/system.log ; Résultat: les logs sont accessibles at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'indiquer le chemin des logs /var/log/system.log' -> '('indiquer le chemin des logs /var/log/system.log', 'les logs sont accessibles', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 6 tokens
[DEBUG] Grammar: _merge_action_result called with 6 tokens
[DEBUG] Grammar: Token 0: kind=STEP, value='Exécution et vérification des logs'
[DEBUG] Grammar: Token 1: kind=EMPTY, value=''
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='exécuter /opt/batch/traitement.sh produit=123 quantité=10'
[DEBUG] Grammar: Token 3: kind=ACTION_RESULT, value='vérifier qu'il n'y a pas d'erreurs dans les logs'
[DEBUG] Grammar: Token 4: kind=ACTION_RESULT, value='indiquer le chemin des logs /var/log/system.log'
[DEBUG] Grammar: Token 5: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 6 tokens
[DEBUG] compile_atomic called with: expected='retour 0', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'exécuter /opt/batch/traitement.sh produit=123 quantité=10'}
[DEBUG] canonize_validation result: {'phrase': '^retour ([0-9]+)$', 'handler': 'return_code', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Retour {code}', 'handler': 'return_code', 'scope': 'last_action', 'opposite': {'phrase': 'Code retour inattendu'}, 'aliases': ['retour {code}', 'code retour {code}', 'le script retourne un code {code}', 'Le script retourne un code {code}', 'le script a réussi', "le script s'est exécuté sans erreur", "Le script s'execute avec succès", '^retour ([0-9]+)$', '^code retour ([0-9]+)$', '^le script retourne un code ([0-9]+)$', '^Le script retourne un code ([0-9]+)$', '^le script a réussi$', "^le script s'est exécuté sans erreur$", "^Le script s'execute avec succès$"]}, 'params': {'code': '0'}}
[DEBUG] Trying to extract parameters from action command: 'exécuter /opt/batch/traitement.sh produit=123 quantité=10'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.return_code
[DEBUG] Core handler returned: ValidationCheck(expected='^retour ([0-9]+)$', actual_cmd="if [ ${?} -eq {code} ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='return_code', scope='last_action', params={'code': '0', 'opposite': "le code de retour n'est pas 0"})
[DEBUG] compile_atomic called with: expected='aucun message d'erreur', varname='result', last_file_var=None, extracted_args=None, action_context={'command': "vérifier qu'il n'y a pas d'erreurs dans les logs"}
[DEBUG] canonize_validation result: {'phrase': "Aucun message d'erreur", 'handler': 'no_error_message', 'scope': 'last_action', 'pattern_entry': {'phrase': "Aucun message d'erreur", 'handler': 'no_error_message', 'scope': 'last_action', 'opposite': {'phrase': "Message d'erreur présent"}, 'aliases': ["aucun message d'erreur", 'stderr=.', "^aucun message d'erreur$", '^stderr=.$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'vérifier qu'il n'y a pas d'erreurs dans les logs'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.no_error_message
[DEBUG] Core handler returned: ValidationCheck(expected="Aucun message d'erreur", actual_cmd="if [ ! -s 'stderr.log' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='no_error_message', scope='last_action', params={'opposite': "un message d'erreur est présent"})
[DEBUG] compile_atomic called with: expected='les logs sont accessibles', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'indiquer le chemin des logs /var/log/system.log'}
[DEBUG] canonize_validation result: {'phrase': 'les logs sont accessibles', 'handler': 'logs_accessible', 'scope': 'global', 'pattern_entry': {'phrase': 'Logs accessibles', 'handler': 'logs_accessible', 'scope': 'global', 'opposite': {'phrase': 'Logs non accessibles'}, 'aliases': ['logs accessibles', 'les logs sont accessibles', '^logs accessibles$', '^les logs sont accessibles$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'indiquer le chemin des logs /var/log/system.log'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.logs_accessible
[DEBUG] Core handler returned: ValidationCheck(expected='les logs sont accessibles', actual_cmd="if [ -f '{file_path}' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='logs_accessible', scope='global', params={'file_path': None, 'opposite': "le fichier None n'est pas accessible"})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_case_2.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_case_2.sh
