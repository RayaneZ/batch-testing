ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 8 lines
[DEBUG] Lexing text with 8 lines
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Connexion, result=('Connexion',), original=Étape: Connexion at line 1
[DEBUG] Yielding token: STEP@1:0 'Connexion' -> '('Connexion',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "Connexion réussie" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "Connexion réussie" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "Connexion réussie", result=('echo "Connexion réussie"',), original=Action: echo "Connexion réussie" at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "Connexion réussie"' -> '('echo "Connexion réussie"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient "Connexion" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient "Connexion" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient "Connexion" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=stdout contient "Connexion", result=('stdout contient "Connexion"',), original=Résultat: stdout contient "Connexion" at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'stdout contient "Connexion"' -> '('stdout contient "Connexion"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Vérification, result=('Vérification',), original=Étape: Vérification at line 1
[DEBUG] Yielding token: STEP@1:0 'Vérification' -> '('Vérification',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "OK" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "OK" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "OK", result=('echo "OK"',), original=Action: echo "OK" at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "OK"' -> '('echo "OK"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient "OK" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient "OK" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient "OK" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=stdout contient "OK", result=('stdout contient "OK"',), original=Résultat: stdout contient "OK" at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'stdout contient "OK"' -> '('stdout contient "OK"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 9 tokens
[DEBUG] Grammar: _merge_action_result called with 9 tokens
[DEBUG] Grammar: Token 0: kind=EMPTY, value=''
[DEBUG] Grammar: Token 1: kind=STEP, value='Connexion'
[DEBUG] Grammar: Token 2: kind=ACTION_ONLY, value='echo "Connexion réussie"'
[DEBUG] Grammar: Token 3: kind=RESULT_ONLY, value='stdout contient "Connexion"'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: Token 5: kind=STEP, value='Vérification'
[DEBUG] Grammar: Token 6: kind=ACTION_ONLY, value='echo "OK"'
[DEBUG] Grammar: Token 7: kind=RESULT_ONLY, value='stdout contient "OK"'
[DEBUG] Grammar: Token 8: kind=EMPTY, value=''
[DEBUG] Grammar: Merging ACTION_ONLY 'echo "Connexion réussie"' with RESULT_ONLY 'stdout contient "Connexion"'
[DEBUG] Grammar: Merging ACTION_ONLY 'echo "OK"' with RESULT_ONLY 'stdout contient "OK"'
[DEBUG] Grammar: _merge_action_result returning 7 tokens
[DEBUG] compile_atomic called with: expected='stdout contient "Connexion"', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'echo "Connexion réussie"'}
[DEBUG] canonize_validation result: {'phrase': '^stdout contient (.+)$', 'handler': 'stdout_contains', 'scope': 'last_action', 'pattern_entry': {'phrase': 'La sortie standard contient {text}', 'handler': 'stdout_contains', 'scope': 'last_action', 'opposite': {'phrase': 'La sortie standard ne contient pas {text}'}, 'aliases': ['stdout contient {text}', 'la sortie contient {text}', 'la sortie standard affiche {text}', '^stdout contient (.+)$', '^la sortie standard contient (.+)$']}, 'params': {'text': '"connexion"'}}
[DEBUG] Trying to extract parameters from action command: 'echo "Connexion réussie"'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.stdout_contains
[DEBUG] Core handler returned: ValidationCheck(expected='stdout contient "connexion"', actual_cmd='if echo "$stdout" | grep -q ""connexion""; then echo \'stdout contient "connexion"\'; else echo \'stdout ne contient pas "connexion"\'; fi', handler='stdout_contains', scope='global', params={})
[DEBUG] compile_atomic called with: expected='stdout contient "OK"', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'echo "OK"'}
[DEBUG] canonize_validation result: {'phrase': '^stdout contient (.+)$', 'handler': 'stdout_contains', 'scope': 'last_action', 'pattern_entry': {'phrase': 'La sortie standard contient {text}', 'handler': 'stdout_contains', 'scope': 'last_action', 'opposite': {'phrase': 'La sortie standard ne contient pas {text}'}, 'aliases': ['stdout contient {text}', 'la sortie contient {text}', 'la sortie standard affiche {text}', '^stdout contient (.+)$', '^la sortie standard contient (.+)$']}, 'params': {'text': '"ok"'}}
[DEBUG] Trying to extract parameters from action command: 'echo "OK"'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.stdout_contains
[DEBUG] Core handler returned: ValidationCheck(expected='stdout contient "ok"', actual_cmd='if echo "$stdout" | grep -q ""ok""; then echo \'stdout contient "ok"\'; else echo \'stdout ne contient pas "ok"\'; fi', handler='stdout_contains', scope='global', params={})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\example.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\example.sh
