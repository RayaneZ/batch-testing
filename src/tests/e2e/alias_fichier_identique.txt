ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 3 lines
[DEBUG] Lexing text with 3 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: fichier_identique /tmp/a.txt /tmp/b.txt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'fichier_identique /tmp/a.txt /tmp/b.txt.', None), original=Action: Exécuter script.sh ; Résultat: fichier_identique /tmp/a.txt /tmp/b.txt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'fichier_identique /tmp/a.txt /tmp/b.txt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: Le fichier /tmp/a.txt est identique à /tmp/b.txt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'Le fichier /tmp/a.txt est identique à /tmp/b.txt.', None), original=Action: Exécuter script.sh ; Résultat: Le fichier /tmp/a.txt est identique à /tmp/b.txt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'Le fichier /tmp/a.txt est identique à /tmp/b.txt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: Le fichier /tmp/a.txt est identique a /tmp/b.txt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'Le fichier /tmp/a.txt est identique a /tmp/b.txt.', None), original=Action: Exécuter script.sh ; Résultat: Le fichier /tmp/a.txt est identique a /tmp/b.txt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'Le fichier /tmp/a.txt est identique a /tmp/b.txt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 4 tokens
[DEBUG] Grammar: _merge_action_result called with 4 tokens
[DEBUG] Grammar: Token 0: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 1: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 3: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 4 tokens
[DEBUG] compile_atomic called with: expected='fichier_identique /tmp/a.txt /tmp/b.txt', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Exécuter script.sh'}
[DEBUG] canonize_validation result: {'phrase': '^fichier_identique ([^ ]+) ([^ ]+)$', 'handler': 'files_identical', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Les fichiers sont identiques', 'handler': 'files_identical', 'scope': 'last_action', 'opposite': {'phrase': 'Les fichiers ne sont pas identiques'}, 'aliases': ['fichiers identiques', 'les fichiers sont les mêmes', 'fichiers égaux', 'Les fichiers sont identiques', '^fichiers identiques$', '^les fichiers sont les mêmes$', '^fichiers égaux$', '^fichier_identique ([^ ]+) ([^ ]+)$', '^le fichier ([^ ]+) est identique à ([^ ]+)$', '^le fichier ([^ ]+) est identique a ([^ ]+)$', '^Comparer le fichier ([^ ]+) avec ([^ ]+)$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'Exécuter script.sh'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.files_identical
[DEBUG] Core handler returned: ValidationCheck(expected='^fichier_identique ([^ ]+) ([^ ]+)$', actual_cmd="if [ -f '{file1}' ] && [ -f '{file2}' ]; then cmp -s '{file1}' '{file2}' && echo '{expected}' || echo '{opposite}'; else echo '{opposite}'; fi", handler='files_identical', scope='last_action', params={'file1': None, 'file2': None, 'opposite': 'les fichiers None et None ne sont pas identiques'})
[DEBUG] compile_atomic called with: expected='Le fichier /tmp/a.txt est identique à /tmp/b.txt', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Exécuter script.sh'}
[DEBUG] canonize_validation result: {'phrase': '^le fichier ([^ ]+) est identique à ([^ ]+)$', 'handler': 'files_identical', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Les fichiers sont identiques', 'handler': 'files_identical', 'scope': 'last_action', 'opposite': {'phrase': 'Les fichiers ne sont pas identiques'}, 'aliases': ['fichiers identiques', 'les fichiers sont les mêmes', 'fichiers égaux', 'Les fichiers sont identiques', '^fichiers identiques$', '^les fichiers sont les mêmes$', '^fichiers égaux$', '^fichier_identique ([^ ]+) ([^ ]+)$', '^le fichier ([^ ]+) est identique à ([^ ]+)$', '^le fichier ([^ ]+) est identique a ([^ ]+)$', '^Comparer le fichier ([^ ]+) avec ([^ ]+)$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'Exécuter script.sh'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.files_identical
[DEBUG] Core handler returned: ValidationCheck(expected='^le fichier ([^ ]+) est identique à ([^ ]+)$', actual_cmd="if [ -f '{file1}' ] && [ -f '{file2}' ]; then cmp -s '{file1}' '{file2}' && echo '{expected}' || echo '{opposite}'; else echo '{opposite}'; fi", handler='files_identical', scope='last_action', params={'file1': None, 'file2': None, 'opposite': 'les fichiers None et None ne sont pas identiques'})
[DEBUG] compile_atomic called with: expected='Le fichier /tmp/a.txt est identique a /tmp/b.txt', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Exécuter script.sh'}
[DEBUG] canonize_validation result: {'phrase': '^le fichier ([^ ]+) est identique a ([^ ]+)$', 'handler': 'files_identical', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Les fichiers sont identiques', 'handler': 'files_identical', 'scope': 'last_action', 'opposite': {'phrase': 'Les fichiers ne sont pas identiques'}, 'aliases': ['fichiers identiques', 'les fichiers sont les mêmes', 'fichiers égaux', 'Les fichiers sont identiques', '^fichiers identiques$', '^les fichiers sont les mêmes$', '^fichiers égaux$', '^fichier_identique ([^ ]+) ([^ ]+)$', '^le fichier ([^ ]+) est identique à ([^ ]+)$', '^le fichier ([^ ]+) est identique a ([^ ]+)$', '^Comparer le fichier ([^ ]+) avec ([^ ]+)$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'Exécuter script.sh'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.files_identical
[DEBUG] Core handler returned: ValidationCheck(expected='^le fichier ([^ ]+) est identique a ([^ ]+)$', actual_cmd="if [ -f '{file1}' ] && [ -f '{file2}' ]; then cmp -s '{file1}' '{file2}' && echo '{expected}' || echo '{opposite}'; else echo '{opposite}'; fi", handler='files_identical', scope='last_action', params={'file1': None, 'file2': None, 'opposite': 'les fichiers None et None ne sont pas identiques'})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_fichier_identique.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_fichier_identique.sh
