ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 2 lines
[DEBUG] Lexing text with 2 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable SQL_CONN = sqlplus -S user/password@db ; Résultat: identifiants configurés. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Définir la variable SQL_CONN = sqlplus -S user/password@db, result=('Définir la variable SQL_CONN = sqlplus -S user/password@db', 'identifiants configurés.', None), original=Action: Définir la variable SQL_CONN = sqlplus -S user/password@db ; Résultat: identifiants configurés. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Définir la variable SQL_CONN = sqlplus -S user/password@db' -> '('Définir la variable SQL_CONN = sqlplus -S user/password@db', 'identifiants configurés.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable SQL_CONN = sqlplus -S user/password@db ; Résultat: Les identifiants sont configurés. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Définir la variable SQL_CONN = sqlplus -S user/password@db, result=('Définir la variable SQL_CONN = sqlplus -S user/password@db', 'Les identifiants sont configurés.', None), original=Action: Définir la variable SQL_CONN = sqlplus -S user/password@db ; Résultat: Les identifiants sont configurés. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Définir la variable SQL_CONN = sqlplus -S user/password@db' -> '('Définir la variable SQL_CONN = sqlplus -S user/password@db', 'Les identifiants sont configurés.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 3 tokens
[DEBUG] Grammar: _merge_action_result called with 3 tokens
[DEBUG] Grammar: Token 0: kind=ACTION_RESULT, value='Définir la variable SQL_CONN = sqlplus -S user/password@db'
[DEBUG] Grammar: Token 1: kind=ACTION_RESULT, value='Définir la variable SQL_CONN = sqlplus -S user/password@db'
[DEBUG] Grammar: Token 2: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 3 tokens
[DEBUG] compile_atomic called with: expected='identifiants configurés', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Définir la variable SQL_CONN = sqlplus -S user/password@db'}
[DEBUG] canonize_validation result: {'phrase': 'Identifiants configurés', 'handler': 'credentials_configured', 'scope': 'global', 'pattern_entry': {'phrase': 'Identifiants configurés', 'handler': 'credentials_configured', 'scope': 'global', 'opposite': {'phrase': 'Identifiants non configurés'}, 'aliases': ['identifiants configurés', 'Les identifiants sont configurés', '^identifiants configurés$', '^les identifiants sont configurés$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'Définir la variable SQL_CONN = sqlplus -S user/password@db'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.credentials_configured
[DEBUG] Core handler returned: ValidationCheck(expected='Identifiants configurés', actual_cmd="if [ -n '${{var}}' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='credentials_configured', scope='global', params={'var': 'SQL_CONN', 'opposite': "la variable SQL_CONN n'est pas configurée"})
[DEBUG] compile_atomic called with: expected='Les identifiants sont configurés', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Définir la variable SQL_CONN = sqlplus -S user/password@db'}
[DEBUG] canonize_validation result: {'phrase': 'Les identifiants sont configurés', 'handler': 'credentials_configured', 'scope': 'global', 'pattern_entry': {'phrase': 'Identifiants configurés', 'handler': 'credentials_configured', 'scope': 'global', 'opposite': {'phrase': 'Identifiants non configurés'}, 'aliases': ['identifiants configurés', 'Les identifiants sont configurés', '^identifiants configurés$', '^les identifiants sont configurés$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'Définir la variable SQL_CONN = sqlplus -S user/password@db'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.credentials_configured
[DEBUG] Core handler returned: ValidationCheck(expected='Les identifiants sont configurés', actual_cmd="if [ -n '${{var}}' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='credentials_configured', scope='global', params={'var': 'SQL_CONN', 'opposite': "la variable SQL_CONN n'est pas configurée"})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_identifiants_configures.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_identifiants_configures.sh
