ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 4 lines
[DEBUG] Lexing text with 4 lines
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Contenu du fichier, result=('Contenu du fichier',), original=Étape: Contenu du fichier at line 1
[DEBUG] Yielding token: STEP@1:0 'Contenu du fichier' -> '('Contenu du fichier',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "ERREUR" > logs.txt at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "ERREUR" > logs.txt at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "ERREUR" > logs.txt, result=('echo "ERREUR" > logs.txt',), original=Action: echo "ERREUR" > logs.txt at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "ERREUR" > logs.txt' -> '('echo "ERREUR" > logs.txt',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: fichier logs.txt contient ERREUR at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: fichier logs.txt contient ERREUR at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: fichier logs.txt contient ERREUR at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=fichier logs.txt contient ERREUR, result=('fichier logs.txt contient ERREUR',), original=Résultat: fichier logs.txt contient ERREUR at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'fichier logs.txt contient ERREUR' -> '('fichier logs.txt contient ERREUR',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 5 tokens
[DEBUG] Grammar: _merge_action_result called with 5 tokens
[DEBUG] Grammar: Token 0: kind=EMPTY, value=''
[DEBUG] Grammar: Token 1: kind=STEP, value='Contenu du fichier'
[DEBUG] Grammar: Token 2: kind=ACTION_ONLY, value='echo "ERREUR" > logs.txt'
[DEBUG] Grammar: Token 3: kind=RESULT_ONLY, value='fichier logs.txt contient ERREUR'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: Merging ACTION_ONLY 'echo "ERREUR" > logs.txt' with RESULT_ONLY 'fichier logs.txt contient ERREUR'
[DEBUG] Grammar: _merge_action_result returning 4 tokens
[DEBUG] compile_atomic called with: expected='fichier logs.txt contient ERREUR', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'echo "ERREUR" > logs.txt'}
[DEBUG] canonize_validation result: {'phrase': '^fichier ([^ ]+) contient (.+)$', 'handler': 'file_contains', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier {file} contient {text}', 'handler': 'file_contains', 'scope': 'global', 'opposite': {'phrase': 'Le fichier {file} ne contient pas {text}'}, 'aliases': ['fichier {file} contient {text}', '^fichier ([^ ]+) contient (.+)$', '^le fichier ([^ ]+) contient (.+)$']}, 'params': {'file': 'logs.txt', 'text': 'erreur'}}
[DEBUG] Trying to extract parameters from action command: 'echo "ERREUR" > logs.txt'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_contains
[DEBUG] Core handler returned: ValidationCheck(expected='^fichier ([^ ]+) contient (.+)$', actual_cmd='if grep -q "{text}" "{file}"; then echo \'{expected}\'; else echo \'{opposite}\'; fi', handler='file_contains', scope='global', params={'file': 'logs.txt', 'text': 'erreur', 'opposite': 'NOT(^fichier ([^ ]+) contient (.+)$)'})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_file_contains.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_file_contains.sh
