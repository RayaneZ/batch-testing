ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 6 lines
[DEBUG] Lexing text with 6 lines
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Création et modification de fichiers, result=('Création et modification de fichiers',), original=Étape: Création et modification de fichiers at line 1
[DEBUG] Yielding token: STEP@1:0 'Création et modification de fichiers' -> '('Création et modification de fichiers',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: créer le dossier /tmp/data avec les droits 0755 ; Résultat: Le dossier est créé at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=créer le dossier /tmp/data avec les droits 0755, result=('créer le dossier /tmp/data avec les droits 0755', 'Le dossier est créé', None), original=Action: créer le dossier /tmp/data avec les droits 0755 ; Résultat: Le dossier est créé at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'créer le dossier /tmp/data avec les droits 0755' -> '('créer le dossier /tmp/data avec les droits 0755', 'Le dossier est créé', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: créer le fichier /tmp/output.txt avec les droits 0644 ; Résultat: Le fichier est présent at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=créer le fichier /tmp/output.txt avec les droits 0644, result=('créer le fichier /tmp/output.txt avec les droits 0644', 'Le fichier est présent', None), original=Action: créer le fichier /tmp/output.txt avec les droits 0644 ; Résultat: Le fichier est présent at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'créer le fichier /tmp/output.txt avec les droits 0644' -> '('créer le fichier /tmp/output.txt avec les droits 0644', 'Le fichier est présent', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: mettre à jour la date du fichier /tmp/output.txt 202501021200 ; Résultat: La date est modifiée at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=mettre à jour la date du fichier /tmp/output.txt 202501021200, result=('mettre à jour la date du fichier /tmp/output.txt 202501021200', 'La date est modifiée', None), original=Action: mettre à jour la date du fichier /tmp/output.txt 202501021200 ; Résultat: La date est modifiée at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'mettre à jour la date du fichier /tmp/output.txt 202501021200' -> '('mettre à jour la date du fichier /tmp/output.txt 202501021200', 'La date est modifiée', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: afficher le contenu du fichier /tmp/output.txt ; Résultat: Le contenu est correct at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=afficher le contenu du fichier /tmp/output.txt, result=('afficher le contenu du fichier /tmp/output.txt', 'Le contenu est correct', None), original=Action: afficher le contenu du fichier /tmp/output.txt ; Résultat: Le contenu est correct at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'afficher le contenu du fichier /tmp/output.txt' -> '('afficher le contenu du fichier /tmp/output.txt', 'Le contenu est correct', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 7 tokens
[DEBUG] Grammar: _merge_action_result called with 7 tokens
[DEBUG] Grammar: Token 0: kind=STEP, value='Création et modification de fichiers'
[DEBUG] Grammar: Token 1: kind=EMPTY, value=''
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='créer le dossier /tmp/data avec les droits 0755'
[DEBUG] Grammar: Token 3: kind=ACTION_RESULT, value='créer le fichier /tmp/output.txt avec les droits 0644'
[DEBUG] Grammar: Token 4: kind=ACTION_RESULT, value='mettre à jour la date du fichier /tmp/output.txt 202501021200'
[DEBUG] Grammar: Token 5: kind=ACTION_RESULT, value='afficher le contenu du fichier /tmp/output.txt'
[DEBUG] Grammar: Token 6: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 7 tokens
[DEBUG] compile_atomic called with: expected='Le dossier est créé', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'créer le dossier /tmp/data avec les droits 0755'}
[DEBUG] canonize_validation result: {'phrase': 'le dossier est créé', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'créer le dossier /tmp/data avec les droits 0755'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] compile_atomic called with: expected='Le fichier est présent', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'créer le fichier /tmp/output.txt avec les droits 0644'}
[DEBUG] canonize_validation result: {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'opposite': {'phrase': 'Le fichier est absent'}, 'aliases': ['Le fichier est présent', 'le fichier existe', 'fichier présent', 'le fichier est cree', 'fichier cree', 'le fichier est créé', 'fichier créé', 'le fichier est initialisé', 'fichier initialisé', '^le fichier est présent$', '^le fichier existe$', '^fichier présent$', '^le fichier est cree$', '^fichier cree$', '^le fichier est créé$', '^fichier créé$', '^le fichier est initialisé$', '^fichier initialisé$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'créer le fichier /tmp/output.txt avec les droits 0644'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_present
[DEBUG] Core handler returned: ValidationCheck(expected='Le fichier est présent', actual_cmd="if [ -f  ]; then echo 'Le fichier est présent'; else echo 'le fichier None est absent'; fi", handler='file_present', scope='global', params={'file_path': None, 'opposite': 'le fichier None est absent'})
[DEBUG] compile_atomic called with: expected='La date est modifiée', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'mettre à jour la date du fichier /tmp/output.txt 202501021200'}
[DEBUG] canonize_validation result: {'phrase': 'La date est modifiée', 'handler': 'date_modified', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Date modifiée', 'handler': 'date_modified', 'scope': 'last_action', 'opposite': {'phrase': 'Date inchangée'}, 'aliases': ['date modifiée', 'La date est modifiée', 'date modifiee', '^date modifiée$', '^la date est modifiée$', '^date modifiee$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'mettre à jour la date du fichier /tmp/output.txt 202501021200'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.date_modified
[DEBUG] Core handler returned: ValidationCheck(expected='date modifiée', actual_cmd="echo 'ERROR: Missing file or date for date_modified validation'", handler='date_modified', scope='last_action', params={'file_path': None, 'date': None})
[DEBUG] compile_atomic called with: expected='Le contenu est correct', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'afficher le contenu du fichier /tmp/output.txt'}
[DEBUG] canonize_validation result: {'phrase': 'le contenu est correct', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'afficher le contenu du fichier /tmp/output.txt'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu est correct', actual_cmd="if [ -s '{file_path}' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_case_4.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_case_4.sh
