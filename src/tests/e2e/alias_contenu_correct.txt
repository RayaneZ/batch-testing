ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 2 lines
[DEBUG] Lexing text with 2 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/file.txt ; Résultat: contenu correct. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/file.txt, result=('Afficher le contenu du fichier = /tmp/file.txt', 'contenu correct.', None), original=Action: Afficher le contenu du fichier = /tmp/file.txt ; Résultat: contenu correct. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/file.txt' -> '('Afficher le contenu du fichier = /tmp/file.txt', 'contenu correct.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/file.txt ; Résultat: Le contenu est correct. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/file.txt, result=('Afficher le contenu du fichier = /tmp/file.txt', 'Le contenu est correct.', None), original=Action: Afficher le contenu du fichier = /tmp/file.txt ; Résultat: Le contenu est correct. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/file.txt' -> '('Afficher le contenu du fichier = /tmp/file.txt', 'Le contenu est correct.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 3 tokens
[DEBUG] Grammar: _merge_action_result called with 3 tokens
[DEBUG] Grammar: Token 0: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/file.txt'
[DEBUG] Grammar: Token 1: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/file.txt'
[DEBUG] Grammar: Token 2: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 3 tokens
[DEBUG] compile_atomic called with: expected='contenu correct', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/file.txt'}
[DEBUG] canonize_validation result: {'phrase': 'contenu correct', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'Afficher le contenu du fichier = /tmp/file.txt'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='contenu correct', actual_cmd="if [ -s '{file_path}' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] compile_atomic called with: expected='Le contenu est correct', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/file.txt'}
[DEBUG] canonize_validation result: {'phrase': 'le contenu est correct', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'Afficher le contenu du fichier = /tmp/file.txt'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu est correct', actual_cmd="if [ -s '{file_path}' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_contenu_correct.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_contenu_correct.sh
