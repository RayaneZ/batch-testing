ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 4 lines
[DEBUG] Lexing text with 4 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: copier le fichier /tmp/a.txt vers /tmp/b.txt ; Résultat: le fichier est copié. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=copier le fichier /tmp/a.txt vers /tmp/b.txt, result=('copier le fichier /tmp/a.txt vers /tmp/b.txt', 'le fichier est copié.', None), original=Action: copier le fichier /tmp/a.txt vers /tmp/b.txt ; Résultat: le fichier est copié. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'copier le fichier /tmp/a.txt vers /tmp/b.txt' -> '('copier le fichier /tmp/a.txt vers /tmp/b.txt', 'le fichier est copié.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: déplacer le fichier /tmp/a.txt vers /tmp/b.txt ; Résultat: le fichier est copié. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=déplacer le fichier /tmp/a.txt vers /tmp/b.txt, result=('déplacer le fichier /tmp/a.txt vers /tmp/b.txt', 'le fichier est copié.', None), original=Action: déplacer le fichier /tmp/a.txt vers /tmp/b.txt ; Résultat: le fichier est copié. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'déplacer le fichier /tmp/a.txt vers /tmp/b.txt' -> '('déplacer le fichier /tmp/a.txt vers /tmp/b.txt', 'le fichier est copié.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: copier le dossier /tmp/dir vers /tmp/dir2 ; Résultat: le dossier est copié. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=copier le dossier /tmp/dir vers /tmp/dir2, result=('copier le dossier /tmp/dir vers /tmp/dir2', 'le dossier est copié.', None), original=Action: copier le dossier /tmp/dir vers /tmp/dir2 ; Résultat: le dossier est copié. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'copier le dossier /tmp/dir vers /tmp/dir2' -> '('copier le dossier /tmp/dir vers /tmp/dir2', 'le dossier est copié.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: déplacer le dossier /tmp/dir vers /tmp/dir2 ; Résultat: le dossier est copié. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=déplacer le dossier /tmp/dir vers /tmp/dir2, result=('déplacer le dossier /tmp/dir vers /tmp/dir2', 'le dossier est copié.', None), original=Action: déplacer le dossier /tmp/dir vers /tmp/dir2 ; Résultat: le dossier est copié. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'déplacer le dossier /tmp/dir vers /tmp/dir2' -> '('déplacer le dossier /tmp/dir vers /tmp/dir2', 'le dossier est copié.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 5 tokens
[DEBUG] Grammar: _merge_action_result called with 5 tokens
[DEBUG] Grammar: Token 0: kind=ACTION_RESULT, value='copier le fichier /tmp/a.txt vers /tmp/b.txt'
[DEBUG] Grammar: Token 1: kind=ACTION_RESULT, value='déplacer le fichier /tmp/a.txt vers /tmp/b.txt'
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='copier le dossier /tmp/dir vers /tmp/dir2'
[DEBUG] Grammar: Token 3: kind=ACTION_RESULT, value='déplacer le dossier /tmp/dir vers /tmp/dir2'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 5 tokens
[DEBUG] compile_atomic called with: expected='le fichier est copié', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'copier le fichier /tmp/a.txt vers /tmp/b.txt'}
[DEBUG] canonize_validation result: {'phrase': 'Le fichier est copié', 'handler': 'file_copied', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le fichier est copié', 'handler': 'file_copied', 'scope': 'last_action', 'opposite': {'phrase': "Le fichier n'est pas copié"}, 'aliases': ['le fichier est copié', 'fichier copié', '^le fichier est copié$', '^fichier copié$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'copier le fichier /tmp/a.txt vers /tmp/b.txt'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_copied
[DEBUG] Core handler returned: ValidationCheck(expected='Le fichier est copié', actual_cmd="if [ -f '{file1}' ] && [ -f '{file2}' ]; then cmp -s '{file1}' '{file2}' && echo '{expected}' || echo '{opposite}'; else echo '{opposite}'; fi", handler='file_copied', scope='last_action', params={'file1': None, 'file2': None, 'opposite': "le fichier None n'a pas été copié vers None"})
[DEBUG] compile_atomic called with: expected='le fichier est copié', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'déplacer le fichier /tmp/a.txt vers /tmp/b.txt'}
[DEBUG] canonize_validation result: {'phrase': 'Le fichier est copié', 'handler': 'file_copied', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le fichier est copié', 'handler': 'file_copied', 'scope': 'last_action', 'opposite': {'phrase': "Le fichier n'est pas copié"}, 'aliases': ['le fichier est copié', 'fichier copié', '^le fichier est copié$', '^fichier copié$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'déplacer le fichier /tmp/a.txt vers /tmp/b.txt'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_copied
[DEBUG] Core handler returned: ValidationCheck(expected='Le fichier est copié', actual_cmd="if [ -f '{file1}' ] && [ -f '{file2}' ]; then cmp -s '{file1}' '{file2}' && echo '{expected}' || echo '{opposite}'; else echo '{opposite}'; fi", handler='file_copied', scope='last_action', params={'file1': None, 'file2': None, 'opposite': "le fichier None n'a pas été copié vers None"})
[DEBUG] compile_atomic called with: expected='le dossier est copié', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'copier le dossier /tmp/dir vers /tmp/dir2'}
[DEBUG] canonize_validation result: {'phrase': 'Le dossier est copié', 'handler': 'dir_copied', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est copié', 'handler': 'dir_copied', 'scope': 'last_action', 'opposite': {'phrase': "Le dossier n'est pas copié"}, 'aliases': ['le dossier est copié', 'dossier copié', '^le dossier est copié$', '^dossier copié$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'copier le dossier /tmp/dir vers /tmp/dir2'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_copied
[DEBUG] Core handler returned: ValidationCheck(expected='Le dossier est copié', actual_cmd="if [ -d '{dir1}' ] && [ -d '{dir2}' ]; then diff -r '{dir1}' '{dir2}' >/dev/null 2>&1 && echo '{expected}' || echo '{opposite}'; else echo '{opposite}'; fi", handler='dir_copied', scope='last_action', params={'dir1': None, 'dir2': None, 'opposite': "le dossier None n'a pas été copié vers None"})
[DEBUG] compile_atomic called with: expected='le dossier est copié', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'déplacer le dossier /tmp/dir vers /tmp/dir2'}
[DEBUG] canonize_validation result: {'phrase': 'Le dossier est copié', 'handler': 'dir_copied', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est copié', 'handler': 'dir_copied', 'scope': 'last_action', 'opposite': {'phrase': "Le dossier n'est pas copié"}, 'aliases': ['le dossier est copié', 'dossier copié', '^le dossier est copié$', '^dossier copié$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'déplacer le dossier /tmp/dir vers /tmp/dir2'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_copied
[DEBUG] Core handler returned: ValidationCheck(expected='Le dossier est copié', actual_cmd="if [ -d '{dir1}' ] && [ -d '{dir2}' ]; then diff -r '{dir1}' '{dir2}' >/dev/null 2>&1 && echo '{expected}' || echo '{opposite}'; else echo '{opposite}'; fi", handler='dir_copied', scope='last_action', params={'dir1': None, 'dir2': None, 'opposite': "le dossier None n'a pas été copié vers None"})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_action_copy.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_action_copy.sh
