ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 7 lines
[DEBUG] Lexing text with 7 lines
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Connexion personnalisée, result=('Connexion personnalisée',), original=Étape: Connexion personnalisée at line 1
[DEBUG] Yielding token: STEP@1:0 'Connexion personnalisée' -> '('Connexion personnalisée',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: SQL_CONN=my_user/my_pass@base at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: SQL_CONN=my_user/my_pass@base at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=SQL_CONN=my_user/my_pass@base, result=('SQL_CONN=my_user/my_pass@base',), original=Action: SQL_CONN=my_user/my_pass@base at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'SQL_CONN=my_user/my_pass@base' -> '('SQL_CONN=my_user/my_pass@base',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable SQL_CONN vaut my_user/my_pass@base at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable SQL_CONN vaut my_user/my_pass@base at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable SQL_CONN vaut my_user/my_pass@base at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=variable SQL_CONN vaut my_user/my_pass@base, result=('variable SQL_CONN vaut my_user/my_pass@base',), original=Résultat: variable SQL_CONN vaut my_user/my_pass@base at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'variable SQL_CONN vaut my_user/my_pass@base' -> '('variable SQL_CONN vaut my_user/my_pass@base',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: init_custom.sql at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: init_custom.sql at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=init_custom.sql, result=('init_custom.sql',), original=Action: init_custom.sql at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'init_custom.sql' -> '('init_custom.sql',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient OK at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient OK at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient OK at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=stdout contient OK, result=('stdout contient OK',), original=Résultat: stdout contient OK at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'stdout contient OK' -> '('stdout contient OK',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 8 tokens
[DEBUG] Grammar: _merge_action_result called with 8 tokens
[DEBUG] Grammar: Token 0: kind=EMPTY, value=''
[DEBUG] Grammar: Token 1: kind=STEP, value='Connexion personnalisée'
[DEBUG] Grammar: Token 2: kind=ACTION_ONLY, value='SQL_CONN=my_user/my_pass@base'
[DEBUG] Grammar: Token 3: kind=RESULT_ONLY, value='variable SQL_CONN vaut my_user/my_pass@base'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: Token 5: kind=ACTION_ONLY, value='init_custom.sql'
[DEBUG] Grammar: Token 6: kind=RESULT_ONLY, value='stdout contient OK'
[DEBUG] Grammar: Token 7: kind=EMPTY, value=''
[DEBUG] Grammar: Merging ACTION_ONLY 'SQL_CONN=my_user/my_pass@base' with RESULT_ONLY 'variable SQL_CONN vaut my_user/my_pass@base'
[DEBUG] Grammar: Merging ACTION_ONLY 'init_custom.sql' with RESULT_ONLY 'stdout contient OK'
[DEBUG] Grammar: _merge_action_result returning 6 tokens
[DEBUG] compile_atomic called with: expected='variable SQL_CONN vaut my_user/my_pass@base', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'SQL_CONN=my_user/my_pass@base'}
[DEBUG] canonize_validation result: {'phrase': 'variable {var} vaut {value}', 'handler': 'var_equals', 'scope': 'global', 'pattern_entry': {'phrase': 'variable {var} vaut {value}', 'handler': 'var_equals', 'scope': 'global', 'opposite': {'phrase': 'variable {var} ne vaut pas {value}'}, 'aliases': []}, 'params': {'var': 'sql_conn', 'value': 'my_user/my_pass@base'}}
[DEBUG] Trying to extract parameters from action command: 'SQL_CONN=my_user/my_pass@base'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.var_equals
[DEBUG] Core handler returned: ValidationCheck(expected='variable sql_conn vaut my_user/my_pass@base', actual_cmd='if [ "$sql_conn" = "my_user/my_pass@base" ]; then echo \'variable sql_conn vaut my_user/my_pass@base\'; else echo \'variable sql_conn ne vaut pas my_user/my_pass@base\'; fi', handler='var_equals', scope='global', params={})
[DEBUG] compile_atomic called with: expected='stdout contient OK', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'init_custom.sql'}
[DEBUG] canonize_validation result: {'phrase': '^stdout contient (.+)$', 'handler': 'stdout_contains', 'scope': 'last_action', 'pattern_entry': {'phrase': 'La sortie standard contient {text}', 'handler': 'stdout_contains', 'scope': 'last_action', 'opposite': {'phrase': 'La sortie standard ne contient pas {text}'}, 'aliases': ['stdout contient {text}', 'la sortie contient {text}', 'la sortie standard affiche {text}', '^stdout contient (.+)$', '^la sortie standard contient (.+)$']}, 'params': {'text': 'ok'}}
[DEBUG] Trying to extract parameters from action command: 'init_custom.sql'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.stdout_contains
[DEBUG] Core handler returned: ValidationCheck(expected='stdout contient ok', actual_cmd='if echo "$stdout" | grep -q "ok"; then echo \'stdout contient ok\'; else echo \'stdout ne contient pas ok\'; fi', handler='stdout_contains', scope='global', params={})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\sql_conn_custom.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\sql_conn_custom.sh
