ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 4 lines
[DEBUG] Lexing text with 4 lines
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Création et mise à jour de fichier, result=('Création et mise à jour de fichier',), original=Étape: Création et mise à jour de fichier at line 1
[DEBUG] Yielding token: STEP@1:0 'Création et mise à jour de fichier' -> '('Création et mise à jour de fichier',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: créer le fichier /tmp/test.txt avec les droits 0600 ; Résultat: Le fichier est présent at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=créer le fichier /tmp/test.txt avec les droits 0600, result=('créer le fichier /tmp/test.txt avec les droits 0600', 'Le fichier est présent', None), original=Action: créer le fichier /tmp/test.txt avec les droits 0600 ; Résultat: Le fichier est présent at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'créer le fichier /tmp/test.txt avec les droits 0600' -> '('créer le fichier /tmp/test.txt avec les droits 0600', 'Le fichier est présent', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: mettre à jour le fichier /tmp/test.txt avec les droits 0600 ; Résultat: Le fichier est présent at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=mettre à jour le fichier /tmp/test.txt avec les droits 0600, result=('mettre à jour le fichier /tmp/test.txt avec les droits 0600', 'Le fichier est présent', None), original=Action: mettre à jour le fichier /tmp/test.txt avec les droits 0600 ; Résultat: Le fichier est présent at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'mettre à jour le fichier /tmp/test.txt avec les droits 0600' -> '('mettre à jour le fichier /tmp/test.txt avec les droits 0600', 'Le fichier est présent', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 5 tokens
[DEBUG] Grammar: _merge_action_result called with 5 tokens
[DEBUG] Grammar: Token 0: kind=STEP, value='Création et mise à jour de fichier'
[DEBUG] Grammar: Token 1: kind=EMPTY, value=''
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='créer le fichier /tmp/test.txt avec les droits 0600'
[DEBUG] Grammar: Token 3: kind=ACTION_RESULT, value='mettre à jour le fichier /tmp/test.txt avec les droits 0600'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 5 tokens
[DEBUG] compile_atomic called with: expected='Le fichier est présent', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'créer le fichier /tmp/test.txt avec les droits 0600'}
[DEBUG] canonize_validation result: {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'opposite': {'phrase': 'Le fichier est absent'}, 'aliases': ['Le fichier est présent', 'le fichier existe', 'fichier présent', 'le fichier est cree', 'fichier cree', 'le fichier est créé', 'fichier créé', 'le fichier est initialisé', 'fichier initialisé', '^le fichier est présent$', '^le fichier existe$', '^fichier présent$', '^le fichier est cree$', '^fichier cree$', '^le fichier est créé$', '^fichier créé$', '^le fichier est initialisé$', '^fichier initialisé$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'créer le fichier /tmp/test.txt avec les droits 0600'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_present
[DEBUG] Core handler returned: ValidationCheck(expected='Le fichier est présent', actual_cmd="if [ -f  ]; then echo 'Le fichier est présent'; else echo 'le fichier None est absent'; fi", handler='file_present', scope='global', params={'file_path': None, 'opposite': 'le fichier None est absent'})
[DEBUG] compile_atomic called with: expected='Le fichier est présent', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'mettre à jour le fichier /tmp/test.txt avec les droits 0600'}
[DEBUG] canonize_validation result: {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'opposite': {'phrase': 'Le fichier est absent'}, 'aliases': ['Le fichier est présent', 'le fichier existe', 'fichier présent', 'le fichier est cree', 'fichier cree', 'le fichier est créé', 'fichier créé', 'le fichier est initialisé', 'fichier initialisé', '^le fichier est présent$', '^le fichier existe$', '^fichier présent$', '^le fichier est cree$', '^fichier cree$', '^le fichier est créé$', '^fichier créé$', '^le fichier est initialisé$', '^fichier initialisé$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'mettre à jour le fichier /tmp/test.txt avec les droits 0600'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_present
[DEBUG] Core handler returned: ValidationCheck(expected='Le fichier est présent', actual_cmd="if [ -f  ]; then echo 'Le fichier est présent'; else echo 'le fichier None est absent'; fi", handler='file_present', scope='global', params={'file_path': None, 'opposite': 'le fichier None est absent'})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_action_fileop.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_action_fileop.sh
