ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 4 lines
[DEBUG] Lexing text with 4 lines
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=variable vaut, result=('variable vaut',), original=Étape: variable vaut at line 1
[DEBUG] Yielding token: STEP@1:0 'variable vaut' -> '('variable vaut',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: export MON_VAR=42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: export MON_VAR=42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=export MON_VAR=42, result=('export MON_VAR=42',), original=Action: export MON_VAR=42 at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'export MON_VAR=42' -> '('export MON_VAR=42',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable MON_VAR vaut 42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable MON_VAR vaut 42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable MON_VAR vaut 42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=variable MON_VAR vaut 42, result=('variable MON_VAR vaut 42',), original=Résultat: variable MON_VAR vaut 42 at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'variable MON_VAR vaut 42' -> '('variable MON_VAR vaut 42',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 5 tokens
[DEBUG] Grammar: _merge_action_result called with 5 tokens
[DEBUG] Grammar: Token 0: kind=EMPTY, value=''
[DEBUG] Grammar: Token 1: kind=STEP, value='variable vaut'
[DEBUG] Grammar: Token 2: kind=ACTION_ONLY, value='export MON_VAR=42'
[DEBUG] Grammar: Token 3: kind=RESULT_ONLY, value='variable MON_VAR vaut 42'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: Merging ACTION_ONLY 'export MON_VAR=42' with RESULT_ONLY 'variable MON_VAR vaut 42'
[DEBUG] Grammar: _merge_action_result returning 4 tokens
[DEBUG] compile_atomic called with: expected='variable MON_VAR vaut 42', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'export MON_VAR=42'}
[DEBUG] canonize_validation result: {'phrase': 'variable {var} vaut {value}', 'handler': 'var_equals', 'scope': 'global', 'pattern_entry': {'phrase': 'variable {var} vaut {value}', 'handler': 'var_equals', 'scope': 'global', 'opposite': {'phrase': 'variable {var} ne vaut pas {value}'}, 'aliases': []}, 'params': {'var': 'mon_var', 'value': '42'}}
[DEBUG] Trying to extract parameters from action command: 'export MON_VAR=42'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.var_equals
[DEBUG] Core handler returned: ValidationCheck(expected='variable mon_var vaut 42', actual_cmd='if [ "$mon_var" = "42" ]; then echo \'variable mon_var vaut 42\'; else echo \'variable mon_var ne vaut pas 42\'; fi', handler='var_equals', scope='global', params={})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_variable_equals.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_variable_equals.sh
