ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 10 lines
[DEBUG] Lexing text with 10 lines
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Vérifications de fichiers et dossiers, result=('Vérifications de fichiers et dossiers',), original=Étape: Vérifications de fichiers et dossiers at line 1
[DEBUG] Yielding token: STEP@1:0 'Vérifications de fichiers et dossiers' -> '('Vérifications de fichiers et dossiers',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/test.log existe ; Résultat: Le fichier /tmp/test.log existe at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/test.log existe, result=('Vérifier que le fichier /tmp/test.log existe', 'Le fichier /tmp/test.log existe', None), original=Action: Vérifier que le fichier /tmp/test.log existe ; Résultat: Le fichier /tmp/test.log existe at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/test.log existe' -> '('Vérifier que le fichier /tmp/test.log existe', 'Le fichier /tmp/test.log existe', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/test.log a les droits 0644 ; Résultat: Le fichier /tmp/test.log a les droits 0644 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/test.log a les droits 0644, result=('Vérifier que le fichier /tmp/test.log a les droits 0644', 'Le fichier /tmp/test.log a les droits 0644', None), original=Action: Vérifier que le fichier /tmp/test.log a les droits 0644 ; Résultat: Le fichier /tmp/test.log a les droits 0644 at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/test.log a les droits 0644' -> '('Vérifier que le fichier /tmp/test.log a les droits 0644', 'Le fichier /tmp/test.log a les droits 0644', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/test.log contient OK ; Résultat: Le fichier /tmp/test.log contient OK at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/test.log contient OK, result=('Vérifier que le fichier /tmp/test.log contient OK', 'Le fichier /tmp/test.log contient OK', None), original=Action: Vérifier que le fichier /tmp/test.log contient OK ; Résultat: Le fichier /tmp/test.log contient OK at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/test.log contient OK' -> '('Vérifier que le fichier /tmp/test.log contient OK', 'Le fichier /tmp/test.log contient OK', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD ; Résultat: Le fichier /tmp/test.log contient exactement ALLGOOD at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD, result=('Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD', 'Le fichier /tmp/test.log contient exactement ALLGOOD', None), original=Action: Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD ; Résultat: Le fichier /tmp/test.log contient exactement ALLGOOD at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD' -> '('Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD', 'Le fichier /tmp/test.log contient exactement ALLGOOD', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le dossier /tmp/testdir existe ; Résultat: Le dossier /tmp/testdir existe at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le dossier /tmp/testdir existe, result=('Vérifier que le dossier /tmp/testdir existe', 'Le dossier /tmp/testdir existe', None), original=Action: Vérifier que le dossier /tmp/testdir existe ; Résultat: Le dossier /tmp/testdir existe at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le dossier /tmp/testdir existe' -> '('Vérifier que le dossier /tmp/testdir existe', 'Le dossier /tmp/testdir existe', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le dossier /tmp/testdir a les droits 0755 ; Résultat: Le dossier /tmp/testdir a les droits 0755 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le dossier /tmp/testdir a les droits 0755, result=('Vérifier que le dossier /tmp/testdir a les droits 0755', 'Le dossier /tmp/testdir a les droits 0755', None), original=Action: Vérifier que le dossier /tmp/testdir a les droits 0755 ; Résultat: Le dossier /tmp/testdir a les droits 0755 at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le dossier /tmp/testdir a les droits 0755' -> '('Vérifier que le dossier /tmp/testdir a les droits 0755', 'Le dossier /tmp/testdir a les droits 0755', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt ; Résultat: Le dossier /tmp/testdir contient 2 fichiers *.txt at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt, result=('Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt', 'Le dossier /tmp/testdir contient 2 fichiers *.txt', None), original=Action: Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt ; Résultat: Le dossier /tmp/testdir contient 2 fichiers *.txt at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt' -> '('Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt', 'Le dossier /tmp/testdir contient 2 fichiers *.txt', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que la date du fichier /tmp/test.log est 202501010000 ; Résultat: La date du fichier /tmp/test.log est 202501010000 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que la date du fichier /tmp/test.log est 202501010000, result=('Vérifier que la date du fichier /tmp/test.log est 202501010000', 'La date du fichier /tmp/test.log est 202501010000', None), original=Action: Vérifier que la date du fichier /tmp/test.log est 202501010000 ; Résultat: La date du fichier /tmp/test.log est 202501010000 at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que la date du fichier /tmp/test.log est 202501010000' -> '('Vérifier que la date du fichier /tmp/test.log est 202501010000', 'La date du fichier /tmp/test.log est 202501010000', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 11 tokens
[DEBUG] Grammar: _merge_action_result called with 11 tokens
[DEBUG] Grammar: Token 0: kind=STEP, value='Vérifications de fichiers et dossiers'
[DEBUG] Grammar: Token 1: kind=EMPTY, value=''
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/test.log existe'
[DEBUG] Grammar: Token 3: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/test.log a les droits 0644'
[DEBUG] Grammar: Token 4: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/test.log contient OK'
[DEBUG] Grammar: Token 5: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD'
[DEBUG] Grammar: Token 6: kind=ACTION_RESULT, value='Vérifier que le dossier /tmp/testdir existe'
[DEBUG] Grammar: Token 7: kind=ACTION_RESULT, value='Vérifier que le dossier /tmp/testdir a les droits 0755'
[DEBUG] Grammar: Token 8: kind=ACTION_RESULT, value='Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt'
[DEBUG] Grammar: Token 9: kind=ACTION_RESULT, value='Vérifier que la date du fichier /tmp/test.log est 202501010000'
[DEBUG] Grammar: Token 10: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 11 tokens
[DEBUG] compile_atomic called with: expected='Le fichier /tmp/test.log existe', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Vérifier que le fichier /tmp/test.log existe'}
[DEBUG] canonize_validation result: {'phrase': '^le fichier ([^ ]+) existe$', 'handler': 'file_exists', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier {file} existe', 'handler': 'file_exists', 'scope': 'global', 'opposite': {'phrase': "Le fichier {file} n'existe pas"}, 'aliases': ['fichier {file} existe', '^fichier ([^ ]+) existe$', '^le fichier ([^ ]+) existe$']}, 'params': {'file': '/tmp/test.log'}}
[DEBUG] Trying to extract parameters from action command: 'Vérifier que le fichier /tmp/test.log existe'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_exists
[DEBUG] Core handler returned: ValidationCheck(expected='^le fichier ([^ ]+) existe$', actual_cmd="if [ -f '/tmp/test.log' ]; then echo '^le fichier ([^ ]+) existe$'; else echo 'le fichier /tmp/test.log n'\\''existe pas'; fi", handler='file_exists', scope='global', params={'file_path': '/tmp/test.log', 'opposite': "le fichier /tmp/test.log n'existe pas"})
[DEBUG] compile_atomic called with: expected='Le fichier /tmp/test.log a les droits 0644', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Vérifier que le fichier /tmp/test.log a les droits 0644'}
[DEBUG] canonize_validation result: {'phrase': '^le fichier ([^ ]+) a les droits ([0-7]+)$', 'handler': 'file_rights', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier {file} a les droits {mode}', 'handler': 'file_rights', 'scope': 'global', 'opposite': {'phrase': "Le fichier {file} n'a pas les droits {mode}"}, 'aliases': ['le fichier {file} a les droits {mode}', '^le fichier ([^ ]+) a les droits ([0-7]+)$']}, 'params': {'file': '/tmp/test.log', 'mode': '0644'}}
[DEBUG] Trying to extract parameters from action command: 'Vérifier que le fichier /tmp/test.log a les droits 0644'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_rights
[DEBUG] Core handler returned: ValidationCheck(expected='^le fichier ([^ ]+) a les droits ([0-7]+)$', actual_cmd="if [ $(stat -c '%a' '{file_path}') = '{mode}' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='file_rights', scope='global', params={'file_path': '/tmp/test.log', 'mode': '0644', 'opposite': "le fichier /tmp/test.log n'a pas les droits 0644"})
[DEBUG] compile_atomic called with: expected='Le fichier /tmp/test.log contient OK', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Vérifier que le fichier /tmp/test.log contient OK'}
[DEBUG] canonize_validation result: {'phrase': '^le fichier ([^ ]+) contient (.+)$', 'handler': 'file_contains', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier {file} contient {text}', 'handler': 'file_contains', 'scope': 'global', 'opposite': {'phrase': 'Le fichier {file} ne contient pas {text}'}, 'aliases': ['fichier {file} contient {text}', '^fichier ([^ ]+) contient (.+)$', '^le fichier ([^ ]+) contient (.+)$']}, 'params': {'file': '/tmp/test.log', 'text': 'ok'}}
[DEBUG] Trying to extract parameters from action command: 'Vérifier que le fichier /tmp/test.log contient OK'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_contains
[DEBUG] Core handler returned: ValidationCheck(expected='^le fichier ([^ ]+) contient (.+)$', actual_cmd='if grep -q "{text}" "{file}"; then echo \'{expected}\'; else echo \'{opposite}\'; fi', handler='file_contains', scope='global', params={'file': '/tmp/test.log', 'text': 'ok', 'opposite': 'NOT(^le fichier ([^ ]+) contient (.+)$)'})
[DEBUG] compile_atomic called with: expected='Le fichier /tmp/test.log contient exactement ALLGOOD', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD'}
[DEBUG] canonize_validation result: {'phrase': '^le fichier ([^ ]+) contient (.+)$', 'handler': 'file_contains', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier {file} contient {text}', 'handler': 'file_contains', 'scope': 'global', 'opposite': {'phrase': 'Le fichier {file} ne contient pas {text}'}, 'aliases': ['fichier {file} contient {text}', '^fichier ([^ ]+) contient (.+)$', '^le fichier ([^ ]+) contient (.+)$']}, 'params': {'file': '/tmp/test.log', 'text': 'exactement allgood'}}
[DEBUG] Trying to extract parameters from action command: 'Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_contains
[DEBUG] Core handler returned: ValidationCheck(expected='^le fichier ([^ ]+) contient (.+)$', actual_cmd='if grep -q "{text}" "{file}"; then echo \'{expected}\'; else echo \'{opposite}\'; fi', handler='file_contains', scope='global', params={'file': '/tmp/test.log', 'text': 'exactement allgood', 'opposite': 'NOT(^le fichier ([^ ]+) contient (.+)$)'})
[DEBUG] compile_atomic called with: expected='Le dossier /tmp/testdir existe', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Vérifier que le dossier /tmp/testdir existe'}
[DEBUG] canonize_validation result: {'phrase': '^le dossier ([^ ]+) existe$', 'handler': 'dir_exists', 'scope': 'global', 'pattern_entry': {'phrase': 'Le dossier {dir} existe', 'handler': 'dir_exists', 'scope': 'global', 'opposite': {'phrase': "Le dossier {dir} n'existe pas"}, 'aliases': ['le dossier {dir} existe', '^le dossier ([^ ]+) existe$']}, 'params': {'dir': '/tmp/testdir'}}
[DEBUG] Trying to extract parameters from action command: 'Vérifier que le dossier /tmp/testdir existe'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_exists
[DEBUG] Core handler returned: ValidationCheck(expected='^le dossier ([^ ]+) existe$', actual_cmd="if [ -d '/tmp/testdir' ]; then echo '^le dossier ([^ ]+) existe$'; else echo 'le dossier /tmp/testdir n'\\''existe pas'; fi", handler='dir_exists', scope='global', params={'dir_path': '/tmp/testdir', 'opposite': "le dossier /tmp/testdir n'existe pas"})
[DEBUG] compile_atomic called with: expected='Le dossier /tmp/testdir a les droits 0755', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Vérifier que le dossier /tmp/testdir a les droits 0755'}
[DEBUG] canonize_validation result: {'phrase': '^le dossier ([^ ]+) a les droits ([0-7]+)$', 'handler': 'dir_rights', 'scope': 'global', 'pattern_entry': {'phrase': 'Le dossier {dir} a les droits {mode}', 'handler': 'dir_rights', 'scope': 'global', 'opposite': {'phrase': "Le dossier {dir} n'a pas les droits {mode}"}, 'aliases': ['le dossier {dir} a les droits {mode}', '^le dossier ([^ ]+) a les droits ([0-7]+)$']}, 'params': {'dir': '/tmp/testdir', 'mode': '0755'}}
[DEBUG] Trying to extract parameters from action command: 'Vérifier que le dossier /tmp/testdir a les droits 0755'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_rights
[DEBUG] Core handler returned: ValidationCheck(expected='^le dossier ([^ ]+) a les droits ([0-7]+)$', actual_cmd="if [ $(stat -c '%a' '{dir_path}') = '{mode}' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='dir_rights', scope='global', params={'dir_path': '/tmp/testdir', 'mode': '0755', 'opposite': "le dossier /tmp/testdir n'a pas les droits 0755"})
[DEBUG] compile_atomic called with: expected='Le dossier /tmp/testdir contient 2 fichiers *.txt', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt'}
[DEBUG] canonize_validation result: {'phrase': '^le dossier ([^ ]+) contient ([0-9]+) fichiers (.+)$', 'handler': 'dir_contains_count', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier {dir} contient {count} fichiers {pattern}', 'handler': 'dir_contains_count', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier {dir} ne contient pas {count} fichiers {pattern}'}, 'aliases': ['le dossier {dir} contient {count} fichiers {pattern}', '^le dossier ([^ ]+) contient ([0-9]+) fichiers (.+)$']}, 'params': {'dir': '/tmp/testdir', 'count': '2', 'pattern': '*.txt'}}
[DEBUG] Trying to extract parameters from action command: 'Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_contains_count
[DEBUG] Core handler returned: ValidationCheck(expected='^le dossier ([^ ]+) contient ([0-9]+) fichiers (.+)$', actual_cmd='actual=$(find \'{dir_path}\' -type f -name \'{pattern}\' | wc -l); if [ "$actual" -eq {count} ]; then echo \'{expected}\'; else echo \'{opposite}\'; fi', handler='dir_contains_count', scope='last_action', params={'dir_path': '/tmp/testdir', 'count': '2', 'pattern': '*.txt', 'opposite': 'le dossier /tmp/testdir ne contient pas 2 fichiers correspondant au motif *.txt'})
[DEBUG] compile_atomic called with: expected='La date du fichier /tmp/test.log est 202501010000', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Vérifier que la date du fichier /tmp/test.log est 202501010000'}
[DEBUG] canonize_validation result: {'phrase': '^la date du fichier ([^ ]+) est (.+)$', 'handler': 'file_date', 'scope': 'global', 'pattern_entry': {'phrase': 'La date du fichier {file} est {date}', 'handler': 'file_date', 'scope': 'global', 'opposite': {'phrase': "La date du fichier {file} n'est pas {date}"}, 'aliases': ['la date du fichier {file} est {date}', '^la date du fichier ([^ ]+) est (.+)$']}, 'params': {'file': '/tmp/test.log', 'date': '202501010000'}}
[DEBUG] Trying to extract parameters from action command: 'Vérifier que la date du fichier /tmp/test.log est 202501010000'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_date
[DEBUG] Core handler returned: ValidationCheck(expected='file_date', actual_cmd='if [ -f \'/tmp/test.log\' ]; then file_date=$(date -r \'/tmp/test.log\' +%Y%m%d%H%M); if [ "$file_date" = \'202501010000\' ]; then echo \'OK\'; else echo \'NOK\'; fi; else echo \'NOK\'; fi', handler='file_date', scope='global', params={'file': '/tmp/test.log', 'date': '202501010000', 'scope': 'global', 'canonical_phrase': '^la date du fichier ([^ ]+) est (.+)$', 'varname': 'result', 'last_file_var': None})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_case_7.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_case_7.sh
