ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 8 lines
[DEBUG] Lexing text with 8 lines
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Sortie standard, result=('Sortie standard',), original=Étape: Sortie standard at line 1
[DEBUG] Yielding token: STEP@1:0 'Sortie standard' -> '('Sortie standard',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "OK" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "OK" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "OK", result=('echo "OK"',), original=Action: echo "OK" at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "OK"' -> '('echo "OK"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient OK at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient OK at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient OK at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=stdout contient OK, result=('stdout contient OK',), original=Résultat: stdout contient OK at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'stdout contient OK' -> '('stdout contient OK',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Sortie erreur, result=('Sortie erreur',), original=Étape: Sortie erreur at line 1
[DEBUG] Yielding token: STEP@1:0 'Sortie erreur' -> '('Sortie erreur',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "KO" 1>&2 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "KO" 1>&2 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "KO" 1>&2, result=('echo "KO" 1>&2',), original=Action: echo "KO" 1>&2 at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "KO" 1>&2' -> '('echo "KO" 1>&2',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stderr contient KO at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stderr contient KO at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stderr contient KO at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=stderr contient KO, result=('stderr contient KO',), original=Résultat: stderr contient KO at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'stderr contient KO' -> '('stderr contient KO',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 9 tokens
[DEBUG] Grammar: _merge_action_result called with 9 tokens
[DEBUG] Grammar: Token 0: kind=EMPTY, value=''
[DEBUG] Grammar: Token 1: kind=STEP, value='Sortie standard'
[DEBUG] Grammar: Token 2: kind=ACTION_ONLY, value='echo "OK"'
[DEBUG] Grammar: Token 3: kind=RESULT_ONLY, value='stdout contient OK'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: Token 5: kind=STEP, value='Sortie erreur'
[DEBUG] Grammar: Token 6: kind=ACTION_ONLY, value='echo "KO" 1>&2'
[DEBUG] Grammar: Token 7: kind=RESULT_ONLY, value='stderr contient KO'
[DEBUG] Grammar: Token 8: kind=EMPTY, value=''
[DEBUG] Grammar: Merging ACTION_ONLY 'echo "OK"' with RESULT_ONLY 'stdout contient OK'
[DEBUG] Grammar: Merging ACTION_ONLY 'echo "KO" 1>&2' with RESULT_ONLY 'stderr contient KO'
[DEBUG] Grammar: _merge_action_result returning 7 tokens
[DEBUG] compile_atomic called with: expected='stdout contient OK', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'echo "OK"'}
[DEBUG] canonize_validation result: {'phrase': '^stdout contient (.+)$', 'handler': 'stdout_contains', 'scope': 'last_action', 'pattern_entry': {'phrase': 'La sortie standard contient {text}', 'handler': 'stdout_contains', 'scope': 'last_action', 'opposite': {'phrase': 'La sortie standard ne contient pas {text}'}, 'aliases': ['stdout contient {text}', 'la sortie contient {text}', 'la sortie standard affiche {text}', '^stdout contient (.+)$', '^la sortie standard contient (.+)$']}, 'params': {'text': 'ok'}}
[DEBUG] Trying to extract parameters from action command: 'echo "OK"'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.stdout_contains
[DEBUG] Core handler returned: ValidationCheck(expected='stdout contient ok', actual_cmd='if echo "$stdout" | grep -q "ok"; then echo \'stdout contient ok\'; else echo \'stdout ne contient pas ok\'; fi', handler='stdout_contains', scope='global', params={})
[DEBUG] compile_atomic called with: expected='stderr contient KO', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'echo "KO" 1>&2'}
[DEBUG] canonize_validation result: {'phrase': '^stderr contient (.+)$', 'handler': 'stderr_contains', 'scope': 'last_action', 'pattern_entry': {'phrase': "La sortie d'erreur contient {text}", 'handler': 'stderr_contains', 'scope': 'last_action', 'opposite': {'phrase': "La sortie d'erreur ne contient pas {text}"}, 'aliases': ['stderr contient {text}', "la sortie d'erreur affiche {text}", '^stderr contient (.+)$', "^la sortie d'erreur contient (.+)$"]}, 'params': {'text': 'ko'}}
[DEBUG] Trying to extract parameters from action command: 'echo "KO" 1>&2'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.stderr_contains
[DEBUG] Core handler returned: ValidationCheck(expected='stderr contient ko', actual_cmd='if echo "$stderr" | grep -q "ko"; then echo \'stderr contient ko\'; else echo \'stderr ne contient pas ko\'; fi', handler='stderr_contains', scope='global', params={})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_stdout_stderr.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\test_stdout_stderr.sh
