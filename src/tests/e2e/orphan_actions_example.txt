ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 9 lines
[DEBUG] Lexing text with 9 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "This is an orphan action" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "This is an orphan action" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "This is an orphan action", result=('echo "This is an orphan action"',), original=Action: echo "This is an orphan action" at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "This is an orphan action"' -> '('echo "This is an orphan action"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient orphan at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient orphan at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient orphan at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=stdout contient orphan, result=('stdout contient orphan',), original=Résultat: stdout contient orphan at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'stdout contient orphan' -> '('stdout contient orphan',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "Another orphan" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "Another orphan" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "Another orphan", result=('echo "Another orphan"',), original=Action: echo "Another orphan" at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "Another orphan"' -> '('echo "Another orphan"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient another at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient another at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient another at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=stdout contient another, result=('stdout contient another',), original=Résultat: stdout contient another at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'stdout contient another' -> '('stdout contient another',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Main Step, result=('Main Step',), original=Étape: Main Step at line 1
[DEBUG] Yielding token: STEP@1:0 'Main Step' -> '('Main Step',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "This is a normal action" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "This is a normal action" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "This is a normal action", result=('echo "This is a normal action"',), original=Action: echo "This is a normal action" at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "This is a normal action"' -> '('echo "This is a normal action"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient normal at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient normal at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: stdout contient normal at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=stdout contient normal, result=('stdout contient normal',), original=Résultat: stdout contient normal  at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'stdout contient normal' -> '('stdout contient normal',)'
[DEBUG] Got 9 tokens
[DEBUG] Grammar: _merge_action_result called with 9 tokens
[DEBUG] Grammar: Token 0: kind=ACTION_ONLY, value='echo "This is an orphan action"'
[DEBUG] Grammar: Token 1: kind=RESULT_ONLY, value='stdout contient orphan'
[DEBUG] Grammar: Token 2: kind=EMPTY, value=''
[DEBUG] Grammar: Token 3: kind=ACTION_ONLY, value='echo "Another orphan"'
[DEBUG] Grammar: Token 4: kind=RESULT_ONLY, value='stdout contient another'
[DEBUG] Grammar: Token 5: kind=EMPTY, value=''
[DEBUG] Grammar: Token 6: kind=STEP, value='Main Step'
[DEBUG] Grammar: Token 7: kind=ACTION_ONLY, value='echo "This is a normal action"'
[DEBUG] Grammar: Token 8: kind=RESULT_ONLY, value='stdout contient normal'
[DEBUG] Grammar: Merging ACTION_ONLY 'echo "This is an orphan action"' with RESULT_ONLY 'stdout contient orphan'
[DEBUG] Grammar: Merging ACTION_ONLY 'echo "Another orphan"' with RESULT_ONLY 'stdout contient another'
[DEBUG] Grammar: Merging ACTION_ONLY 'echo "This is a normal action"' with RESULT_ONLY 'stdout contient normal'
[DEBUG] Grammar: _merge_action_result returning 6 tokens
[DEBUG] compile_atomic called with: expected='stdout contient normal', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'echo "This is a normal action"'}
[DEBUG] canonize_validation result: {'phrase': '^stdout contient (.+)$', 'handler': 'stdout_contains', 'scope': 'last_action', 'pattern_entry': {'phrase': 'La sortie standard contient {text}', 'handler': 'stdout_contains', 'scope': 'last_action', 'opposite': {'phrase': 'La sortie standard ne contient pas {text}'}, 'aliases': ['stdout contient {text}', 'la sortie contient {text}', 'la sortie standard affiche {text}', '^stdout contient (.+)$', '^la sortie standard contient (.+)$']}, 'params': {'text': 'normal'}}
[DEBUG] Trying to extract parameters from action command: 'echo "This is a normal action"'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.stdout_contains
[DEBUG] Core handler returned: ValidationCheck(expected='stdout contient normal', actual_cmd='if echo "$stdout" | grep -q "normal"; then echo \'stdout contient normal\'; else echo \'stdout ne contient pas normal\'; fi', handler='stdout_contains', scope='global', params={})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\orphan_actions_example.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\orphan_actions_example.sh
