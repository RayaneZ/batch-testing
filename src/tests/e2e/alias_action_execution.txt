ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 3 lines
[DEBUG] Lexing text with 3 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: exécuter traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=exécuter traitement.sh, result=('exécuter traitement.sh', 'retour 0.', None), original=Action: exécuter traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'exécuter traitement.sh' -> '('exécuter traitement.sh', 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: lancer traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=lancer traitement.sh, result=('lancer traitement.sh', 'retour 0.', None), original=Action: lancer traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'lancer traitement.sh' -> '('lancer traitement.sh', 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: traiter traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=traiter traitement.sh, result=('traiter traitement.sh', 'retour 0.', None), original=Action: traiter traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'traiter traitement.sh' -> '('traiter traitement.sh', 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 4 tokens
[DEBUG] Grammar: _merge_action_result called with 4 tokens
[DEBUG] Grammar: Token 0: kind=ACTION_RESULT, value='exécuter traitement.sh'
[DEBUG] Grammar: Token 1: kind=ACTION_RESULT, value='lancer traitement.sh'
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='traiter traitement.sh'
[DEBUG] Grammar: Token 3: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 4 tokens
[DEBUG] compile_atomic called with: expected='retour 0', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'exécuter traitement.sh'}
[DEBUG] canonize_validation result: {'phrase': '^retour ([0-9]+)$', 'handler': 'return_code', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Retour {code}', 'handler': 'return_code', 'scope': 'last_action', 'opposite': {'phrase': 'Code retour inattendu'}, 'aliases': ['retour {code}', 'code retour {code}', 'le script retourne un code {code}', 'Le script retourne un code {code}', 'le script a réussi', "le script s'est exécuté sans erreur", "Le script s'execute avec succès", '^retour ([0-9]+)$', '^code retour ([0-9]+)$', '^le script retourne un code ([0-9]+)$', '^Le script retourne un code ([0-9]+)$', '^le script a réussi$', "^le script s'est exécuté sans erreur$", "^Le script s'execute avec succès$"]}, 'params': {'code': '0'}}
[DEBUG] Trying to extract parameters from action command: 'exécuter traitement.sh'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.return_code
[DEBUG] Core handler returned: ValidationCheck(expected='^retour ([0-9]+)$', actual_cmd="if [ ${?} -eq {code} ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='return_code', scope='last_action', params={'code': '0', 'opposite': "le code de retour n'est pas 0"})
[DEBUG] compile_atomic called with: expected='retour 0', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'lancer traitement.sh'}
[DEBUG] canonize_validation result: {'phrase': '^retour ([0-9]+)$', 'handler': 'return_code', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Retour {code}', 'handler': 'return_code', 'scope': 'last_action', 'opposite': {'phrase': 'Code retour inattendu'}, 'aliases': ['retour {code}', 'code retour {code}', 'le script retourne un code {code}', 'Le script retourne un code {code}', 'le script a réussi', "le script s'est exécuté sans erreur", "Le script s'execute avec succès", '^retour ([0-9]+)$', '^code retour ([0-9]+)$', '^le script retourne un code ([0-9]+)$', '^Le script retourne un code ([0-9]+)$', '^le script a réussi$', "^le script s'est exécuté sans erreur$", "^Le script s'execute avec succès$"]}, 'params': {'code': '0'}}
[DEBUG] Trying to extract parameters from action command: 'lancer traitement.sh'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.return_code
[DEBUG] Core handler returned: ValidationCheck(expected='^retour ([0-9]+)$', actual_cmd="if [ ${?} -eq {code} ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='return_code', scope='last_action', params={'code': '0', 'opposite': "le code de retour n'est pas 0"})
[DEBUG] compile_atomic called with: expected='retour 0', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'traiter traitement.sh'}
[DEBUG] canonize_validation result: {'phrase': '^retour ([0-9]+)$', 'handler': 'return_code', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Retour {code}', 'handler': 'return_code', 'scope': 'last_action', 'opposite': {'phrase': 'Code retour inattendu'}, 'aliases': ['retour {code}', 'code retour {code}', 'le script retourne un code {code}', 'Le script retourne un code {code}', 'le script a réussi', "le script s'est exécuté sans erreur", "Le script s'execute avec succès", '^retour ([0-9]+)$', '^code retour ([0-9]+)$', '^le script retourne un code ([0-9]+)$', '^Le script retourne un code ([0-9]+)$', '^le script a réussi$', "^le script s'est exécuté sans erreur$", "^Le script s'execute avec succès$"]}, 'params': {'code': '0'}}
[DEBUG] Trying to extract parameters from action command: 'traiter traitement.sh'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.return_code
[DEBUG] Core handler returned: ValidationCheck(expected='^retour ([0-9]+)$', actual_cmd="if [ ${?} -eq {code} ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='return_code', scope='last_action', params={'code': '0', 'opposite': "le code de retour n'est pas 0"})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_action_execution.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_action_execution.sh
