ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 12 lines
[DEBUG] Lexing text with 12 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Test with invalid plugin usage at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Test with invalid plugin usage at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Test with invalid plugin usage at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Test with invalid plugin usage at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.COMMENT, value=# Test with invalid plugin usage, result=None, original=# Test with invalid plugin usage at line 1
[DEBUG] Yielding token: COMMENT@1:0 '# Test with invalid plugin usage'
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Test nonexistent plugin, result=('Test nonexistent plugin',), original=Étape: Test nonexistent plugin at line 1
[DEBUG] Yielding token: STEP@1:0 'Test nonexistent plugin' -> '('Test nonexistent plugin',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Use nonexistent plugin: with some parameters at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Use nonexistent plugin: with some parameters at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=Use nonexistent plugin: with some parameters, result=('Use nonexistent plugin: with some parameters',), original=  Action: Use nonexistent plugin: with some parameters at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'Use nonexistent plugin: with some parameters' -> '('Use nonexistent plugin: with some parameters',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] Yielding token: TEXT@1:0 'Vérifier: Le code de retour est 0'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Test plugin with wrong parameters, result=('Test plugin with wrong parameters',), original=Étape: Test plugin with wrong parameters at line 1
[DEBUG] Yielding token: STEP@1:0 'Test plugin with wrong parameters' -> '('Test plugin with wrong parameters',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter la requête SQL: # Missing query at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter la requête SQL: # Missing query at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=Exécuter la requête SQL: # Missing query, result=('Exécuter la requête SQL: # Missing query',), original=  Action: Exécuter la requête SQL: # Missing query at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'Exécuter la requête SQL: # Missing query' -> '('Exécuter la requête SQL: # Missing query',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le code de retour est 0 at line 1
[DEBUG] Yielding token: TEXT@1:0 'Vérifier: Le code de retour est 0'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Test plugin with malformed parameters, result=('Test plugin with malformed parameters',), original=Étape: Test plugin with malformed parameters at line 1
[DEBUG] Yielding token: STEP@1:0 'Test plugin with malformed parameters' -> '('Test plugin with malformed parameters',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le fichier: # Missing filename at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le fichier: # Missing filename at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=Créer le fichier: # Missing filename, result=('Créer le fichier: # Missing filename',), original=  Action: Créer le fichier: # Missing filename at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'Créer le fichier: # Missing filename' -> '('Créer le fichier: # Missing filename',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le fichier existe at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le fichier existe at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le fichier existe at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le fichier existe at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le fichier existe at line 1
[DEBUG] Yielding token: TEXT@1:0 'Vérifier: Le fichier existe'
[DEBUG] Got 12 tokens
[DEBUG] Grammar: _merge_action_result called with 12 tokens
[DEBUG] Grammar: Token 0: kind=COMMENT, value='# Test with invalid plugin usage'
[DEBUG] Grammar: Token 1: kind=STEP, value='Test nonexistent plugin'
[DEBUG] Grammar: Token 2: kind=ACTION_ONLY, value='Use nonexistent plugin: with some parameters'
[DEBUG] Grammar: Token 3: kind=TEXT, value='Vérifier: Le code de retour est 0'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: Token 5: kind=STEP, value='Test plugin with wrong parameters'
[DEBUG] Grammar: Token 6: kind=ACTION_ONLY, value='Exécuter la requête SQL: # Missing query'
[DEBUG] Grammar: Token 7: kind=TEXT, value='Vérifier: Le code de retour est 0'
[DEBUG] Grammar: Token 8: kind=EMPTY, value=''
[DEBUG] Grammar: Token 9: kind=STEP, value='Test plugin with malformed parameters'
[DEBUG] Grammar: Token 10: kind=ACTION_ONLY, value='Créer le fichier: # Missing filename'
[DEBUG] Grammar: Token 11: kind=TEXT, value='Vérifier: Le fichier existe'
[DEBUG] Grammar: _merge_action_result returning 12 tokens
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\e2e\ko\invalid_plugin_usage.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\e2e\ko\invalid_plugin_usage.sh
