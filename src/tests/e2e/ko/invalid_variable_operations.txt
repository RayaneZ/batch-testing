ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 12 lines
[DEBUG] Lexing text with 12 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Test with invalid variable operations at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Test with invalid variable operations at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Test with invalid variable operations at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Test with invalid variable operations at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.COMMENT, value=# Test with invalid variable operations, result=None, original=# Test with invalid variable operations at line 1
[DEBUG] Yielding token: COMMENT@1:0 '# Test with invalid variable operations'
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Test invalid variable name, result=('Test invalid variable name',), original=Étape: Test invalid variable name at line 1
[DEBUG] Yielding token: STEP@1:0 'Test invalid variable name' -> '('Test invalid variable name',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable: 123invalid_name = "value" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable: 123invalid_name = "value" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=Définir la variable: 123invalid_name = "value", result=('Définir la variable: 123invalid_name = "value"',), original=  Action: Définir la variable: 123invalid_name = "value" at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'Définir la variable: 123invalid_name = "value"' -> '('Définir la variable: 123invalid_name = "value"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] Yielding token: TEXT@1:0 'Vérifier: La variable est définie'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Test invalid variable assignment, result=('Test invalid variable assignment',), original=Étape: Test invalid variable assignment at line 1
[DEBUG] Yielding token: STEP@1:0 'Test invalid variable assignment' -> '('Test invalid variable assignment',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable: test_var = # Missing value at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable: test_var = # Missing value at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=Définir la variable: test_var = # Missing value, result=('Définir la variable: test_var = # Missing value',), original=  Action: Définir la variable: test_var = # Missing value at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'Définir la variable: test_var = # Missing value' -> '('Définir la variable: test_var = # Missing value',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: La variable est définie at line 1
[DEBUG] Yielding token: TEXT@1:0 'Vérifier: La variable est définie'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Test invalid variable reference, result=('Test invalid variable reference',), original=Étape: Test invalid variable reference at line 1
[DEBUG] Yielding token: STEP@1:0 'Test invalid variable reference' -> '('Test invalid variable reference',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "Testing variable: ${undefined_variable}" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: echo "Testing variable: ${undefined_variable}" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=echo "Testing variable: ${undefined_variable}", result=('echo "Testing variable: ${undefined_variable}"',), original=  Action: echo "Testing variable: ${undefined_variable}" at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'echo "Testing variable: ${undefined_variable}"' -> '('echo "Testing variable: ${undefined_variable}"',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le contenu affiché contient "Testing variable: value" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le contenu affiché contient "Testing variable: value" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le contenu affiché contient "Testing variable: value" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le contenu affiché contient "Testing variable: value" at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Vérifier: Le contenu affiché contient "Testing variable: value" at line 1
[DEBUG] Yielding token: TEXT@1:0 'Vérifier: Le contenu affiché contient "Testing variable: value"'
[DEBUG] Got 12 tokens
[DEBUG] Grammar: _merge_action_result called with 12 tokens
[DEBUG] Grammar: Token 0: kind=COMMENT, value='# Test with invalid variable operations'
[DEBUG] Grammar: Token 1: kind=STEP, value='Test invalid variable name'
[DEBUG] Grammar: Token 2: kind=ACTION_ONLY, value='Définir la variable: 123invalid_name = "value"'
[DEBUG] Grammar: Token 3: kind=TEXT, value='Vérifier: La variable est définie'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: Token 5: kind=STEP, value='Test invalid variable assignment'
[DEBUG] Grammar: Token 6: kind=ACTION_ONLY, value='Définir la variable: test_var = # Missing value'
[DEBUG] Grammar: Token 7: kind=TEXT, value='Vérifier: La variable est définie'
[DEBUG] Grammar: Token 8: kind=EMPTY, value=''
[DEBUG] Grammar: Token 9: kind=STEP, value='Test invalid variable reference'
[DEBUG] Grammar: Token 10: kind=ACTION_ONLY, value='echo "Testing variable: ${undefined_variable}"'
[DEBUG] Grammar: Token 11: kind=TEXT, value='Vérifier: Le contenu affiché contient "Testing variable: value"'
[DEBUG] Grammar: _merge_action_result returning 12 tokens
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\e2e\ko\invalid_variable_operations.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\e2e\ko\invalid_variable_operations.sh
