ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 3 lines
[DEBUG] Lexing text with 3 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: créer le contexte ; Résultat: base prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=créer le contexte, result=('créer le contexte', 'base prête.', None), original=Action: créer le contexte ; Résultat: base prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'créer le contexte' -> '('créer le contexte', 'base prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: configurer le contexte ; Résultat: base prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=configurer le contexte, result=('configurer le contexte', 'base prête.', None), original=Action: configurer le contexte ; Résultat: base prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'configurer le contexte' -> '('configurer le contexte', 'base prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: initialiser le contexte ; Résultat: base prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=initialiser le contexte, result=('initialiser le contexte', 'base prête.', None), original=Action: initialiser le contexte ; Résultat: base prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'initialiser le contexte' -> '('initialiser le contexte', 'base prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 4 tokens
[DEBUG] Grammar: _merge_action_result called with 4 tokens
[DEBUG] Grammar: Token 0: kind=ACTION_RESULT, value='créer le contexte'
[DEBUG] Grammar: Token 1: kind=ACTION_RESULT, value='configurer le contexte'
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='initialiser le contexte'
[DEBUG] Grammar: Token 3: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 4 tokens
[DEBUG] compile_atomic called with: expected='base prête', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'créer le contexte'}
[DEBUG] canonize_validation result: {'phrase': 'Base prête', 'handler': 'base_ready', 'scope': 'global', 'pattern_entry': {'phrase': 'Base prête', 'handler': 'base_ready', 'scope': 'global', 'opposite': {'phrase': 'Base non prête'}, 'aliases': ['base prête', 'base prete', 'La base de test est prête', 'La base est prête pour le test', '^base prête$', '^base prete$', '^la base de test est prête$', '^la base est prête pour le test$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'créer le contexte'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.base_ready
[DEBUG] Core handler returned: ValidationCheck(expected='Base prête', actual_cmd="if [ -f 'db_ready.flag' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='base_ready', scope='global', params={'opposite': "la base n'est pas prête"})
[DEBUG] compile_atomic called with: expected='base prête', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'configurer le contexte'}
[DEBUG] canonize_validation result: {'phrase': 'Base prête', 'handler': 'base_ready', 'scope': 'global', 'pattern_entry': {'phrase': 'Base prête', 'handler': 'base_ready', 'scope': 'global', 'opposite': {'phrase': 'Base non prête'}, 'aliases': ['base prête', 'base prete', 'La base de test est prête', 'La base est prête pour le test', '^base prête$', '^base prete$', '^la base de test est prête$', '^la base est prête pour le test$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'configurer le contexte'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.base_ready
[DEBUG] Core handler returned: ValidationCheck(expected='Base prête', actual_cmd="if [ -f 'db_ready.flag' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='base_ready', scope='global', params={'opposite': "la base n'est pas prête"})
[DEBUG] compile_atomic called with: expected='base prête', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'initialiser le contexte'}
[DEBUG] canonize_validation result: {'phrase': 'Base prête', 'handler': 'base_ready', 'scope': 'global', 'pattern_entry': {'phrase': 'Base prête', 'handler': 'base_ready', 'scope': 'global', 'opposite': {'phrase': 'Base non prête'}, 'aliases': ['base prête', 'base prete', 'La base de test est prête', 'La base est prête pour le test', '^base prête$', '^base prete$', '^la base de test est prête$', '^la base est prête pour le test$']}, 'params': {}}
[DEBUG] Trying to extract parameters from action command: 'initialiser le contexte'
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.base_ready
[DEBUG] Core handler returned: ValidationCheck(expected='Base prête', actual_cmd="if [ -f 'db_ready.flag' ]; then echo '{expected}'; else echo '{opposite}'; fi", handler='base_ready', scope='global', params={'opposite': "la base n'est pas prête"})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_action_initialisation.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\to_implement\alias_action_initialisation.sh
