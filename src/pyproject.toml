[project]
name = "shtest_compiler"
version = "0.1.0"
description = "Compilation d'expressions de test en shell"
authors = [{ name = "Auteur", email = "auteur@example.com" }]
dependencies = [
    "pyyaml",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
requires-python = ">=3.8"

[project.scripts]
compile_expr = "shtest_compiler.compile_expr:main"
compile_file = "shtest_compiler.compile_file:main"
shtest = "shtest_compiler.shtest:main"
verify_syntax = "shtest_compiler.verify_syntax:main"
verify_handlers = "shtest_compiler.verify_handlers:main"
export_to_excel = "shtest_compiler.export_to_excel:export_patterns_to_excel"
run_tests = "shtest_compiler.run_tests:main"
test_suite = "testing.test_suite:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]

[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["shtest_compiler*", "testing*"]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["testing/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=shtest_compiler",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "shellcheck: Tests requiring shellcheck"
]

# Coverage configuration
[tool.coverage.run]
source = ["shtest_compiler"]
omit = [
    "*/testing/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pytest.*",
    "pytest_cov.*",
    "pytest_mock.*",
    "pytest_asyncio.*"
]
ignore_missing_imports = true
