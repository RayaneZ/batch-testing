ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 5 lines
[DEBUG] Lexing text with 5 lines
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Initialisation de la base, result=('Initialisation de la base',), original=Étape: Initialisation de la base at line 1
[DEBUG] Yielding token: STEP@1:0 'Initialisation de la base' -> '('Initialisation de la base',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: exécuter le script SQL JDD_Commun.sql ; Résultat: La base est prête pour le test at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=exécuter le script SQL JDD_Commun.sql, result=('exécuter le script SQL JDD_Commun.sql', 'La base est prête pour le test', None), original=Action: exécuter le script SQL JDD_Commun.sql ; Résultat: La base est prête pour le test at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'exécuter le script SQL JDD_Commun.sql' -> '('exécuter le script SQL JDD_Commun.sql', 'La base est prête pour le test', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: exécuter le script SQL JDD_Extra.sql ; Résultat: La base est prête pour le test at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=exécuter le script SQL JDD_Extra.sql, result=('exécuter le script SQL JDD_Extra.sql', 'La base est prête pour le test', None), original=Action: exécuter le script SQL JDD_Extra.sql ; Résultat: La base est prête pour le test at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'exécuter le script SQL JDD_Extra.sql' -> '('exécuter le script SQL JDD_Extra.sql', 'La base est prête pour le test', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: afficher le contenu du fichier /tmp/JDD_Extra.sql ; Résultat: Le script est affiché at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=afficher le contenu du fichier /tmp/JDD_Extra.sql, result=('afficher le contenu du fichier /tmp/JDD_Extra.sql', 'Le script est affiché', None), original=Action: afficher le contenu du fichier /tmp/JDD_Extra.sql ; Résultat: Le script est affiché at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'afficher le contenu du fichier /tmp/JDD_Extra.sql' -> '('afficher le contenu du fichier /tmp/JDD_Extra.sql', 'Le script est affiché', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 6 tokens
[DEBUG] Grammar: _merge_action_result called with 6 tokens
[DEBUG] Grammar: Token 0: kind=STEP, value='Initialisation de la base'
[DEBUG] Grammar: Token 1: kind=EMPTY, value=''
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='exécuter le script SQL JDD_Commun.sql'
[DEBUG] Grammar: Token 3: kind=ACTION_RESULT, value='exécuter le script SQL JDD_Extra.sql'
[DEBUG] Grammar: Token 4: kind=ACTION_RESULT, value='afficher le contenu du fichier /tmp/JDD_Extra.sql'
[DEBUG] Grammar: Token 5: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 6 tokens
[DEBUG] get_action_shell_command called with: 'exécuter le script SQL JDD_Commun.sql'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'exécuter le script SQL JDD_Commun.sql' (normalized: 'exécuter le script sql jdd_commun.sql')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'afficher le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^afficher\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cat le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^cat\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cat (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cat (.+)$'
[DEBUG] canonize_action: Checking alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Checking alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script {script}' with handler 'run_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Exécuter le script {script}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'run_script' for phrase 'Exécuter le script {script}'
[DEBUG] get_action_shell_command: context={'action': 'exécuter le script SQL JDD_Commun.sql', 'handler': 'run_script', 'category': 'execution', 'variables': {'script': 'SQL JDD_Commun.sql'}, 'requirements': {'required_variables': ['script'], 'optional_variables': [], 'scope': 'global', 'description': 'Execute a shell script', 'category': 'execution', 'validation_rules': {'script': {'type': 'script', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Exécuter le script {script}', 'config': {'type': 'action', 'phrase': 'Exécuter le script {script}', 'aliases': ['exécuter {script}', 'lancer {script}', 'traiter {script}', 'exécuter traitement.sh', 'lancer traitement.sh', 'traiter traitement.sh', '^sh (.+)$', 'lancer le script {script}', 'faire tourner le script {script}', 'démarrer le script {script}'], 'handler': 'run_script'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=run_script, variables={'script': 'SQL JDD_Commun.sql'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.run_script
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'exécuter le script SQL JDD_Commun.sql', 'handler': 'run_script', 'category': 'execution', 'variables': {'script': 'SQL JDD_Commun.sql'}, 'requirements': {'required_variables': ['script'], 'optional_variables': [], 'scope': 'global', 'description': 'Execute a shell script', 'category': 'execution', 'validation_rules': {'script': {'type': 'script', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Exécuter le script {script}', 'config': {'type': 'action', 'phrase': 'Exécuter le script {script}', 'aliases': ['exécuter {script}', 'lancer {script}', 'traiter {script}', 'exécuter traitement.sh', 'lancer traitement.sh', 'traiter traitement.sh', '^sh (.+)$', 'lancer le script {script}', 'faire tourner le script {script}', 'démarrer le script {script}'], 'handler': 'run_script'}}], 'scope': 'global'}, 'script': 'SQL JDD_Commun.sql'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.run_script.RunScriptAction object at 0x000001A460406890>
[DEBUG] get_action_shell_command: Generated shell command: sh 'SQL JDD_Commun.sql'
[DEBUG] compile_validation_expression called with: 'La base est prête pour le test'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='La base est prête pour le test', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'exécuter le script SQL JDD_Commun.sql'}
[DEBUG] compile_atomic: Trying to canonize validation: 'La base est prête pour le test'
[DEBUG] compile_atomic: canonize_validation('La base est prête pour le test') result: {'phrase': 'La base est prête pour le test', 'handler': 'base_ready', 'scope': 'global', 'pattern_entry': {'phrase': 'Base prête', 'handler': 'base_ready', 'scope': 'global', 'opposite': {'phrase': 'Base non prête'}, 'aliases': ['base prête', 'base prete', 'La base de test est prête', 'La base est prête pour le test', '^base prête$', '^base prete$', '^la base de test est prête$', '^la base est prête pour le test$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'La base est prête pour le test', 'handler': 'base_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'global', 'description': 'Check if test base is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'global'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.base_ready
[DEBUG] Core handler returned: ValidationCheck(expected='la base est prête', actual_cmd="test -f 'db_ready.flag'", handler='base_ready', scope='global', params={'opposite': "la base n'est pas prête"})
[DEBUG] get_action_shell_command called with: 'exécuter le script SQL JDD_Extra.sql'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'exécuter le script SQL JDD_Extra.sql' (normalized: 'exécuter le script sql jdd_extra.sql')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'afficher le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^afficher\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cat le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^cat\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cat (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cat (.+)$'
[DEBUG] canonize_action: Checking alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Checking alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script {script}' with handler 'run_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Exécuter le script {script}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'run_script' for phrase 'Exécuter le script {script}'
[DEBUG] get_action_shell_command: context={'action': 'exécuter le script SQL JDD_Extra.sql', 'handler': 'run_script', 'category': 'execution', 'variables': {'script': 'SQL JDD_Extra.sql'}, 'requirements': {'required_variables': ['script'], 'optional_variables': [], 'scope': 'global', 'description': 'Execute a shell script', 'category': 'execution', 'validation_rules': {'script': {'type': 'script', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Exécuter le script {script}', 'config': {'type': 'action', 'phrase': 'Exécuter le script {script}', 'aliases': ['exécuter {script}', 'lancer {script}', 'traiter {script}', 'exécuter traitement.sh', 'lancer traitement.sh', 'traiter traitement.sh', '^sh (.+)$', 'lancer le script {script}', 'faire tourner le script {script}', 'démarrer le script {script}'], 'handler': 'run_script'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=run_script, variables={'script': 'SQL JDD_Extra.sql'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.run_script
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'exécuter le script SQL JDD_Extra.sql', 'handler': 'run_script', 'category': 'execution', 'variables': {'script': 'SQL JDD_Extra.sql'}, 'requirements': {'required_variables': ['script'], 'optional_variables': [], 'scope': 'global', 'description': 'Execute a shell script', 'category': 'execution', 'validation_rules': {'script': {'type': 'script', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Exécuter le script {script}', 'config': {'type': 'action', 'phrase': 'Exécuter le script {script}', 'aliases': ['exécuter {script}', 'lancer {script}', 'traiter {script}', 'exécuter traitement.sh', 'lancer traitement.sh', 'traiter traitement.sh', '^sh (.+)$', 'lancer le script {script}', 'faire tourner le script {script}', 'démarrer le script {script}'], 'handler': 'run_script'}}], 'scope': 'global'}, 'script': 'SQL JDD_Extra.sql'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.run_script.RunScriptAction object at 0x000001A460430D10>
[DEBUG] get_action_shell_command: Generated shell command: sh 'SQL JDD_Extra.sql'
[DEBUG] compile_validation_expression called with: 'La base est prête pour le test'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='La base est prête pour le test', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'exécuter le script SQL JDD_Extra.sql'}
[DEBUG] compile_atomic: Trying to canonize validation: 'La base est prête pour le test'
[DEBUG] compile_atomic: canonize_validation('La base est prête pour le test') result: {'phrase': 'La base est prête pour le test', 'handler': 'base_ready', 'scope': 'global', 'pattern_entry': {'phrase': 'Base prête', 'handler': 'base_ready', 'scope': 'global', 'opposite': {'phrase': 'Base non prête'}, 'aliases': ['base prête', 'base prete', 'La base de test est prête', 'La base est prête pour le test', '^base prête$', '^base prete$', '^la base de test est prête$', '^la base est prête pour le test$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'La base est prête pour le test', 'handler': 'base_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'global', 'description': 'Check if test base is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'global'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.base_ready
[DEBUG] Core handler returned: ValidationCheck(expected='la base est prête', actual_cmd="test -f 'db_ready.flag'", handler='base_ready', scope='global', params={'opposite': "la base n'est pas prête"})
[DEBUG] get_action_shell_command called with: 'afficher le contenu du fichier /tmp/JDD_Extra.sql'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'afficher le contenu du fichier /tmp/JDD_Extra.sql' (normalized: 'afficher le contenu du fichier /tmp/jdd_extra.sql')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'afficher le contenu du fichier /tmp/JDD_Extra.sql', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '/tmp/JDD_Extra.sql'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '/tmp/JDD_Extra.sql'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'afficher le contenu du fichier /tmp/JDD_Extra.sql', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '/tmp/JDD_Extra.sql'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '/tmp/JDD_Extra.sql'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001A460472110>
[DEBUG] get_action_shell_command: Generated shell command: cat '/tmp/JDD_Extra.sql'
[DEBUG] compile_validation_expression called with: 'Le script est affiché'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le script est affiché', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'afficher le contenu du fichier /tmp/JDD_Extra.sql'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le script est affiché'
[DEBUG] compile_atomic: canonize_validation('Le script est affiché') result: {'phrase': 'Le script est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le script est affiché', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\testing\tests\to_implement\test_case_3.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\testing\tests\to_implement\test_case_3.sh
