ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 4 lines
[DEBUG] Lexing text with 4 lines
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=variable vaut, result=('variable vaut',), original=Étape: variable vaut at line 1
[DEBUG] Yielding token: STEP@1:0 'variable vaut' -> '('variable vaut',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: export MON_VAR=42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: export MON_VAR=42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_ONLY, value=export MON_VAR=42, result=('export MON_VAR=42',), original=Action: export MON_VAR=42 at line 1
[DEBUG] Yielding token: ACTION_ONLY@1:0 'export MON_VAR=42' -> '('export MON_VAR=42',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable MON_VAR vaut 42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable MON_VAR vaut 42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Résultat: variable MON_VAR vaut 42 at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.RESULT_ONLY, value=variable MON_VAR vaut 42, result=('variable MON_VAR vaut 42',), original=Résultat: variable MON_VAR vaut 42 at line 1
[DEBUG] Yielding token: RESULT_ONLY@1:0 'variable MON_VAR vaut 42' -> '('variable MON_VAR vaut 42',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 5 tokens
[DEBUG] Grammar: _merge_action_result called with 5 tokens
[DEBUG] Grammar: Token 0: kind=EMPTY, value=''
[DEBUG] Grammar: Token 1: kind=STEP, value='variable vaut'
[DEBUG] Grammar: Token 2: kind=ACTION_ONLY, value='export MON_VAR=42'
[DEBUG] Grammar: Token 3: kind=RESULT_ONLY, value='variable MON_VAR vaut 42'
[DEBUG] Grammar: Token 4: kind=EMPTY, value=''
[DEBUG] Grammar: Merging ACTION_ONLY 'export MON_VAR=42' with RESULT_ONLY 'variable MON_VAR vaut 42'
[DEBUG] Grammar: _merge_action_result returning 4 tokens
[DEBUG] get_action_shell_command called with: 'export MON_VAR=42'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'export MON_VAR=42' (normalized: 'export mon_var=42')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'afficher le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^afficher\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cat le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^cat\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cat (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cat (.+)$'
[DEBUG] canonize_action: Checking alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Checking alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script {script}' with handler 'run_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ (.+)$'
[DEBUG] canonize_action: Checking alias 'traiter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^traiter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter traitement.sh'
[DEBUG] canonize_action: Checking alias 'lancer traitement.sh'
[DEBUG] canonize_action: Checking alias 'traiter traitement.sh'
[DEBUG] canonize_action: Checking alias '^sh (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sh (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire tourner le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ tourner\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'démarrer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^démarrer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script SQL {script}' with handler 'run_sql_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script SQL {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter la requête SQL {query}' with handler 'sql_query'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exporter les résultats de la requête {query} vers {output}' with handler 'sql_export'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer les résultats de la requête {query1} avec {query2}' with handler 'sql_compare'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer le fichier {file1} avec {file2}' with handler 'compare_files'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} avec {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} et {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ et\ (.+)$'
[DEBUG] canonize_action: Checking alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Définir la variable {var} = {value}' with handler 'export_var'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Définir\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'définir la variable SQL_CONN = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^définir\ la\ variable\ SQL_CONN\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'définir la variable d'environnement {var} = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^définir\ la\ variable\ d'environnement\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter la variable {var} = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^export (.+)=(.+)$'
[DEBUG] canonize_action: Testing regex alias '^export (.+)=(.+)$'
[DEBUG] canonize_action: Found match with regex alias '^export (.+)=(.+)$'
[DEBUG] get_action_shell_command: canonize_action matched handler 'export_var' for phrase 'Définir la variable {var} = {value}'
[DEBUG] get_action_shell_command: context={'action': 'export MON_VAR=42', 'handler': 'export_var', 'category': 'variables', 'variables': {}, 'requirements': {'required_variables': ['var', 'value'], 'optional_variables': [], 'scope': 'global', 'description': 'Export a variable', 'category': 'variables', 'validation_rules': {'var': {'type': 'var', 'required': True, 'pattern': '^[a-zA-Z_][a-zA-Z0-9_]*$'}, 'value': {'type': 'value', 'required': True}}}, 'patterns_matched': [], 'scope': 'global'}
[DEBUG] get_action_shell_command: context validation failed: ["Handler export_var requires 'var' variable", "Handler export_var requires 'value' variable"]
[DEBUG] compile_validation_expression called with: 'variable MON_VAR vaut 42'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='variable MON_VAR vaut 42', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'export MON_VAR=42'}
[DEBUG] compile_atomic: Trying to canonize validation: 'variable MON_VAR vaut 42'
[DEBUG] compile_atomic: canonize_validation('variable MON_VAR vaut 42') result: {'phrase': 'variable {var} vaut {value}', 'handler': 'var_equals', 'scope': 'global', 'pattern_entry': {'phrase': 'variable {var} vaut {value}', 'handler': 'var_equals', 'scope': 'global', 'opposite': {'phrase': 'variable {var} ne vaut pas {value}'}, 'aliases': []}, 'params': {'var': 'mon_var', 'value': '42'}}
[DEBUG] extract_context_from_action result: {'action': 'variable MON_VAR vaut 42', 'handler': 'var_equals', 'category': 'variables', 'variables': {'var': 'MON_VAR', 'value': '42'}, 'requirements': {'required_variables': ['var', 'value'], 'optional_variables': [], 'scope': 'global', 'description': 'Check if variable equals value', 'category': 'variables', 'validation_rules': {'var': {'type': 'var', 'required': True, 'pattern': '^[a-zA-Z_][a-zA-Z0-9_]*$'}, 'value': {'type': 'value', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'variable {var} vaut {value}', 'config': {'type': 'validation', 'phrase': 'variable {var} vaut {value}', 'aliases': [], 'handler': 'var_equals', 'scope': 'global'}}], 'scope': 'global'}
[DEBUG] Final params for handler: {'var': 'mon_var', 'value': '42'}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.var_equals
[DEBUG] Core handler returned: ValidationCheck(expected='variable mon_var vaut 42', actual_cmd='test "$mon_var" = "42"', handler='var_equals', scope='global', params={'var': 'mon_var', 'value': '42', 'opposite': 'variable mon_var ne vaut pas 42'})
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\e2e\test_variable_equals.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\tests\e2e\test_variable_equals.sh
