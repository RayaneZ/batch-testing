ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 6 lines
[DEBUG] Lexing text with 6 lines
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Création et modification de fichiers, result=('Création et modification de fichiers',), original=Étape: Création et modification de fichiers at line 1
[DEBUG] Yielding token: STEP@1:0 'Création et modification de fichiers' -> '('Création et modification de fichiers',)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: créer le dossier /tmp/data avec les droits 0755 ; Résultat: Le dossier est créé at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=créer le dossier /tmp/data avec les droits 0755, result=('créer le dossier /tmp/data avec les droits 0755', 'Le dossier est créé', None), original=Action: créer le dossier /tmp/data avec les droits 0755 ; Résultat: Le dossier est créé at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'créer le dossier /tmp/data avec les droits 0755' -> '('créer le dossier /tmp/data avec les droits 0755', 'Le dossier est créé', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: créer le fichier /tmp/output.txt avec les droits 0644 ; Résultat: Le fichier est présent at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=créer le fichier /tmp/output.txt avec les droits 0644, result=('créer le fichier /tmp/output.txt avec les droits 0644', 'Le fichier est présent', None), original=Action: créer le fichier /tmp/output.txt avec les droits 0644 ; Résultat: Le fichier est présent at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'créer le fichier /tmp/output.txt avec les droits 0644' -> '('créer le fichier /tmp/output.txt avec les droits 0644', 'Le fichier est présent', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: mettre à jour la date du fichier /tmp/output.txt 202501021200 ; Résultat: La date est modifiée at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=mettre à jour la date du fichier /tmp/output.txt 202501021200, result=('mettre à jour la date du fichier /tmp/output.txt 202501021200', 'La date est modifiée', None), original=Action: mettre à jour la date du fichier /tmp/output.txt 202501021200 ; Résultat: La date est modifiée at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'mettre à jour la date du fichier /tmp/output.txt 202501021200' -> '('mettre à jour la date du fichier /tmp/output.txt 202501021200', 'La date est modifiée', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: afficher le contenu du fichier /tmp/output.txt ; Résultat: Le contenu est correct at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=afficher le contenu du fichier /tmp/output.txt, result=('afficher le contenu du fichier /tmp/output.txt', 'Le contenu est correct', None), original=Action: afficher le contenu du fichier /tmp/output.txt ; Résultat: Le contenu est correct at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'afficher le contenu du fichier /tmp/output.txt' -> '('afficher le contenu du fichier /tmp/output.txt', 'Le contenu est correct', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 7 tokens
[DEBUG] Grammar: _merge_action_result called with 7 tokens
[DEBUG] Grammar: Token 0: kind=STEP, value='Création et modification de fichiers'
[DEBUG] Grammar: Token 1: kind=EMPTY, value=''
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='créer le dossier /tmp/data avec les droits 0755'
[DEBUG] Grammar: Token 3: kind=ACTION_RESULT, value='créer le fichier /tmp/output.txt avec les droits 0644'
[DEBUG] Grammar: Token 4: kind=ACTION_RESULT, value='mettre à jour la date du fichier /tmp/output.txt 202501021200'
[DEBUG] Grammar: Token 5: kind=ACTION_RESULT, value='afficher le contenu du fichier /tmp/output.txt'
[DEBUG] Grammar: Token 6: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 7 tokens
[DEBUG] get_action_shell_command called with: 'créer le dossier /tmp/data avec les droits 0755'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'créer le dossier /tmp/data avec les droits 0755' (normalized: 'créer le dossier /tmp/data avec les droits 0755')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'créer le dossier /tmp/data avec les droits 0755', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '/tmp/data avec les droits 0755'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '/tmp/data avec les droits 0755'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'créer le dossier /tmp/data avec les droits 0755', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '/tmp/data avec les droits 0755'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '/tmp/data avec les droits 0755'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x00000253EB33E310>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '/tmp/data avec les droits 0755'
[DEBUG] compile_validation_expression called with: 'Le dossier est créé'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le dossier est créé', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'créer le dossier /tmp/data avec les droits 0755'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le dossier est créé'
[DEBUG] compile_atomic: canonize_validation('Le dossier est créé') result: {'phrase': 'le dossier est créé', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le dossier est créé', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'créer le fichier /tmp/output.txt avec les droits 0644'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'créer le fichier /tmp/output.txt avec les droits 0644' (normalized: 'créer le fichier /tmp/output.txt avec les droits 0644')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_file' for phrase 'Créer le fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'créer le fichier /tmp/output.txt avec les droits 0644', 'handler': 'create_file', 'category': 'file_operations', 'variables': {'path': '/tmp/output.txt avec les droits 0644'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new file', 'category': 'file_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le fichier {path}', 'config': {'type': 'action', 'phrase': 'Créer le fichier {path}', 'aliases': ['créer un fichier {path}', 'faire un fichier {path}', 'générer le fichier {path}', 'nouveau fichier {path}', 'cr[ée]er le fichier (.+)', '^touch (.+)$'], 'handler': 'create_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_file, variables={'path': '/tmp/output.txt avec les droits 0644'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'créer le fichier /tmp/output.txt avec les droits 0644', 'handler': 'create_file', 'category': 'file_operations', 'variables': {'path': '/tmp/output.txt avec les droits 0644'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new file', 'category': 'file_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le fichier {path}', 'config': {'type': 'action', 'phrase': 'Créer le fichier {path}', 'aliases': ['créer un fichier {path}', 'faire un fichier {path}', 'générer le fichier {path}', 'nouveau fichier {path}', 'cr[ée]er le fichier (.+)', '^touch (.+)$'], 'handler': 'create_file'}}], 'scope': 'global'}, 'path': '/tmp/output.txt avec les droits 0644'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_file.CreateFileAction object at 0x00000253EB362B50>
[DEBUG] get_action_shell_command: Generated shell command: touch '/tmp/output.txt avec les droits 0644'
[DEBUG] compile_validation_expression called with: 'Le fichier est présent'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le fichier est présent', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'créer le fichier /tmp/output.txt avec les droits 0644'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le fichier est présent'
[DEBUG] compile_atomic: canonize_validation('Le fichier est présent') result: {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'opposite': {'phrase': 'Le fichier est absent'}, 'aliases': ['Le fichier est présent', 'le fichier existe', 'fichier présent', 'le fichier est cree', 'fichier cree', 'le fichier est créé', 'fichier créé', 'le fichier est initialisé', 'fichier initialisé', 'le fichier est present', 'fichier present', 'le fichier est cree', 'fichier cree', 'le fichier est cree', 'fichier cree', 'le fichier est initialise', 'fichier initialise', '^le fichier est présent$', '^le fichier existe$', '^fichier présent$', '^le fichier est cree$', '^fichier cree$', '^le fichier est créé$', '^fichier créé$', '^le fichier est initialisé$', '^fichier initialisé$', '^le fichier est present$', '^fichier present$', '^le fichier est cree$', '^fichier cree$', '^le fichier est initialise$', '^fichier initialise$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le fichier est présent', 'handler': 'file_present', 'category': 'file_operations', 'variables': {}, 'requirements': {'required_variables': ['file'], 'optional_variables': [], 'scope': 'global', 'description': 'Check if a file exists', 'category': 'file_operations', 'validation_rules': {'file': {'type': 'file', 'required': True}}}, 'patterns_matched': [], 'scope': 'global'}
[DEBUG] Validation context errors for 'Le fichier est présent': Handler file_present requires 'file' variable
[ERROR] ValidationParseError: Validation context errors for 'Le fichier est présent': Handler file_present requires 'file' variable
Traceback (most recent call last):
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\compiler\shell_generator.py", line 198, in visit
    shellframework_ast = ShtestToShellFrameworkVisitor().visit(node)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\visitor.py", line 26, in visit
    return visitor_method(node)
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\shtest_to_shellframework_visitor.py", line 240, in visit_shtestfile
    validation_lines = self.compile_validation_expression(
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\shtest_to_shellframework_visitor.py", line 347, in compile_validation_expression
    return compile_atomic(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\compiler\atomic_compiler.py", line 80, in compile_atomic
    raise ValidationParseError(error_msg)
shtest_compiler.core.errors.ValidationParseError: Validation context errors for 'Le fichier est présent': Handler file_present requires 'file' variable

Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\testing\tests\e2e\test_case_4.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\testing\tests\e2e\test_case_4.sh
