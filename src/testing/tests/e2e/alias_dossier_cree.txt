ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 3 lines
[DEBUG] Lexing text with 3 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le dossier = /tmp/newdir ; Résultat: dossier créé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le dossier = /tmp/newdir, result=('Créer le dossier = /tmp/newdir', 'dossier créé.', None), original=Action: Créer le dossier = /tmp/newdir ; Résultat: dossier créé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le dossier = /tmp/newdir' -> '('Créer le dossier = /tmp/newdir', 'dossier créé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le dossier = /tmp/newdir ; Résultat: Le dossier est créé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le dossier = /tmp/newdir, result=('Créer le dossier = /tmp/newdir', 'Le dossier est créé.', None), original=Action: Créer le dossier = /tmp/newdir ; Résultat: Le dossier est créé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le dossier = /tmp/newdir' -> '('Créer le dossier = /tmp/newdir', 'Le dossier est créé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le dossier = /tmp/newdir ; Résultat: le dossier est prêt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le dossier = /tmp/newdir, result=('Créer le dossier = /tmp/newdir', 'le dossier est prêt.', None), original=Action: Créer le dossier = /tmp/newdir ; Résultat: le dossier est prêt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le dossier = /tmp/newdir' -> '('Créer le dossier = /tmp/newdir', 'le dossier est prêt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 4 tokens
[DEBUG] Grammar: _merge_action_result called with 4 tokens
[DEBUG] Grammar: Token 0: kind=ACTION_RESULT, value='Créer le dossier = /tmp/newdir'
[DEBUG] Grammar: Token 1: kind=ACTION_RESULT, value='Créer le dossier = /tmp/newdir'
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='Créer le dossier = /tmp/newdir'
[DEBUG] Grammar: Token 3: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 4 tokens
[DEBUG] get_action_shell_command called with: 'Créer le dossier = /tmp/newdir'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le dossier = /tmp/newdir' (normalized: 'créer le dossier = /tmp/newdir')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x00000207ED5EC090>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '= /tmp/newdir'
[DEBUG] compile_validation_expression called with: 'dossier créé'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='dossier créé', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le dossier = /tmp/newdir'}
[DEBUG] compile_atomic: Trying to canonize validation: 'dossier créé'
[DEBUG] compile_atomic: canonize_validation('dossier créé') result: {'phrase': 'dossier créé', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'dossier créé', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'Créer le dossier = /tmp/newdir'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le dossier = /tmp/newdir' (normalized: 'créer le dossier = /tmp/newdir')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x00000207ED8310D0>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '= /tmp/newdir'
[DEBUG] compile_validation_expression called with: 'Le dossier est créé'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le dossier est créé', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le dossier = /tmp/newdir'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le dossier est créé'
[DEBUG] compile_atomic: canonize_validation('Le dossier est créé') result: {'phrase': 'le dossier est créé', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le dossier est créé', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'Créer le dossier = /tmp/newdir'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le dossier = /tmp/newdir' (normalized: 'créer le dossier = /tmp/newdir')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x00000207ED4D0610>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '= /tmp/newdir'
[DEBUG] compile_validation_expression called with: 'le dossier est prêt'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le dossier est prêt', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le dossier = /tmp/newdir'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le dossier est prêt'
[DEBUG] compile_atomic: canonize_validation('le dossier est prêt') result: {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le dossier est prêt', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\src\testing\tests\e2e\alias_dossier_cree.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\src\testing\tests\e2e\alias_dossier_cree.sh
