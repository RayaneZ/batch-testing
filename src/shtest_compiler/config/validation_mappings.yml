# Validation mappings for success/failure messages
# This replaces hardcoded mappings in basic_checks_matcher.py
# Links to patterns_validations.yml for handler information

# Import patterns from patterns_validations.yml
import_patterns: true
patterns_file: "patterns_validations.yml"

# Handler-based mappings - each handler can have multiple aliases and failure statements
handlers:
  base_ready:
    scope: "global"
    success: "base prête"
    failure: "base non prête"
    aliases:
      - "base prete"
      - "base prête"
      - "la base de test est prête"
      - "la base est prête pour le test"
  
  content_displayed:
    scope: "last_action"
    success: "contenu affiché"
    failure: "contenu non affiché"
    aliases:
      - "contenu affiche"
      - "contenu affiché"
      - "le script est affiche"
      - "le contenu est lisible"
      - "le contenu est correct"
      - "contenu correct"
  
  dir_ready:
    scope: "last_action"
    success: "dossier créé"
    failure: "échec création"
    aliases:
      - "dossier cree"
      - "dossier créé"
      - "le dossier est cree"
      - "le dossier est prêt"
      - "dossier prêt"
  
  file_present:
    scope: "last_action"
    success: "fichier créé"
    failure: "échec création"
    aliases:
      - "fichier cree"
      - "fichier créé"
      - "le fichier est cree"
      - "fichier present"
      - "fichier présent"
      - "le fichier est present"
      - "le fichier est présent"
      - "fichier existe"
      - "le fichier existe"
  
  date_modified:
    scope: "last_action"
    success: "date modifiée"
    failure: "date inchangée"
    aliases:
      - "date modifiee"
      - "date modifiée"
      - "la date est modifiee"
      - "la date est modifiée"
  
  logs_accessible:
    scope: "global"
    success: "logs accessibles"
    failure: "logs inaccessibles"
    aliases:
      - "logs accessibles"
      - "les logs sont accessibles"
  
  file_copied:
    scope: "last_action"
    success: "le fichier est copié"
    failure: "le fichier non copié"
    aliases:
      - "le fichier est copie"
      - "le fichier est copié"
      - "fichier copie"
      - "fichier copié"
  
  dir_copied:
    scope: "last_action"
    success: "le dossier est copié"
    failure: "le dossier non copié"
    aliases:
      - "le dossier est copie"
      - "le dossier est copié"
      - "dossier copie"
      - "dossier copié"
  
  file_moved:
    scope: "last_action"
    success: "le fichier est déplacé"
    failure: "fichier non déplacé"
    aliases:
      - "le fichier est deplace"
      - "le fichier est déplacé"
      - "fichier deplace"
      - "fichier déplacé"
  
  dir_moved:
    scope: "last_action"
    success: "le dossier est déplacé"
    failure: "dossier non déplacé"
    aliases:
      - "le dossier est deplace"
      - "le dossier est déplacé"
      - "dossier deplace"
      - "dossier déplacé"
  
  env_defined:
    scope: "global"
    success: "variable d'environnement définie"
    failure: "variable d'environnement non définie"
    aliases:
      - "variable d'environnement definie"
      - "variable d'environnement définie"
  
  files_identical:
    scope: "last_action"
    success: "fichiers identiques"
    failure: "fichiers différents"
    aliases:
      - "fichiers identiques"
      - "les fichiers sont les memes"
      - "les fichiers sont les mêmes"
      - "fichiers egaux"
      - "fichiers égaux"
  
  credentials_configured:
    scope: "global"
    success: "identifiants configurés"
    failure: "non configuré"
    aliases:
      - "identifiants configures"
      - "identifiants configurés"
      - "les identifiants sont configures"
      - "les identifiants sont configurés"
  
  no_error_message:
    scope: "last_action"
    success: "aucun message d'erreur"
    failure: "message d'erreur détecté"
    aliases:
      - "aucun message derreur"
      - "aucun message d'erreur"
  
  return_code:
    scope: "last_action"
    success: "Le script retourne un code {code}"
    failure: "échec"
    aliases:
      - "retour {code}"
      - "code retour {code}"
      - "le script retourne un code {code}"
      - "Le script retourne un code {code}"
      - "le script a reussi"
      - "le script a réussi"
      - "le script s'est execute sans erreur"
      - "le script s'est exécuté sans erreur"
      - "Le script s'execute avec succes"
      - "Le script s'execute avec succès"

# Special cases that need custom logic (not handler-based)
special_cases:
  "identifiants configures":
    type: "env_check"
    variable: "SQL_CONN"
    success: "identifiants configurés"
    failure: "non configuré"
    scope: "global"
    handler: "credentials_configured"
  
  "retour":
    type: "return_code"
    scope: "last_action"
    handler: "return_code" 