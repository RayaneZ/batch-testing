{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KnightBatch - Framework de Tests Automatis\u00e9s","text":"Bienvenue dans la documentation de KnightBatch, le framework moderne pour l'automatisation de tests via des sc\u00e9narios en langage naturel. Transformez vos proc\u00e9dures manuelles en tests automatis\u00e9s robustes et maintenables."},{"location":"#demarrage-rapide","title":"D\u00e9marrage Rapide","text":"<pre><code># Installation\ngit clone &lt;repository-url&gt;\ncd batch-testing\npip install -r src/requirements.txt\n\n# Premier test\necho '\u00c9tape: Test simple\nAction: Cr\u00e9er le fichier ./test.txt\nR\u00e9sultat: le fichier existe' &gt; mon_test.shtest\n\n# Compilation et ex\u00e9cution\npython src/shtest_compiler/compile_file.py mon_test.shtest\nbash mon_test.sh\n</code></pre>"},{"location":"#objectifs","title":"Objectifs","text":"<ul> <li>Simplicit\u00e9 : \u00c9crire des tests en langage naturel, compr\u00e9hensible par tous</li> <li>Robustesse : Validation automatique avec d\u00e9tection d'erreurs pr\u00e9cise</li> <li>Modularit\u00e9 : Architecture extensible avec syst\u00e8me de plugins YAML</li> <li>Productivit\u00e9 : Pipeline complet de compilation, validation et ex\u00e9cution</li> <li>Int\u00e9gration : Support CI/CD et rapports automatis\u00e9s</li> </ul>"},{"location":"#architecture-modulaire","title":"\ufe0f Architecture Modulaire","text":"<p>KnightBatch utilise une architecture moderne enti\u00e8rement configur\u00e9e par YAML :</p> <ul> <li>** Core Modulaire** : Syst\u00e8me de contexte partag\u00e9 et gestion d'\u00e9tat</li> <li>** Lexer Configurable** : Tokenisation bas\u00e9e sur patterns YAML</li> <li>** Parser Flexible** : Grammaire extensible avec constructeur AST</li> <li>\u2699\ufe0f Compilateur YAML : G\u00e9n\u00e9ration de code via configuration</li> <li>** Syst\u00e8me de Plugins** : Handlers extensibles pour nouvelles actions</li> <li>** Validation Robuste** : V\u00e9rification AST et s\u00e9mantique automatique</li> </ul>"},{"location":"#pipeline-de-compilation","title":"Pipeline de Compilation","text":"<ol> <li>** Tokenisation** : Le fichier <code>.shtest</code> est d\u00e9coup\u00e9 en tokens via patterns YAML</li> <li>** Parsing** : Les tokens sont analys\u00e9s pour produire un AST structur\u00e9</li> <li>\ufe0f Construction AST : Validation et normalisation de la structure</li> <li>** Binding** : Liaison des validations aux actions et r\u00e9solution du contexte</li> <li>\u2699\ufe0f G\u00e9n\u00e9ration : Production de scripts shell ex\u00e9cutables via handlers</li> <li>\u25b6\ufe0f Ex\u00e9cution : Ex\u00e9cution directe des scripts g\u00e9n\u00e9r\u00e9s</li> </ol> <p>Avantages : Pipeline enti\u00e8rement configurable, validation robuste, g\u00e9n\u00e9ration optimis\u00e9e</p>"},{"location":"#guide-complet","title":"Guide Complet","text":"<p>Pour un guide d\u00e9taill\u00e9 couvrant toutes les fonctionnalit\u00e9s, consultez le Manuel Utilisateur.</p>"},{"location":"#exemple-rapide","title":"Exemple Rapide","text":"<pre><code>\u00c9tape: Pr\u00e9paration\nAction: Cr\u00e9er le dossier ./demo\nR\u00e9sultat: le dossier est cr\u00e9\u00e9\n\n\u00c9tape: V\u00e9rification\nAction: Lister le dossier ./demo\nR\u00e9sultat: stdout contient demo\n</code></pre> <pre><code># Compilation\npython src/shtest_compiler/compile_file.py example.shtest\n\n# Ex\u00e9cution\nbash example.sh\n</code></pre>"},{"location":"#outils-de-developpement","title":"Outils de D\u00e9veloppement","text":""},{"location":"#extension-vs-code","title":"Extension VS Code","text":"<p>L'extension VS Code KnightBatch offre une exp\u00e9rience de d\u00e9veloppement int\u00e9gr\u00e9e\u00a0: - Coloration syntaxique compl\u00e8te pour les fichiers <code>.shtest</code> - Commandes int\u00e9gr\u00e9es pour compilation, v\u00e9rification et analyse - Snippets intelligents pour acc\u00e9l\u00e9rer l'\u00e9criture - IntelliSense avec autocompl\u00e9tion et validation en temps r\u00e9el - Validation en temps r\u00e9el avec d\u00e9tection d'erreurs</p> <p> Documentation Extension VS Code</p>"},{"location":"#systeme-de-plugins","title":"Syst\u00e8me de Plugins","text":"<ul> <li>Ajoutez facilement de nouveaux types de validations ou d'actions via le syst\u00e8me de plugins Python.</li> <li>Voir Cr\u00e9er un plugin pour un guide \u00e9tape par \u00e9tape.</li> </ul>"},{"location":"#structure-de-la-documentation","title":"Structure de la documentation","text":"<ul> <li>CLI : Utilisation de l'interface en ligne de commande.</li> <li>Configuration : Param\u00e9trage du syst\u00e8me de test.</li> <li>Format SHTEST : Syntaxe standardis\u00e9e des sc\u00e9narios.</li> <li>Architecture Modulaire : Documentation technique de l'architecture.</li> <li>Guide D\u00e9veloppeur : Guide de d\u00e9marrage rapide pour d\u00e9veloppeurs.</li> <li>Extension VS Code : Documentation compl\u00e8te de l'extension.</li> <li>Style Guide : Recommandations r\u00e9dactionnelles pour les sc\u00e9narios.</li> <li>Regex : D\u00e9tail des expressions r\u00e9guli\u00e8res utilis\u00e9es pour le parsing.</li> <li>Tests et Validation : Documentation des suites de test et validation d'erreurs.</li> </ul> <p>Pour commencer, explorez la section sur le format SHTEST ou consultez les regex de parsing. Pour les d\u00e9veloppeurs, d\u00e9couvrez l'architecture modulaire et l'extension VS Code. Pour tester votre syst\u00e8me, consultez la documentation des tests.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>Ce document liste les am\u00e9liorations et nouvelles fonctionnalit\u00e9s apport\u00e9es \u00e0 KnightBatch.</p>"},{"location":"CHANGELOG/#200-2025-01-13","title":"[2.0.0] - 2025-01-13","text":""},{"location":"CHANGELOG/#validation-robuste-et-gestion-derreurs","title":"\ufe0f Validation Robuste et Gestion d'Erreurs","text":""},{"location":"CHANGELOG/#nouveau-systeme-de-validation-ast","title":"Nouveau Syst\u00e8me de Validation AST","text":"<ul> <li>Validateurs int\u00e9gr\u00e9s pour d\u00e9tecter les erreurs structurelles et s\u00e9mantiques</li> <li>Messages d'erreur clairs avec localisation pr\u00e9cise des probl\u00e8mes</li> <li>Codes de sortie standardis\u00e9s pour l'int\u00e9gration CI/CD</li> <li>Validation en temps r\u00e9el pendant le parsing</li> </ul>"},{"location":"CHANGELOG/#types-derreurs-detectees","title":"Types d'Erreurs D\u00e9tect\u00e9es","text":"<ul> <li>Fichiers vides ou contenant seulement des commentaires</li> <li>Actions orphelines (sans mot-cl\u00e9 <code>\u00c9tape:</code>)</li> <li>Actions malform\u00e9es (commandes vides ou invalides)</li> <li>Validations incompl\u00e8tes ou malform\u00e9es</li> <li>Structure invalide (imbrication incorrecte)</li> <li>Variables malform\u00e9es ou invalides</li> <li>Op\u00e9rations SQL invalides</li> <li>Chemins de fichiers invalides</li> </ul>"},{"location":"CHANGELOG/#amelioration-de-la-gestion-derreurs","title":"Am\u00e9lioration de la Gestion d'Erreurs","text":"<ul> <li>Propagation d'erreurs : Les erreurs remontent correctement jusqu'au CLI</li> <li>Sortie d'erreur structur\u00e9e : Messages format\u00e9s pour stderr</li> <li>Codes de sortie appropri\u00e9s : 0=succ\u00e8s, 1=erreur validation, 2=erreur config, 3=erreur syst\u00e8me</li> <li>Debugging int\u00e9gr\u00e9 : Mode debug avec informations d\u00e9taill\u00e9es</li> </ul>"},{"location":"CHANGELOG/#suite-de-tests-e2e-complete","title":"Suite de Tests E2E Compl\u00e8te","text":""},{"location":"CHANGELOG/#organisation-des-tests","title":"Organisation des Tests","text":"<pre><code>src/tests/\n\u251c\u2500\u2500 unit/           # Tests unitaires des modules individuels\n\u251c\u2500\u2500 integration/    # Tests d'int\u00e9gration entre composants\n\u251c\u2500\u2500 e2e/           # Tests end-to-end avec fichiers .shtest\n\u2502   \u251c\u2500\u2500 ko/        # Tests n\u00e9gatifs (fichiers invalides)\n\u2502   \u2514\u2500\u2500 ok/        # Tests positifs (fichiers valides)\n\u2514\u2500\u2500 legacy/        # Tests de compatibilit\u00e9 avec l'ancien format\n</code></pre>"},{"location":"CHANGELOG/#tests-negatifs-ko","title":"Tests N\u00e9gatifs (KO)","text":"<ul> <li>13 fichiers de test invalides couvrant tous les cas d'erreur</li> <li>Test runner automatis\u00e9 (<code>run_ko_tests.py</code>)</li> <li>Validation des messages d'erreur et codes de sortie</li> <li>Documentation compl\u00e8te des cas de test</li> </ul>"},{"location":"CHANGELOG/#tests-positifs-ok","title":"Tests Positifs (OK)","text":"<ul> <li>Tests de fonctionnalit\u00e9s avec fichiers valides</li> <li>Tests SQL avanc\u00e9s avec comparaison de r\u00e9sultats</li> <li>Tests d'int\u00e9gration entre composants</li> <li>Validation du comportement attendu</li> </ul>"},{"location":"CHANGELOG/#outils-de-test","title":"Outils de Test","text":"<ul> <li>Script de debug (<code>debug_parser.py</code>) pour analyser le parsing</li> <li>Test runner E2E (<code>run_e2e_tests.py</code>) pour la suite compl\u00e8te</li> <li>Tests unitaires avec pytest</li> <li>Tests d'int\u00e9gration automatis\u00e9s</li> </ul>"},{"location":"CHANGELOG/#ameliorations-techniques","title":"Am\u00e9liorations Techniques","text":""},{"location":"CHANGELOG/#architecture-modulaire","title":"Architecture Modulaire","text":"<ul> <li>Parser configurable avec validation int\u00e9gr\u00e9e</li> <li>AST Builder avec syst\u00e8me de validateurs extensible</li> <li>Compilateur modulaire avec gestion d'erreurs robuste</li> <li>Syst\u00e8me de plugins am\u00e9lior\u00e9</li> </ul>"},{"location":"CHANGELOG/#cli-ameliore","title":"CLI Am\u00e9lior\u00e9","text":"<ul> <li>Gestion des fichiers uniques vs r\u00e9pertoires</li> <li>Validation en temps r\u00e9el avec messages clairs</li> <li>Mode debug avec logs d\u00e9taill\u00e9s</li> <li>Codes de sortie appropri\u00e9s pour l'automatisation</li> </ul>"},{"location":"CHANGELOG/#sql-avance","title":"SQL Avanc\u00e9","text":"<ul> <li>Comparaison de r\u00e9sultats avec export Excel</li> <li>Gestion de l'ordre (ignorer l'ordre lors de la comparaison)</li> <li>Tol\u00e9rance pour les diff\u00e9rences mineures</li> <li>Validation int\u00e9gr\u00e9e avec le syst\u00e8me de tests</li> </ul>"},{"location":"CHANGELOG/#documentation-complete","title":"Documentation Compl\u00e8te","text":""},{"location":"CHANGELOG/#nouvelle-documentation","title":"Nouvelle Documentation","text":"<ul> <li>Guide de tests et validation (<code>testing_and_validation.md</code>)</li> <li>Changelog d\u00e9taill\u00e9 des am\u00e9liorations</li> <li>Documentation CLI mise \u00e0 jour avec gestion d'erreurs</li> <li>Guide d\u00e9veloppeur enrichi avec exemples de tests</li> </ul>"},{"location":"CHANGELOG/#ameliorations-de-la-documentation","title":"Am\u00e9liorations de la Documentation","text":"<ul> <li>Exemples pratiques pour tous les cas d'usage</li> <li>Troubleshooting avec messages d'erreur courants</li> <li>Bonnes pratiques pour l'\u00e9criture de tests</li> <li>Int\u00e9gration CI/CD document\u00e9e</li> </ul>"},{"location":"CHANGELOG/#fonctionnalites-nouvelles","title":"Fonctionnalit\u00e9s Nouvelles","text":""},{"location":"CHANGELOG/#validation-en-temps-reel","title":"Validation en Temps R\u00e9el","text":"<ul> <li>D\u00e9tection imm\u00e9diate des erreurs de syntaxe</li> <li>Messages contextuels avec localisation pr\u00e9cise</li> <li>Suggestions de correction pour les erreurs courantes</li> </ul>"},{"location":"CHANGELOG/#outils-de-diagnostic","title":"Outils de Diagnostic","text":"<ul> <li>Debug parser pour analyser le comportement</li> <li>Inspection AST avec visualisation de la structure</li> <li>Validation des tokens avec affichage d\u00e9taill\u00e9</li> </ul>"},{"location":"CHANGELOG/#integration-cicd","title":"Int\u00e9gration CI/CD","text":"<ul> <li>Codes de sortie appropri\u00e9s pour l'automatisation</li> <li>Tests automatis\u00e9s pour validation continue</li> <li>Documentation des bonnes pratiques d'int\u00e9gration</li> </ul>"},{"location":"CHANGELOG/#1xx-versions-precedentes","title":"[1.x.x] - Versions Pr\u00e9c\u00e9dentes","text":""},{"location":"CHANGELOG/#fonctionnalites-de-base","title":"Fonctionnalit\u00e9s de Base","text":"<ul> <li>Architecture modulaire avec lexer, parser et compilateur</li> <li>Support des fichiers <code>.shtest</code> avec syntaxe en langage naturel</li> <li>G\u00e9n\u00e9ration de scripts shell ex\u00e9cutables</li> <li>Export Excel des sc\u00e9narios de test</li> <li>Extension VS Code avec coloration syntaxique</li> <li>Syst\u00e8me de plugins extensible</li> </ul>"},{"location":"CHANGELOG/#composants-principaux","title":"Composants Principaux","text":"<ul> <li>Parser configurable avec patterns YAML</li> <li>AST Builder avec n\u0153uds sp\u00e9cialis\u00e9s</li> <li>Compilateur modulaire avec visiteurs</li> <li>Matchers pour validations personnalis\u00e9es</li> <li>Support SQL avec drivers multiples</li> </ul>"},{"location":"CHANGELOG/#migration-guide","title":"Migration Guide","text":""},{"location":"CHANGELOG/#pour-les-utilisateurs-existants","title":"Pour les Utilisateurs Existants","text":"<ol> <li>Aucun changement requis pour les fichiers <code>.shtest</code> valides</li> <li>Validation automatique : Les erreurs sont maintenant d\u00e9tect\u00e9es et signal\u00e9es</li> <li>Messages d'erreur am\u00e9lior\u00e9s : Diagnostic plus pr\u00e9cis des probl\u00e8mes</li> <li>Codes de sortie : V\u00e9rifiez les scripts d'automatisation</li> </ol>"},{"location":"CHANGELOG/#pour-les-developpeurs","title":"Pour les D\u00e9veloppeurs","text":"<ol> <li>Tests obligatoires : Ajoutez des tests pour les nouvelles fonctionnalit\u00e9s</li> <li>Validation : Utilisez le syst\u00e8me de validation AST pour les nouveaux composants</li> <li>Gestion d'erreurs : Respectez les codes de sortie et messages d'erreur</li> <li>Documentation : Mettez \u00e0 jour la documentation pour les nouvelles fonctionnalit\u00e9s</li> </ol>"},{"location":"CHANGELOG/#pour-les-integrations-cicd","title":"Pour les Int\u00e9grations CI/CD","text":"<ol> <li>Codes de sortie : Utilisez les nouveaux codes de sortie pour la d\u00e9tection d'erreurs</li> <li>Tests automatis\u00e9s : Int\u00e9grez la suite de tests E2E dans vos pipelines</li> <li>Validation : Utilisez la validation en temps r\u00e9el pour la qualit\u00e9 du code</li> <li>Reporting : Exploitez les messages d'erreur structur\u00e9s pour les rapports</li> </ol>"},{"location":"cli/","title":"Outils en ligne de commande","text":"<p>Cette page d\u00e9taille les diff\u00e9rents scripts disponibles dans le projet KnightBatch, tous bas\u00e9s sur l'architecture modulaire moderne.</p> <p>KnightBatch propose une CLI simple et puissante pour compiler, valider et ex\u00e9cuter des sc\u00e9narios <code>.shtest</code>\u00a0: - Compilation : Conversion d'un fichier <code>.shtest</code> en script shell ex\u00e9cutable - Validation : V\u00e9rification de la syntaxe et de la structure - Pipeline complet : Compilation, export Excel, et v\u00e9rification en une seule commande - Tests : Ex\u00e9cution automatis\u00e9e des tests unitaires, E2E et d'int\u00e9gration</p>"},{"location":"cli/#shtestpy-compilateur-principal","title":"<code>shtest.py</code> - Compilateur Principal","text":"<p>Le compilateur principal utilise l'architecture modulaire pour convertir les fichiers <code>.shtest</code> en scripts shell ex\u00e9cutables.</p>"},{"location":"cli/#utilisation-de-base","title":"Utilisation de base","text":"<pre><code># Compiler un fichier .shtest\npython shtest.py tests/example.shtest\n\n# Compiler avec sortie personnalis\u00e9e\npython shtest.py tests/example.shtest --output output/script.sh\n\n# Mode debug pour voir les d\u00e9tails de compilation\npython shtest.py tests/example.shtest --debug\n</code></pre>"},{"location":"cli/#options-disponibles","title":"Options disponibles","text":"<pre><code>python shtest.py [OPTIONS] &lt;input_file&gt;\n\nOptions:\n  --output, -o PATH     Chemin de sortie pour le script g\u00e9n\u00e9r\u00e9\n  --debug, -d          Mode debug avec logs d\u00e9taill\u00e9s\n  --config PATH        Chemin vers le fichier de configuration\n  --help, -h           Afficher l'aide\n</code></pre>"},{"location":"cli/#gestion-derreurs","title":"Gestion d'Erreurs","text":"<p>Le compilateur dispose d'un syst\u00e8me de validation robuste qui d\u00e9tecte et signale les erreurs\u00a0:</p> <pre><code># Erreur de syntaxe - fichier invalide\npython shtest.py tests/e2e/ko/invalid_syntax_1.shtest\n# Sortie: [ERROR] Parse error in file: AST validation failed: Found orphaned action...\n\n# Erreur de validation - fichier vide\npython shtest.py tests/e2e/ko/empty_file.shtest\n# Sortie: [ERROR] Parse error in file: AST validation failed: File is empty or contains no steps\n\n# Code de sortie non-z\u00e9ro en cas d'erreur\necho $?  # Affiche 1 en cas d'erreur\n</code></pre>"},{"location":"cli/#run_allpy-pipeline-complet","title":"<code>run_all.py</code> - Pipeline Complet","text":"<p>Encha\u00eene la v\u00e9rification, la g\u00e9n\u00e9ration des scripts et l'export Excel en une seule commande\u00a0:</p> <pre><code>python src/run_all.py --input src/tests --output output --excel tests.xlsx\n</code></pre>"},{"location":"cli/#validation-robuste","title":"Validation Robuste","text":"<p>Le pipeline inclut une validation compl\u00e8te qui \u00e9choue rapidement sur les erreurs\u00a0:</p> <pre><code># Validation d'un fichier invalide\npython src/run_all.py --input tests/e2e/ko/invalid_syntax_1.shtest\n# Sortie: [1/3] V\u00e9rification de la syntaxe...\n#         Erreurs de syntaxe d\u00e9tect\u00e9es:\n#           - tests/e2e/ko/invalid_syntax_1.shtest: AST validation failed: Found orphaned action...\n\n# Validation d'un r\u00e9pertoire mixte\npython src/run_all.py --input tests/e2e/\n# Sortie: [1/3] V\u00e9rification de la syntaxe...\n#         Erreurs de syntaxe d\u00e9tect\u00e9es:\n#           - tests/e2e/ko/invalid_syntax_1.shtest: AST validation failed: Found orphaned action...\n#         [FAIL] One or more files failed to compile.\n</code></pre>"},{"location":"cli/#options-completes","title":"Options compl\u00e8tes","text":"<pre><code>python src/run_all.py [OPTIONS]\n\nOptions:\n  --input, -i PATH     R\u00e9pertoire d'entr\u00e9e ou fichier unique\n  --output, -o PATH    R\u00e9pertoire de sortie\n  --excel PATH         Fichier Excel de sortie\n  --no-shell           D\u00e9sactiver la g\u00e9n\u00e9ration de scripts shell\n  --no-excel           D\u00e9sactiver l'export Excel\n  --debug, -d          Mode debug avec logs d\u00e9taill\u00e9s\n</code></pre>"},{"location":"cli/#verify_syntaxpy-verificateur-de-syntaxe","title":"<code>verify_syntax.py</code> - V\u00e9rificateur de Syntaxe","text":"<p>V\u00e9rifie la validit\u00e9 des fichiers <code>.shtest</code> et affiche les erreurs rencontr\u00e9es.</p> <pre><code>python src/verify_syntax.py src/tests\n</code></pre>"},{"location":"cli/#validation-avancee","title":"Validation Avanc\u00e9e","text":"<p>Le v\u00e9rificateur utilise le syst\u00e8me de validation AST pour d\u00e9tecter\u00a0:</p> <ul> <li>Fichiers vides ou contenant seulement des commentaires</li> <li>Actions orphelines sans mot-cl\u00e9 <code>\u00c9tape:</code></li> <li>Actions malform\u00e9es avec commandes vides ou invalides</li> <li>Validations incompl\u00e8tes ou malform\u00e9es</li> <li>Structure invalide (imbrication incorrecte, etc.)</li> </ul> <pre><code># Validation d'un fichier valide\npython src/verify_syntax.py tests/e2e/ok/example.shtest\n# Sortie: [] Syntaxe valide.\n\n# Validation d'un fichier invalide\npython src/verify_syntax.py tests/e2e/ko/invalid_syntax_1.shtest\n# Sortie: [ERROR] Erreur de syntaxe: AST validation failed: Found orphaned action...\n\n# Mode verbose pour plus de d\u00e9tails\npython src/verify_syntax.py tests/e2e/ko/invalid_syntax_1.shtest --verbose\n</code></pre>"},{"location":"cli/#options-avancees","title":"Options avanc\u00e9es","text":"<pre><code>python src/verify_syntax.py [OPTIONS] &lt;input_path&gt;\n\nOptions:\n  --verbose, -v        Affichage d\u00e9taill\u00e9 des erreurs\n  --debug, -d          Mode debug avec tokens et AST\n</code></pre>"},{"location":"cli/#tests-et-validation","title":"Tests et Validation","text":""},{"location":"cli/#tests-e2e","title":"Tests E2E","text":"<pre><code># Compiler et ex\u00e9cuter tous les tests E2E\npython src/shtest_compiler/run_tests.py --all\n</code></pre>"},{"location":"cli/#tests-unitaires","title":"Tests Unitaires","text":"<pre><code># Tous les tests unitaires\npython -m pytest tests/unit/\n</code></pre>"},{"location":"cli/#tests-dintegration","title":"Tests d'Int\u00e9gration","text":"<pre><code># Ex\u00e9cuter tous les scripts shell g\u00e9n\u00e9r\u00e9s\nfor test in tests/integration/*.sh; do\n    bash \"$test\"\ndone\n</code></pre>"},{"location":"cli/#outils-de-diagnostic","title":"Outils de Diagnostic","text":""},{"location":"cli/#debug-parser","title":"Debug Parser","text":"<pre><code># Analyser le comportement du parser sur un fichier\npython tests/e2e/ko/debug_parser.py\n</code></pre>"},{"location":"cli/#mode-debug-complet","title":"Mode Debug Complet","text":"<pre><code># Activer le mode debug global\nexport SHTEST_DEBUG=1\n\n# Ex\u00e9cuter avec logs d\u00e9taill\u00e9s\npython src/run_all.py --input tests/example.shtest --debug\n</code></pre>"},{"location":"cli/#configuration","title":"Configuration","text":""},{"location":"cli/#fichier-configini","title":"Fichier config.ini","text":"<p>Le fichier <code>config.ini</code> situ\u00e9 \u00e0 la racine du projet permet de d\u00e9finir les chemins par d\u00e9faut\u00a0:</p> <pre><code>[application]\ninput_dir = demo_env\noutput_dir = demo_env\nsql_driver = oracle\nconfig_path = config/patterns_hybrid.yml\naliases_path = config/aliases.yml\n</code></pre>"},{"location":"cli/#variables-denvironnement","title":"Variables d'Environnement","text":"<pre><code># Chemin vers les fichiers de configuration\nexport SHTEST_CONFIG_PATH=\"config/patterns_hybrid.yml\"\n\n# Chemin vers les plugins\nexport SHTEST_PLUGIN_PATH=\"src/shtest_compiler/plugins\"\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>KnightBatch utilise un syst\u00e8me de configuration hybride combinant des fichiers INI pour les param\u00e8tres globaux et des fichiers YAML pour les patterns et alias.</p>"},{"location":"configuration/#configuration-globale-configini","title":"Configuration Globale (config.ini)","text":"<p>Le fichier <code>config.ini</code> situ\u00e9 \u00e0 la racine du projet permet de d\u00e9finir les chemins par d\u00e9faut utilis\u00e9s par les scripts.</p> <pre><code>[application]\ninput_dir = demo_env\noutput_dir = demo_env\nsql_driver = oracle\nconfig_path = config/patterns_hybrid.yml\naliases_path = config/aliases.yml\nplugin_path = plugins/\ndebug = false\n</code></pre>"},{"location":"configuration/#parametres-disponibles","title":"Param\u00e8tres disponibles","text":"<ul> <li><code>input_dir</code> : R\u00e9pertoire par d\u00e9faut contenant les fichiers <code>.shtest</code></li> <li><code>output_dir</code> : R\u00e9pertoire de sortie pour les scripts g\u00e9n\u00e9r\u00e9s</li> <li><code>sql_driver</code> : Moteur SQL par d\u00e9faut (<code>mysql</code>, <code>oracle</code>, <code>postgres</code>, <code>redis</code>)</li> <li><code>config_path</code> : Chemin vers le fichier de patterns YAML</li> <li><code>aliases_path</code> : Chemin vers le fichier d'alias YAML</li> <li><code>plugin_path</code> : R\u00e9pertoire contenant les plugins</li> <li><code>debug</code> : Mode debug (true/false)</li> </ul>"},{"location":"configuration/#configuration-des-patterns-patterns_hybridyml","title":"Configuration des Patterns (patterns_hybrid.yml)","text":"<p>Le fichier <code>config/patterns_hybrid.yml</code> d\u00e9finit les patterns de reconnaissance pour le lexer et la grammaire pour le parser.</p>"},{"location":"configuration/#structure-des-tokens","title":"Structure des Tokens","text":"<pre><code>tokens:\n  action:\n    pattern: \"Action:\\\\s*(.+)\"\n    type: \"ACTION\"\n    priority: 1\n  validation:\n    pattern: \"R\u00e9sultat:\\\\s*(.+)\"\n    type: \"VALIDATION\"\n    priority: 2\n  file_operation:\n    pattern: \"(cr\u00e9er|copier|toucher|comparer)\\\\s+le\\\\s+fichier\"\n    type: \"FILE_OP\"\n    priority: 3\n  sql_operation:\n    pattern: \"(ex\u00e9cuter|d\u00e9finir)\\\\s+(le\\\\s+)?(script\\\\s+)?sql\"\n    type: \"SQL_OP\"\n    priority: 4\n</code></pre>"},{"location":"configuration/#grammaire","title":"Grammaire","text":"<pre><code>grammar:\n  rules:\n    - name: \"action_validation\"\n      pattern: \"action:validation\"\n      builder: \"action_validation_builder\"\n      priority: 1\n    - name: \"file_operation\"\n      pattern: \"file_operation:validation\"\n      builder: \"file_operation_builder\"\n      priority: 2\n    - name: \"sql_operation\"\n      pattern: \"sql_operation:validation\"\n      builder: \"sql_operation_builder\"\n      priority: 3\n</code></pre>"},{"location":"configuration/#filtres-de-tokens","title":"Filtres de Tokens","text":"<pre><code>filters:\n  - name: \"whitespace_filter\"\n    type: \"whitespace\"\n    enabled: true\n  - name: \"comment_filter\"\n    type: \"comment\"\n    pattern: \"#.*\"\n    enabled: true\n</code></pre>"},{"location":"configuration/#configuration-des-alias-aliasesyml","title":"Configuration des Alias (aliases.yml)","text":"<p>Le fichier <code>config/aliases.yml</code> d\u00e9finit les alias en langage naturel qui sont mapp\u00e9s vers des expressions techniques normalis\u00e9es.</p>"},{"location":"configuration/#structure-des-alias","title":"Structure des Alias","text":"<pre><code>aliases:\n  actions:\n    execute_script:\n      variants:\n        - \"ex\u00e9cuter le script\"\n        - \"lancer le script\"\n        - \"d\u00e9marrer le script\"\n      normalized: \"ex\u00e9cuter\"\n\n    create_file:\n      variants:\n        - \"cr\u00e9er le fichier\"\n        - \"g\u00e9n\u00e9rer le fichier\"\n        - \"fabriquer le fichier\"\n      normalized: \"cr\u00e9er fichier\"\n\n    copy_file:\n      variants:\n        - \"copier le fichier\"\n        - \"dupliquer le fichier\"\n        - \"reproduire le fichier\"\n      normalized: \"copier fichier\"\n\n  validations:\n    success:\n      variants:\n        - \"succ\u00e8s\"\n        - \"r\u00e9ussi\"\n        - \"ok\"\n        - \"valide\"\n      normalized: \"retour 0\"\n\n    file_exists:\n      variants:\n        - \"le fichier est pr\u00e9sent\"\n        - \"le fichier existe\"\n        - \"fichier cr\u00e9\u00e9\"\n      normalized: \"fichier pr\u00e9sent\"\n\n    sql_ready:\n      variants:\n        - \"la base est pr\u00eate\"\n        - \"base de donn\u00e9es pr\u00eate\"\n        - \"bdd pr\u00eate\"\n      normalized: \"base pr\u00eate\"\n</code></pre>"},{"location":"configuration/#variables-denvironnement","title":"Variables d'Environnement","text":"<p>Vous pouvez surcharger la configuration via des variables d'environnement :</p> <pre><code># Chemin vers les fichiers de configuration\nexport SHTEST_CONFIG_PATH=\"config/patterns_hybrid.yml\"\nexport SHTEST_ALIASES_PATH=\"config/aliases.yml\"\n\n# Chemin vers les plugins\nexport SHTEST_PLUGIN_PATH=\"plugins/\"\n\n# Mode debug\nexport SHTEST_DEBUG=1\n\n# Moteur SQL par d\u00e9faut\nexport SHTEST_SQL_DRIVER=\"mysql\"\n</code></pre>"},{"location":"configuration/#configuration-des-plugins","title":"Configuration des Plugins","text":"<p>Les plugins peuvent \u00eatre configur\u00e9s via des fichiers YAML dans le r\u00e9pertoire <code>plugins/</code> :</p> <pre><code># plugins/custom_plugin.yml\nplugin:\n  name: \"custom_plugin\"\n  version: \"1.0.0\"\n  enabled: true\n\n  matchers:\n    - name: \"custom_validation\"\n      function: \"custom_matcher\"\n      priority: 10\n\n  visitors:\n    - name: \"custom_generator\"\n      class: \"CustomGenerator\"\n      enabled: true\n</code></pre>"},{"location":"configuration/#configuration-avancee","title":"Configuration Avanc\u00e9e","text":""},{"location":"configuration/#chargement-dynamique","title":"Chargement Dynamique","text":"<pre><code>from shtest_compiler.config import load_config, load_patterns, load_aliases\n\n# Charger la configuration globale\nconfig = load_config(\"config.ini\")\n\n# Charger les patterns\npatterns = load_patterns(\"config/patterns_hybrid.yml\")\n\n# Charger les alias\naliases = load_aliases(\"config/aliases.yml\")\n</code></pre>"},{"location":"configuration/#validation-de-configuration","title":"Validation de Configuration","text":"<pre><code>from shtest_compiler.config import validate_config\n\n# Valider la configuration\nerrors = validate_config(config)\nif errors:\n    print(\"Erreurs de configuration:\", errors)\n</code></pre>"},{"location":"configuration/#configuration-par-projet","title":"Configuration par Projet","text":"<p>Vous pouvez cr\u00e9er des fichiers de configuration sp\u00e9cifiques par projet :</p> <pre><code># Configuration pour le projet A\nSHTEST_CONFIG_PATH=\"projects/project_a/config.yml\"\nSHTEST_ALIASES_PATH=\"projects/project_a/aliases.yml\"\n\n# Configuration pour le projet B\nSHTEST_CONFIG_PATH=\"projects/project_b/config.yml\"\nSHTEST_ALIASES_PATH=\"projects/project_b/aliases.yml\"\n</code></pre>"},{"location":"configuration/#migration-depuis-lancienne-configuration","title":"Migration depuis l'Ancienne Configuration","text":""},{"location":"configuration/#ancien-systeme-python","title":"Ancien syst\u00e8me (Python)","text":"<pre><code># Ancien code\npatterns = {\n    \"action\": r\"Action:\\s*(.+)\",\n    \"validation\": r\"R\u00e9sultat:\\s*(.+)\"\n}\n</code></pre>"},{"location":"configuration/#nouveau-systeme-yaml","title":"Nouveau syst\u00e8me (YAML)","text":"<pre><code># Nouveau code\ntokens:\n  action:\n    pattern: \"Action:\\\\s*(.+)\"\n    type: \"ACTION\"\n  validation:\n    pattern: \"R\u00e9sultat:\\\\s*(.+)\"\n    type: \"VALIDATION\"\n</code></pre>"},{"location":"configuration/#diagnostic-de-configuration","title":"Diagnostic de Configuration","text":""},{"location":"configuration/#verification-de-la-configuration","title":"V\u00e9rification de la Configuration","text":"<pre><code># V\u00e9rifier que tous les fichiers de configuration sont pr\u00e9sents\npython -c \"\nfrom shtest_compiler.config import load_config, load_patterns, load_aliases\ntry:\n    config = load_config()\n    patterns = load_patterns()\n    aliases = load_aliases()\n    print('Configuration OK')\nexcept Exception as e:\n    print(f'Erreur: {e}')\n\"\n</code></pre>"},{"location":"configuration/#logs-de-configuration","title":"Logs de Configuration","text":"<pre><code># Activer les logs de configuration\nexport SHTEST_DEBUG=1\npython shtest.py tests/example.shtest\n</code></pre> <p>Pour plus d'informations sur l'utilisation des patterns et alias, consultez la documentation des regex.</p>"},{"location":"developer_quickstart/","title":"Guide de D\u00e9marrage Rapide pour D\u00e9veloppeurs","text":"<p>Ce guide vous aide \u00e0 comprendre rapidement l'architecture modulaire de KnightBatch et \u00e0 commencer \u00e0 d\u00e9velopper.</p>"},{"location":"developer_quickstart/#architecture-en-5-minutes","title":"Architecture en 5 Minutes","text":"<p>Si l'image ne s'affiche pas, voici le diagramme Mermaid :</p> <p></p>"},{"location":"developer_quickstart/#pipeline-de-compilation","title":"Pipeline de Compilation","text":"<ol> <li>Tokenisation : Le fichier <code>.shtest</code> est d\u00e9coup\u00e9 en tokens par le lexer configurable.</li> <li>Parsing : Les tokens sont analys\u00e9s par le parser modulaire pour produire un AST (arbre syntaxique).</li> <li>Construction de l'AST : L'AST builder valide et normalise la structure.</li> <li>Binding :</li> <li>Le binder relie chaque validation \u00e0 la bonne action (notamment pour <code>scope: last_action</code>).</li> <li>R\u00e9sout les variables et le contexte.</li> <li>Pr\u00e9pare l'AST pour la g\u00e9n\u00e9ration de code.</li> <li>Pourquoi c'est important ? Sans binding, certaines validations seraient orphelines ou mal appliqu\u00e9es, ce qui fausserait les r\u00e9sultats des tests.</li> <li>G\u00e9n\u00e9ration de code : Le g\u00e9n\u00e9rateur de shell parcourt l'AST li\u00e9 et produit un script shell ex\u00e9cutable.</li> <li>Ex\u00e9cution : Le script shell g\u00e9n\u00e9r\u00e9 peut \u00eatre ex\u00e9cut\u00e9 directement.</li> </ol>"},{"location":"developer_quickstart/#composants-principaux","title":"Composants Principaux","text":""},{"location":"developer_quickstart/#1-core-core","title":"1. Core (<code>core/</code>)","text":"<ul> <li>visitor.py : Pattern Visitor pour parcourir l'AST</li> <li>ast.py : N\u0153uds AST de base (ActionNode, ValidationNode, etc.)</li> <li>context.py : Contexte de compilation partag\u00e9</li> </ul>"},{"location":"developer_quickstart/#2-lexer-modulaire-parserlexer","title":"2. Lexer Modulaire (<code>parser/lexer/</code>)","text":"<ul> <li>configurable_lexer.py : Lexer principal</li> <li>pattern_loader.py : Chargement des patterns YAML</li> <li>filters.py : Filtres de tokens</li> <li>tokenizers.py : Tokenizers sp\u00e9cialis\u00e9s</li> </ul>"},{"location":"developer_quickstart/#3-parser-modulaire-parser","title":"3. Parser Modulaire (<code>parser/</code>)","text":"<ul> <li>configurable_parser.py : Parser principal</li> <li>ast_builder.py : Constructeur d'AST avec validation</li> <li>grammar.py : Grammaire configurable</li> </ul>"},{"location":"developer_quickstart/#4-compilateur-modulaire-compiler","title":"4. Compilateur Modulaire (<code>compiler/</code>)","text":"<ul> <li>compiler.py : Compilateur principal</li> <li>visitors/shell_visitor.py : G\u00e9n\u00e9rateur de code shell</li> <li>matchers/ : Matchers pour les validations</li> </ul>"},{"location":"developer_quickstart/#5-validation-ast-parserast_builderpy","title":"5. Validation AST (<code>parser/ast_builder.py</code>)","text":"<ul> <li>Validateurs : V\u00e9rification de la structure et du contenu</li> <li>Transformateurs : Normalisation et am\u00e9lioration de l'AST</li> <li>Gestion d'erreurs : Messages clairs et localis\u00e9s</li> </ul>"},{"location":"developer_quickstart/#exemple-de-workflow-complet","title":"Exemple de Workflow Complet","text":"<pre><code>from shtest_compiler.core.context import CompileContext\nfrom shtest_compiler.parser.lexer.configurable_lexer import ConfigurableLexer\nfrom shtest_compiler.parser.configurable_parser import ConfigurableParser\nfrom shtest_compiler.compiler.compiler import ModularCompiler\n\n# 1. Cr\u00e9er le contexte\ncontext = CompileContext()\n\n# 2. Configurer le lexer\nlexer = ConfigurableLexer(\"config/patterns_hybrid.yml\")\n\n# 3. Configurer le parser avec validation\nparser = ConfigurableParser(\"config/patterns_hybrid.yml\")\n\n# 4. Configurer le compilateur\ncompiler = ModularCompiler()\n\n# 5. Traiter un fichier\nwith open(\"test.shtest\", \"r\") as f:\n    content = f.read()\n\n# Tokenisation\ntokens = lexer.tokenize(content)\n\n# Parsing avec validation automatique\ntry:\n    ast = parser.parse_tokens(tokens)\nexcept ParseError as e:\n    print(f\"Erreur de validation: {e}\")\n    sys.exit(1)\n\n# Compilation\nshell_script = compiler.compile(ast)\n</code></pre>"},{"location":"developer_quickstart/#systeme-de-validation","title":"Syst\u00e8me de Validation","text":""},{"location":"developer_quickstart/#validateurs-integres","title":"Validateurs Int\u00e9gr\u00e9s","text":"<p>Le syst\u00e8me inclut des validateurs pour d\u00e9tecter les erreurs courantes :</p> <pre><code># Validation des \u00e9tapes\ndef _validate_steps(self, ast: ShtestFile) -&gt; List[str]:\n    \"\"\"Valide que les \u00e9tapes ont une structure appropri\u00e9e.\"\"\"\n    errors = []\n    for i, step in enumerate(ast.steps):\n        if not step.name or step.name.strip() == \"\":\n            errors.append(f\"Step {i+1} has empty name\")\n        if len(step.actions) == 0:\n            errors.append(f\"Step '{step.name}' has no actions\")\n    return errors\n\n# Validation des actions\ndef _validate_actions(self, ast: ShtestFile) -&gt; List[str]:\n    \"\"\"Valide que les actions ont une structure appropri\u00e9e.\"\"\"\n    errors = []\n    for step in ast.steps:\n        for i, action in enumerate(step.actions):\n            if action.command is None and action.result_expr is None:\n                errors.append(f\"Action {i+1} in step '{step.name}' has neither command nor result\")\n    return errors\n</code></pre>"},{"location":"developer_quickstart/#ajouter-un-validateur-personnalise","title":"Ajouter un Validateur Personnalis\u00e9","text":"<pre><code># 1. Cr\u00e9er la fonction de validation\ndef my_custom_validator(ast: ShtestFile) -&gt; List[str]:\n    errors = []\n    for step in ast.steps:\n        # Votre logique de validation\n        if some_condition:\n            errors.append(\"Mon message d'erreur\")\n    return errors\n\n# 2. L'ajouter au builder\nclass CustomASTBuilder(DefaultASTBuilder):\n    def __init__(self):\n        super().__init__()\n        self.validator.add_validator(my_custom_validator)\n</code></pre>"},{"location":"developer_quickstart/#ajouter-un-nouveau-matcher","title":"Ajouter un Nouveau Matcher","text":"<pre><code># 1. Cr\u00e9er la fonction matcher\ndef custom_matcher(validation_text: str) -&gt; str:\n    if \"mon validation\" in validation_text:\n        return \"custom_validation_type\"\n    return None\n\n# 2. Enregistrer dans le contexte\ncontext.add_matcher(\"custom_matcher\", custom_matcher)\n\n# 3. Ajouter dans le shell visitor\nclass CustomShellVisitor(ShellVisitor):\n    def visit_custom_validation(self, node):\n        return f\"# Validation personnalis\u00e9e: {node.validation}\"\n</code></pre>"},{"location":"developer_quickstart/#ajouter-un-nouveau-type-de-token","title":"Ajouter un Nouveau Type de Token","text":"<pre><code># Dans config/patterns_hybrid.yml\ntokens:\n  custom_token:\n    pattern: \"MonPattern:\\\\s*(.+)\"\n    type: \"CUSTOM_TOKEN\"\n    priority: 5\n</code></pre> <pre><code># Dans le AST builder\nclass CustomASTBuilder(ASTBuilder):\n    def build_custom_token(self, tokens):\n        return CustomNode(tokens[0].value)\n</code></pre>"},{"location":"developer_quickstart/#creer-un-plugin","title":"Cr\u00e9er un Plugin","text":"<p>Voir Cr\u00e9er un plugin pour un guide \u00e9tape par \u00e9tape.</p>"},{"location":"developer_quickstart/#tests","title":"Tests","text":""},{"location":"developer_quickstart/#tests-unitaires","title":"Tests Unitaires","text":"<pre><code># tests/unit/test_my_feature.py\nimport pytest\nfrom shtest_compiler.core.context import CompileContext\n\ndef test_my_matcher():\n    context = CompileContext()\n    context.add_matcher(\"my_matcher\", my_matcher_function)\n\n    result = context.get_matcher(\"my_matcher\")(\"ma validation\")\n    assert result == \"my_validation_type\"\n</code></pre>"},{"location":"developer_quickstart/#tests-dintegration","title":"Tests d'Int\u00e9gration","text":"<pre><code>def test_full_pipeline():\n    # Test complet du pipeline\n    context = CompileContext()\n    lexer = ConfigurableLexer(\"config/patterns_hybrid.yml\")\n    parser = ConfigurableParser(\"config/patterns_hybrid.yml\")\n    compiler = ModularCompiler()\n\n    content = \"Action: test ; R\u00e9sultat: success\"\n    tokens = lexer.tokenize(content)\n    ast = parser.parse_tokens(tokens)\n    result = compiler.compile(ast)\n\n    assert \"test\" in result\n    assert \"success\" in result\n</code></pre>"},{"location":"developer_quickstart/#tests-e2e","title":"Tests E2E","text":"<pre><code># tests/e2e/test_my_feature.py\ndef test_my_feature_e2e():\n    # Test avec un fichier .shtest r\u00e9el\n    result = subprocess.run([\n        \"python\", \"-m\", \"shtest_compiler.run_all\",\n        \"--input\", \"tests/e2e/my_feature.shtest\"\n    ], capture_output=True, text=True)\n\n    assert result.returncode == 0\n    assert \"Generated\" in result.stdout\n</code></pre>"},{"location":"developer_quickstart/#tests-negatifs","title":"Tests N\u00e9gatifs","text":"<pre><code># tests/e2e/ko/test_invalid_my_feature.shtest\n# Test avec syntaxe invalide pour votre fonctionnalit\u00e9\n\ndef test_invalid_my_feature():\n    result = subprocess.run([\n        \"python\", \"-m\", \"shtest_compiler.run_all\",\n        \"--input\", \"tests/e2e/ko/test_invalid_my_feature.shtest\"\n    ], capture_output=True, text=True)\n\n    assert result.returncode == 1\n    assert \"error\" in result.stderr.lower()\n</code></pre>"},{"location":"developer_quickstart/#debug-et-diagnostic","title":"Debug et Diagnostic","text":""},{"location":"developer_quickstart/#mode-debug","title":"Mode Debug","text":"<pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Tous les composants loggent leurs actions\n</code></pre>"},{"location":"developer_quickstart/#inspection-de-last","title":"Inspection de l'AST","text":"<pre><code># Afficher l'AST\ndef print_ast(node, indent=0):\n    print(\" \" * indent + str(node))\n    if hasattr(node, 'children'):\n        for child in node.children:\n            print_ast(child, indent + 2)\n\nprint_ast(ast)\n</code></pre>"},{"location":"developer_quickstart/#validation-des-tokens","title":"Validation des Tokens","text":"<pre><code># Afficher les tokens g\u00e9n\u00e9r\u00e9s\nfor token in tokens:\n    print(f\"{token.kind}: '{token.value}' (line {token.lineno})\")\n</code></pre>"},{"location":"developer_quickstart/#outils-de-debug-integres","title":"Outils de Debug Int\u00e9gr\u00e9s","text":"<pre><code># Debug d'un fichier sp\u00e9cifique\npython tests/e2e/ko/debug_parser.py\n\n# Mode debug du compilateur\npython -m shtest_compiler.run_all --input file.shtest --debug\n</code></pre>"},{"location":"developer_quickstart/#gestion-derreurs","title":"Gestion d'Erreurs","text":""},{"location":"developer_quickstart/#types-derreurs","title":"Types d'Erreurs","text":"<pre><code>from shtest_compiler.parser.core import ParseError\n\n# Erreur de parsing\nraise ParseError(\"Message d'erreur\", lineno=10, column=5)\n\n# Erreur de validation\nraise ParseError(\"AST validation failed: \" + \"; \".join(errors))\n</code></pre>"},{"location":"developer_quickstart/#codes-de-sortie","title":"Codes de Sortie","text":"<pre><code>import sys\n\n# Succ\u00e8s\nsys.exit(0)\n\n# Erreur de validation\nsys.exit(1)\n\n# Erreur de configuration\nsys.exit(2)\n\n# Erreur syst\u00e8me\nsys.exit(3)\n</code></pre>"},{"location":"developer_quickstart/#execution-des-tests","title":"Ex\u00e9cution des Tests","text":""},{"location":"developer_quickstart/#suite-complete","title":"Suite Compl\u00e8te","text":"<pre><code># Tous les tests\npython -m pytest tests/\n\n# Tests unitaires uniquement\npython -m pytest tests/unit/\n\n# Tests E2E\npython src/shtest_compiler/run_tests.py --all\n\n# Tests n\u00e9gatifs\npython tests/e2e/ko/run_ko_tests.py\n</code></pre>"},{"location":"developer_quickstart/#tests-specifiques","title":"Tests Sp\u00e9cifiques","text":"<pre><code># Test d'un module sp\u00e9cifique\npython -m pytest tests/unit/test_parser.py -v\n\n# Test avec couverture\npython -m pytest tests/unit/ --cov=shtest_compiler\n\n# Test en mode debug\npython -m pytest tests/unit/ -s --log-cli-level=DEBUG\n</code></pre>"},{"location":"modular_architecture/","title":"Architecture Modulaire","text":"<p>Cette page documente l'architecture modulaire de KnightBatch, con\u00e7ue pour offrir une extensibilit\u00e9 maximale et une s\u00e9paration claire des responsabilit\u00e9s.</p>"},{"location":"modular_architecture/#vue-densemble","title":"Vue d'ensemble","text":"<p>L'architecture modulaire de KnightBatch est organis\u00e9e en plusieurs couches\u00a0:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Interface Utilisateur                    \u2502\n\u2502  (CLI, VS Code Extension, API)                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Compilateur Modulaire                    \u2502\n\u2502  (Visiteurs sp\u00e9cialis\u00e9s, g\u00e9n\u00e9rateurs de code)              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Parser Modulaire                        \u2502\n\u2502  (Grammaire configurable, constructeur AST)                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Lexer Modulaire                         \u2502\n\u2502  (Tokenisation configurable, patterns, filtres)            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         Core                                \u2502\n\u2502  (Pattern Visitor, AST nodes, contexte)                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"modular_architecture/#pipeline-de-compilation","title":"Pipeline de Compilation","text":"<ol> <li>Tokenisation\u00a0: Le fichier <code>.shtest</code> est d\u00e9coup\u00e9 en tokens par le lexer configurable.</li> <li>Parsing\u00a0: Les tokens sont analys\u00e9s par le parser modulaire pour produire un AST (arbre syntaxique).</li> <li>Construction de l'AST\u00a0: L'AST builder valide et normalise la structure.</li> <li>Binding\u00a0:</li> <li>Le binder relie chaque validation \u00e0 la bonne action (notamment pour <code>scope: last_action</code>).</li> <li>R\u00e9sout les variables et le contexte.</li> <li>Pr\u00e9pare l'AST pour la g\u00e9n\u00e9ration de code.</li> <li>Pourquoi c'est important\u00a0? Sans binding, certaines validations seraient orphelines ou mal appliqu\u00e9es, ce qui fausserait les r\u00e9sultats des tests.</li> <li>G\u00e9n\u00e9ration de code\u00a0: Le g\u00e9n\u00e9rateur de shell parcourt l'AST li\u00e9 et produit un script shell ex\u00e9cutable.</li> <li>Ex\u00e9cution\u00a0: Le script shell g\u00e9n\u00e9r\u00e9 peut \u00eatre ex\u00e9cut\u00e9 directement.</li> </ol>"},{"location":"modular_architecture/#detail-du-binding","title":"D\u00e9tail du Binding","text":"<p>Le binding est une \u00e9tape cl\u00e9 qui garantit la coh\u00e9rence logique du sc\u00e9nario\u00a0: - Associe chaque validation \u00e0 la bonne action (surtout pour les validations locales) - R\u00e9sout les r\u00e9f\u00e9rences de variables et de contexte - D\u00e9tecte et signale les validations orphelines ou mal plac\u00e9es - Pr\u00e9pare l'AST pour une g\u00e9n\u00e9ration de code fiable</p> <p>Exemple\u00a0: sans binding, une validation <code>stdout contient OK</code> pourrait \u00eatre appliqu\u00e9e \u00e0 la mauvaise action, ou rester sans effet.</p>"},{"location":"modular_architecture/#core-fondations","title":"Core - Fondations","text":""},{"location":"modular_architecture/#pattern-visitor","title":"Pattern Visitor","text":"<p>Le pattern Visitor est impl\u00e9ment\u00e9 dans <code>core/visitor.py</code> et permet de parcourir l'AST de mani\u00e8re extensible\u00a0:</p> <pre><code>from shtest_compiler.core.visitor import Visitor\n\nclass MyVisitor(Visitor):\n    def visit_action_node(self, node):\n        # Traitement personnalis\u00e9 pour les n\u0153uds d'action\n        pass\n\n    def visit_validation_node(self, node):\n        # Traitement personnalis\u00e9 pour les n\u0153uds de validation\n        pass\n</code></pre>"},{"location":"modular_architecture/#nuds-ast","title":"N\u0153uds AST","text":"<p>Les n\u0153uds AST de base sont d\u00e9finis dans <code>core/ast.py</code>\u00a0:</p> <ul> <li><code>ActionNode</code>\u00a0: Repr\u00e9sente une action \u00e0 ex\u00e9cuter</li> <li><code>ValidationNode</code>\u00a0: Repr\u00e9sente une validation \u00e0 effectuer</li> <li><code>FileNode</code>\u00a0: Repr\u00e9sente une op\u00e9ration sur fichier</li> <li><code>VariableNode</code>\u00a0: Repr\u00e9sente une variable</li> <li><code>SQLNode</code>\u00a0: Repr\u00e9sente une op\u00e9ration SQL</li> </ul>"},{"location":"modular_architecture/#contexte-de-compilation","title":"Contexte de Compilation","text":"<p>Le <code>CompileContext</code> dans <code>core/context.py</code> maintient l'\u00e9tat global pendant la compilation\u00a0:</p> <pre><code>from shtest_compiler.core.context import CompileContext\n\ncontext = CompileContext()\ncontext.set_variable(\"SQL_DRIVER\", \"mysql\")\ncontext.add_matcher(\"custom_matcher\", my_matcher_function)\n</code></pre>"},{"location":"modular_architecture/#lexer-modulaire","title":"Lexer Modulaire","text":""},{"location":"modular_architecture/#architecture","title":"Architecture","text":"<p>Le lexer modulaire est organis\u00e9 dans <code>parser/lexer/</code>\u00a0:</p> <ul> <li><code>core.py</code>\u00a0: Interfaces et types de base</li> <li><code>configurable_lexer.py</code>\u00a0: Lexer principal configurable</li> <li><code>pattern_loader.py</code>\u00a0: Chargement des patterns depuis YAML</li> <li><code>filters.py</code>\u00a0: Filtres de tokens</li> <li><code>tokenizers.py</code>\u00a0: Tokenizers sp\u00e9cialis\u00e9s</li> </ul>"},{"location":"modular_architecture/#configuration","title":"Configuration","text":"<p>Les patterns sont d\u00e9finis dans <code>config/patterns_hybrid.yml</code>\u00a0:</p> <pre><code>tokens:\n  action:\n    pattern: \"Action:\\\\s*(.+)\"\n    type: \"ACTION\"\n  validation:\n    pattern: \"R\u00e9sultat:\\\\s*(.+)\"\n    type: \"VALIDATION\"\n</code></pre>"},{"location":"modular_architecture/#utilisation","title":"Utilisation","text":"<pre><code>from shtest_compiler.parser.lexer.configurable_lexer import ConfigurableLexer\n\nlexer = ConfigurableLexer(\"config/patterns_hybrid.yml\")\ntokens = lexer.tokenize(\"Action: test ; R\u00e9sultat: success\")\n</code></pre>"},{"location":"modular_architecture/#parser-modulaire","title":"Parser Modulaire","text":""},{"location":"modular_architecture/#architecture_1","title":"Architecture","text":"<p>Le parser modulaire est organis\u00e9 dans <code>parser/</code>\u00a0:</p> <ul> <li><code>configurable_parser.py</code>\u00a0: Parser principal</li> <li><code>ast_builder.py</code>\u00a0: Constructeur d'AST configurable</li> <li><code>grammar.py</code>\u00a0: Grammaire configurable</li> <li><code>core.py</code>\u00a0: Interfaces de base</li> </ul>"},{"location":"modular_architecture/#grammaire-configurable","title":"Grammaire Configurable","text":"<p>La grammaire est d\u00e9finie dans <code>config/patterns_hybrid.yml</code>\u00a0:</p> <pre><code>grammar:\n  rules:\n    - name: \"action_validation\"\n      pattern: \"action:validation\"\n      builder: \"action_validation_builder\"\n</code></pre>"},{"location":"modular_architecture/#constructeur-ast","title":"Constructeur AST","text":"<pre><code>from shtest_compiler.parser.ast_builder import ASTBuilder\n\nclass CustomASTBuilder(ASTBuilder):\n    def build_action_validation(self, action_tokens, validation_tokens):\n        # Construction personnalis\u00e9e d'un n\u0153ud action-validation\n        return ActionValidationNode(action_tokens, validation_tokens)\n</code></pre>"},{"location":"modular_architecture/#compilateur-modulaire","title":"Compilateur Modulaire","text":""},{"location":"modular_architecture/#architecture_2","title":"Architecture","text":"<p>Le compilateur modulaire est organis\u00e9 dans <code>compiler/</code>\u00a0:</p> <ul> <li><code>compiler.py</code>\u00a0: Compilateur principal</li> <li><code>visitors/</code>\u00a0: Visiteurs sp\u00e9cialis\u00e9s</li> <li><code>matchers/</code>\u00a0: Matchers pour les validations</li> <li><code>shell_generator.py</code>\u00a0: G\u00e9n\u00e9rateur de code shell</li> </ul>"},{"location":"modular_architecture/#visiteurs-specialises","title":"Visiteurs Sp\u00e9cialis\u00e9s","text":"<pre><code>from shtest_compiler.compiler.visitors.shell_visitor import ShellVisitor\n\nclass CustomShellVisitor(ShellVisitor):\n    def visit_action_node(self, node):\n        # G\u00e9n\u00e9ration personnalis\u00e9e de code shell\n        return f\"custom_action '{node.action}'\"\n</code></pre>"},{"location":"modular_architecture/#matchers","title":"Matchers","text":"<p>Les matchers sont des fonctions qui reconnaissent des patterns de validation\u00a0:</p> <pre><code>def sql_matcher(validation_text):\n    if \"base pr\u00eate\" in validation_text:\n        return \"sql_ready\"\n    return None\n\n# Enregistrement du matcher\ncontext.add_matcher(\"sql_matcher\", sql_matcher)\n</code></pre>"},{"location":"modular_architecture/#systeme-de-plugins","title":"Syst\u00e8me de Plugins","text":""},{"location":"modular_architecture/#architecture-des-plugins","title":"Architecture des Plugins","text":"<p>Les plugins sont organis\u00e9s dans <code>plugins/</code> et peuvent \u00e9tendre\u00a0:</p> <ul> <li>Matchers\u00a0: Nouvelles validations</li> <li>Tokenizers\u00a0: Nouveaux types de tokens</li> <li>Visitors\u00a0: Nouveaux g\u00e9n\u00e9rateurs de code</li> <li>AST Builders\u00a0: Nouveaux constructeurs d'AST</li> </ul>"},{"location":"modular_architecture/#creation-dun-plugin","title":"Cr\u00e9ation d'un Plugin","text":"<pre><code># plugins/custom_plugin.py\nfrom shtest_compiler.core.context import CompileContext\n\ndef register_plugin(context: CompileContext):\n    # Enregistrer de nouveaux matchers\n    context.add_matcher(\"custom_validation\", custom_validation_matcher)\n\n    # Enregistrer de nouveaux visiteurs\n    context.add_visitor(\"custom_generator\", CustomGenerator())\n</code></pre>"},{"location":"modular_architecture/#chargement-des-plugins","title":"Chargement des Plugins","text":"<pre><code>from shtest_compiler.plugins import load_plugins\n\ncontext = CompileContext()\nload_plugins(context)\n</code></pre>"},{"location":"modular_architecture/#handler-requirements-documentation","title":"Handler Requirements Documentation","text":"<p>Each handler (action or validation) can have its requirements documented in a <code>handler_requirements.yml</code> file in the <code>config/</code> directory of the core or any plugin.</p> <ul> <li>The loader merges all these YAMLs into a single requirements dictionary.</li> <li>This allows for automatic documentation, validation, and introspection of handler parameters.</li> </ul> <p>Example: <pre><code>example_handler:\n  description: \"Does something.\"\n  params:\n    - name: foo\n      type: str\n      required: true\n      description: \"A required parameter.\"\n</code></pre></p> <p>Access in code: <pre><code>from shtest_compiler.command_loader import get_handler_requirements\nreqs = get_handler_requirements()\n</code></pre></p>"},{"location":"modular_architecture/#configuration-avancee","title":"Configuration Avanc\u00e9e","text":""},{"location":"modular_architecture/#fichiers-de-configuration","title":"Fichiers de Configuration","text":"<ul> <li><code>config/patterns_hybrid.yml</code>\u00a0: Patterns et grammaire</li> <li><code>config/aliases.yml</code>\u00a0: Alias en langage naturel</li> <li><code>config.ini</code>\u00a0: Configuration globale</li> </ul>"},{"location":"modular_architecture/#variables-denvironnement","title":"Variables d'Environnement","text":"<ul> <li><code>SHTEST_CONFIG_PATH</code>\u00a0: Chemin vers les fichiers de configuration</li> <li><code>SHTEST_PLUGIN_PATH</code>\u00a0: Chemin vers les plugins</li> <li><code>SHTEST_DEBUG</code>\u00a0: Mode debug (1 pour activer)</li> </ul>"},{"location":"modular_architecture/#tests-et-validation","title":"Tests et Validation","text":""},{"location":"modular_architecture/#tests-unitaires","title":"Tests Unitaires","text":"<pre><code># Tests du core\npython -m pytest tests/unit/test_core.py\n\n# Tests du lexer modulaire\npython -m pytest tests/unit/test_modular_lexer.py\n\n# Tests du parser modulaire\npython -m pytest tests/unit/test_modular_parser.py\n\n# Tests du syst\u00e8me complet\npython -m pytest tests/unit/test_modular_system.py\n</code></pre>"},{"location":"modular_architecture/#tests-dintegration","title":"Tests d'Int\u00e9gration","text":"<pre><code># Ex\u00e9cuter tous les scripts shell g\u00e9n\u00e9r\u00e9s\nfor test in tests/integration/*.sh; do\n    bash \"$test\"\ndone\n</code></pre>"},{"location":"plugin_tutorial/","title":"Tutoriel : Cr\u00e9er un Plugin KnightBatch","text":"<p>Ce tutoriel vous guide \u00e0 travers la cr\u00e9ation d'un plugin complet pour KnightBatch, depuis la conception jusqu'au d\u00e9ploiement.</p>"},{"location":"plugin_tutorial/#vue-densemble","title":"Vue d'Ensemble","text":"<p>Les plugins KnightBatch permettent d'\u00e9tendre les fonctionnalit\u00e9s du compilateur avec : - Nouveaux types d'actions personnalis\u00e9es - Validations sp\u00e9cialis\u00e9es pour vos besoins - G\u00e9n\u00e9rateurs de code sp\u00e9cifiques - Int\u00e9grations externes (APIs, bases de donn\u00e9es, etc.)</p>"},{"location":"plugin_tutorial/#architecture-dun-plugin","title":"Architecture d'un Plugin","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Plugin        \u2502\n\u2502   Principal     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Patterns      \u2502\n\u2502   YAML          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Handlers      \u2502\n\u2502   (Actions)     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Matchers      \u2502\n\u2502   (Validations) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"plugin_tutorial/#etape-1-planifier-votre-plugin","title":"\u00c9tape 1 : Planifier votre Plugin","text":""},{"location":"plugin_tutorial/#definir-les-fonctionnalites","title":"D\u00e9finir les Fonctionnalit\u00e9s","text":"<p>Avant de commencer, identifiez :</p> <ol> <li>Actions : Que voulez-vous que votre plugin puisse faire ?</li> <li>Validations : Comment voulez-vous v\u00e9rifier les r\u00e9sultats ?</li> <li>Patterns : Quelle syntaxe utiliserez-vous dans les fichiers <code>.shtest</code> ?</li> <li>D\u00e9pendances : Avez-vous besoin de biblioth\u00e8ques externes ?</li> </ol>"},{"location":"plugin_tutorial/#exemple-plugin-de-notification","title":"Exemple : Plugin de Notification","text":"<p>Nous allons cr\u00e9er un plugin qui permet d'envoyer des notifications : - Action : Envoyer une notification Slack/Email - Validation : V\u00e9rifier que la notification a \u00e9t\u00e9 envoy\u00e9e - Pattern : <code>Envoyer une notification: message</code> - Validation : <code>La notification a \u00e9t\u00e9 envoy\u00e9e</code></p>"},{"location":"plugin_tutorial/#etape-2-creer-la-structure-du-plugin","title":"\u00c9tape 2 : Cr\u00e9er la Structure du Plugin","text":""},{"location":"plugin_tutorial/#structure-des-dossiers","title":"Structure des Dossiers","text":"<pre><code>src/shtest_compiler/plugins/notification/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 patterns_notification.yml\n\u251c\u2500\u2500 handlers/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 send_notification.py\n\u2502   \u2514\u2500\u2500 verify_notification.py\n\u2514\u2500\u2500 matchers/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 notification_matcher.py\n</code></pre>"},{"location":"plugin_tutorial/#creer-le-dossier-principal","title":"Cr\u00e9er le Dossier Principal","text":"<pre><code>mkdir -p src/shtest_compiler/plugins/notification\nmkdir -p src/shtest_compiler/plugins/notification/config\nmkdir -p src/shtest_compiler/plugins/notification/handlers\nmkdir -p src/shtest_compiler/plugins/notification/matchers\n</code></pre>"},{"location":"plugin_tutorial/#etape-3-definir-les-patterns-yaml","title":"\u00c9tape 3 : D\u00e9finir les Patterns YAML","text":""},{"location":"plugin_tutorial/#fichier-patterns_notificationyml","title":"Fichier <code>patterns_notification.yml</code>","text":"<pre><code># Patterns pour les actions de notification\nactions:\n  send_notification:\n    pattern: \"Envoyer une notification:\\\\s*(.+)\"\n    handler: \"notification.handlers.send_notification.send_notification_handler\"\n    description: \"Envoie une notification via le syst\u00e8me configur\u00e9\"\n\n  send_slack_notification:\n    pattern: \"Envoyer une notification Slack:\\\\s*(.+)\"\n    handler: \"notification.handlers.send_notification.send_slack_handler\"\n    description: \"Envoie une notification Slack sp\u00e9cifique\"\n\n# Patterns pour les validations\nvalidations:\n  notification_sent:\n    pattern: \"La notification a \u00e9t\u00e9 envoy\u00e9e\"\n    handler: \"notification.matchers.notification_matcher.verify_notification_sent\"\n    description: \"V\u00e9rifie qu'une notification a \u00e9t\u00e9 envoy\u00e9e avec succ\u00e8s\"\n\n  slack_notification_sent:\n    pattern: \"La notification Slack a \u00e9t\u00e9 envoy\u00e9e\"\n    handler: \"notification.matchers.notification_matcher.verify_slack_sent\"\n    description: \"V\u00e9rifie qu'une notification Slack a \u00e9t\u00e9 envoy\u00e9e\"\n</code></pre>"},{"location":"plugin_tutorial/#etape-4-creer-les-handlers-daction","title":"\u00c9tape 4 : Cr\u00e9er les Handlers d'Action","text":""},{"location":"plugin_tutorial/#handler-principal-handlerssend_notificationpy","title":"Handler Principal (<code>handlers/send_notification.py</code>)","text":"<p><pre><code>from shtest_compiler.ast.shell_framework_ast import ActionNode\n\nclass SendNotificationAction(ActionNode):\n    def __init__(self, message):\n        self.message = message\n\n    def to_shell(self):\n        # G\u00e9n\u00e8re la commande shell pour envoyer la notification\n        return f\"echo 'Notification: {self.message}' &gt;&gt; /tmp/notifications.log\"\n\ndef handle(params):\n    message = params[\"message\"]\n    return SendNotificationAction(message)\n</code></pre> - Le handler doit accepter uniquement <code>params</code> (pas de <code>context</code> sauf besoin avanc\u00e9). - Le handler doit retourner un objet <code>ActionNode</code> avec une m\u00e9thode <code>to_shell()</code> pour les actions shell. - Ne pas utiliser <code>os.environ</code> ou des variables globales dans vos handlers.</p>"},{"location":"plugin_tutorial/#etape-5-creer-les-matchers-de-validation","title":"\u00c9tape 5 : Cr\u00e9er les Matchers de Validation","text":""},{"location":"plugin_tutorial/#matcher-principal-matchersnotification_matcherpy","title":"Matcher Principal (<code>matchers/notification_matcher.py</code>)","text":"<pre><code>\"\"\"\nMatchers pour les validations de notification.\n\"\"\"\n\nimport os\nfrom typing import Dict, Any, Optional\nfrom shtest_compiler.core.context import CompileContext\n\n\ndef verify_notification_sent(context: CompileContext, validation_text: str, **kwargs) -&gt; str:\n    \"\"\"\n    V\u00e9rifie qu'une notification a \u00e9t\u00e9 envoy\u00e9e avec succ\u00e8s.\n\n    Args:\n        context: Contexte de compilation\n        validation_text: Texte de validation\n        **kwargs: Arguments suppl\u00e9mentaires\n\n    Returns:\n        Code shell pour v\u00e9rifier la notification\n    \"\"\"\n    notification_type = context.get_variable(\"NOTIFICATION_TYPE\", \"log\")\n\n    if notification_type == \"slack\":\n        return _verify_slack_notification()\n    elif notification_type == \"email\":\n        return _verify_email_notification()\n    else:\n        return _verify_log_notification()\n\n\ndef verify_slack_sent(context: CompileContext, validation_text: str, **kwargs) -&gt; str:\n    \"\"\"\n    V\u00e9rifie sp\u00e9cifiquement qu'une notification Slack a \u00e9t\u00e9 envoy\u00e9e.\n\n    Args:\n        context: Contexte de compilation\n        validation_text: Texte de validation\n        **kwargs: Arguments suppl\u00e9mentaires\n\n    Returns:\n        Code shell pour v\u00e9rifier la notification Slack\n    \"\"\"\n    return _verify_slack_notification()\n\n\ndef _verify_slack_notification() -&gt; str:\n    \"\"\"G\u00e9n\u00e8re le code shell pour v\u00e9rifier une notification Slack.\"\"\"\n\n    return \"\"\"# V\u00e9rifier notification Slack\nif [ -f /tmp/slack_notification_sent ]; then\n    echo \"Notification Slack v\u00e9rifi\u00e9e\"\n    rm /tmp/slack_notification_sent\n    exit 0\nelse\n    echo \"Notification Slack non trouv\u00e9e\" &gt;&amp;2\n    exit 1\nfi\"\"\"\n\n\ndef _verify_email_notification() -&gt; str:\n    \"\"\"G\u00e9n\u00e8re le code shell pour v\u00e9rifier une notification Email.\"\"\"\n\n    return \"\"\"# V\u00e9rifier notification Email\nif [ -f /tmp/email_notification_sent ]; then\n    echo \"Notification Email v\u00e9rifi\u00e9e\"\n    rm /tmp/email_notification_sent\n    exit 0\nelse\n    echo \"Notification Email non trouv\u00e9e\" &gt;&amp;2\n    exit 1\nfi\"\"\"\n\n\ndef _verify_log_notification() -&gt; str:\n    \"\"\"G\u00e9n\u00e8re le code shell pour v\u00e9rifier une notification logg\u00e9e.\"\"\"\n\n    return \"\"\"# V\u00e9rifier notification logg\u00e9e\nif [ -f /tmp/notifications.log ] &amp;&amp; grep -q \"NOTIFICATION:\" /tmp/notifications.log; then\n    echo \"Notification logg\u00e9e v\u00e9rifi\u00e9e\"\n    exit 0\nelse\n    echo \"Notification logg\u00e9e non trouv\u00e9e\" &gt;&amp;2\n    exit 1\nfi\"\"\"\n</code></pre>"},{"location":"plugin_tutorial/#etape-6-creer-le-point-dentree-du-plugin","title":"\u00c9tape 6 : Cr\u00e9er le Point d'Entr\u00e9e du Plugin","text":""},{"location":"plugin_tutorial/#fichier-__init__py-principal","title":"Fichier <code>__init__.py</code> Principal","text":"<pre><code>\"\"\"\nPlugin de notification pour KnightBatch.\n\nCe plugin permet d'envoyer des notifications via diff\u00e9rents canaux\n(Slack, Email, Log) et de valider leur envoi.\n\"\"\"\n\nfrom typing import Dict, Any\nfrom shtest_compiler.core.context import CompileContext\n\n\ndef register_plugin(context: CompileContext) -&gt; None:\n    \"\"\"\n    Enregistre le plugin de notification dans le contexte.\n\n    Args:\n        context: Contexte de compilation o\u00f9 enregistrer le plugin\n    \"\"\"\n    # Enregistrer les handlers d'action\n    _register_action_handlers(context)\n\n    # Enregistrer les matchers de validation\n    _register_validation_matchers(context)\n\n    # D\u00e9finir les variables par d\u00e9faut\n    _set_default_variables(context)\n\n    print(\"Plugin de notification enregistr\u00e9 avec succ\u00e8s\")\n\n\ndef _register_action_handlers(context: CompileContext) -&gt; None:\n    \"\"\"Enregistre les handlers d'action.\"\"\"\n\n    from .handlers.send_notification import (\n        send_notification_handler,\n        send_slack_handler\n    )\n\n    context.register_action_handler(\"send_notification\", send_notification_handler)\n    context.register_action_handler(\"send_slack_notification\", send_slack_handler)\n\n\ndef _register_validation_matchers(context: CompileContext) -&gt; None:\n    \"\"\"Enregistre les matchers de validation.\"\"\"\n\n    from .matchers.notification_matcher import (\n        verify_notification_sent,\n        verify_slack_sent\n    )\n\n    context.register_validation_matcher(\"notification_sent\", verify_notification_sent)\n    context.register_validation_matcher(\"slack_notification_sent\", verify_slack_sent)\n\n\ndef _set_default_variables(context: CompileContext) -&gt; None:\n    \"\"\"D\u00e9finit les variables par d\u00e9faut du plugin.\"\"\"\n\n    defaults = {\n        \"NOTIFICATION_TYPE\": \"log\",\n        \"NOTIFICATION_URL\": \"\",\n        \"SLACK_WEBHOOK_URL\": \"\",\n        \"SLACK_CHANNEL\": \"#general\",\n        \"NOTIFICATION_EMAIL\": \"\"\n    }\n\n    for key, value in defaults.items():\n        if not context.get_variable(key):\n            context.set_variable(key, value)\n</code></pre>"},{"location":"plugin_tutorial/#etape-7-configurer-le-plugin","title":"\u00c9tape 7 : Configurer le Plugin","text":""},{"location":"plugin_tutorial/#fichier-de-configuration","title":"Fichier de Configuration","text":"<p>Cr\u00e9ez un fichier de configuration pour votre plugin :</p> <pre><code># config/notification_config.yml\nnotification:\n  # Type de notification par d\u00e9faut\n  default_type: \"log\"\n\n  # Configuration Slack\n  slack:\n    webhook_url: \"${SLACK_WEBHOOK_URL}\"\n    default_channel: \"#general\"\n    username: \"KnightBatch Bot\"\n\n  # Configuration Email\n  email:\n    smtp_server: \"localhost\"\n    smtp_port: 25\n    from_address: \"knightbatch@example.com\"\n\n  # Configuration Log\n  log:\n    file_path: \"/tmp/notifications.log\"\n    format: \"[{timestamp}] {type}: {message}\"\n</code></pre>"},{"location":"plugin_tutorial/#variables-denvironnement","title":"Variables d'Environnement","text":"<pre><code># Configuration Slack\nexport SLACK_WEBHOOK_URL=\"https://hooks.slack.com/services/YOUR/WEBHOOK/URL\"\nexport SLACK_CHANNEL=\"#alerts\"\n\n# Configuration Email\nexport NOTIFICATION_EMAIL=\"admin@example.com\"\nexport SMTP_SERVER=\"smtp.example.com\"\n\n# Type de notification par d\u00e9faut\nexport NOTIFICATION_TYPE=\"slack\"\n</code></pre>"},{"location":"plugin_tutorial/#etape-8-tester-votre-plugin","title":"\u00c9tape 8 : Tester votre Plugin","text":""},{"location":"plugin_tutorial/#fichier-de-test-shtest","title":"Fichier de Test <code>.shtest</code>","text":"<pre><code># tests/notification_test.shtest\n\u00c9tape: Test des notifications\n  Action: Envoyer une notification: Test de notification KnightBatch\n  V\u00e9rifier: La notification a \u00e9t\u00e9 envoy\u00e9e\n\n\u00c9tape: Test des notifications Slack\n  Action: Envoyer une notification Slack: Test Slack depuis KnightBatch\n  V\u00e9rifier: La notification Slack a \u00e9t\u00e9 envoy\u00e9e\n\n\u00c9tape: Test avec variables\n  Action: D\u00e9finir la variable: message = \"Notification avec variable\"\n  Action: Envoyer une notification: ${message}\n  V\u00e9rifier: La notification a \u00e9t\u00e9 envoy\u00e9e\n</code></pre>"},{"location":"plugin_tutorial/#tests-unitaires","title":"Tests Unitaires","text":"<pre><code># tests/unit/test_notification_plugin.py\nimport pytest\nfrom shtest_compiler.core.context import CompileContext\nfrom shtest_compiler.plugins.notification import register_plugin\n\n\ndef test_notification_plugin_registration():\n    \"\"\"Test l'enregistrement du plugin de notification.\"\"\"\n    context = CompileContext()\n    register_plugin(context)\n\n    # V\u00e9rifier que les handlers sont enregistr\u00e9s\n    assert context.get_action_handler(\"send_notification\") is not None\n    assert context.get_action_handler(\"send_slack_notification\") is not None\n\n    # V\u00e9rifier que les matchers sont enregistr\u00e9s\n    assert context.get_validation_matcher(\"notification_sent\") is not None\n    assert context.get_validation_matcher(\"slack_notification_sent\") is not None\n\n\ndef test_notification_handler():\n    \"\"\"Test le handler de notification.\"\"\"\n    context = CompileContext()\n    register_plugin(context)\n\n    handler = context.get_action_handler(\"send_notification\")\n    result = handler(context, \"Test message\")\n\n    assert \"Test message\" in result\n    assert \"echo\" in result\n\n\ndef test_slack_handler():\n    \"\"\"Test le handler Slack.\"\"\"\n    context = CompileContext()\n    context.set_variable(\"SLACK_WEBHOOK_URL\", \"https://test.com\")\n    register_plugin(context)\n\n    handler = context.get_action_handler(\"send_slack_notification\")\n    result = handler(context, \"Test Slack\")\n\n    assert \"curl\" in result\n    assert \"Test Slack\" in result\n</code></pre>"},{"location":"plugin_tutorial/#tests-e2e","title":"Tests E2E","text":"<pre><code># Compiler et tester le plugin\npython -m shtest_compiler.run_all --input tests/notification_test.shtest\n\n# V\u00e9rifier la syntaxe\npython src/verify_syntax.py tests/notification_test.shtest\n\n# Ex\u00e9cuter le script g\u00e9n\u00e9r\u00e9\nbash output/notification_test.sh\n</code></pre>"},{"location":"plugin_tutorial/#etape-9-deployer-votre-plugin","title":"\u00c9tape 9 : D\u00e9ployer votre Plugin","text":""},{"location":"plugin_tutorial/#installation","title":"Installation","text":"<ol> <li> <p>Copier le plugin dans le r\u00e9pertoire des plugins : <pre><code>cp -r src/shtest_compiler/plugins/notification /path/to/knightbatch/plugins/\n</code></pre></p> </li> <li> <p>Enregistrer le plugin dans la configuration principale : <pre><code># config/plugins.yml\nplugins:\n  - notification\n  - file\n  - sql\n</code></pre></p> </li> <li> <p>Configurer les variables d'environnement : <pre><code>export SLACK_WEBHOOK_URL=\"your_webhook_url\"\nexport NOTIFICATION_TYPE=\"slack\"\n</code></pre></p> </li> </ol>"},{"location":"plugin_tutorial/#utilisation","title":"Utilisation","text":"<pre><code># Exemple d'utilisation du plugin\n\u00c9tape: Notifier le succ\u00e8s d'un test\n  Action: Ex\u00e9cuter le script: ./my_test.sh\n  V\u00e9rifier: Le code de retour est 0\n  Action: Envoyer une notification: Test r\u00e9ussi - $(date)\n  V\u00e9rifier: La notification a \u00e9t\u00e9 envoy\u00e9e\n</code></pre>"},{"location":"plugin_tutorial/#bonnes-pratiques","title":"Bonnes Pratiques","text":""},{"location":"plugin_tutorial/#conception-du-plugin","title":"Conception du Plugin","text":"<ol> <li>S\u00e9paration des responsabilit\u00e9s : Handlers, matchers, et configuration s\u00e9par\u00e9s</li> <li>Gestion d'erreurs : Toujours g\u00e9rer les cas d'erreur et retourner des codes appropri\u00e9s</li> <li>Configuration flexible : Utiliser des variables d'environnement et des valeurs par d\u00e9faut</li> <li>Documentation : Documenter chaque fonction et param\u00e8tre</li> </ol>"},{"location":"plugin_tutorial/#tests","title":"Tests","text":"<ol> <li>Tests unitaires : Tester chaque fonction individuellement</li> <li>Tests d'int\u00e9gration : Tester l'interaction avec le syst\u00e8me principal</li> <li>Tests E2E : Tester avec des fichiers <code>.shtest</code> r\u00e9els</li> <li>Tests n\u00e9gatifs : Tester les cas d'erreur et d'\u00e9chec</li> </ol>"},{"location":"plugin_tutorial/#performance","title":"Performance","text":"<ol> <li>Validation l\u00e9g\u00e8re : Les validations doivent \u00eatre rapides</li> <li>Gestion des ressources : Lib\u00e9rer les ressources (connexions, fichiers)</li> <li>Cache : Mettre en cache les r\u00e9sultats co\u00fbteux</li> <li>Logging : Logger les op\u00e9rations importantes pour le debug</li> </ol>"},{"location":"plugin_tutorial/#securite","title":"S\u00e9curit\u00e9","text":"<ol> <li>Validation des entr\u00e9es : Valider tous les param\u00e8tres d'entr\u00e9e</li> <li>\u00c9chappement : \u00c9chapper les caract\u00e8res sp\u00e9ciaux dans les commandes shell</li> <li>Permissions : V\u00e9rifier les permissions avant les op\u00e9rations sensibles</li> <li>Secrets : Ne pas exposer les secrets dans les logs</li> </ol>"},{"location":"plugin_tutorial/#exemples-avances","title":"Exemples Avanc\u00e9s","text":""},{"location":"plugin_tutorial/#plugin-avec-base-de-donnees","title":"Plugin avec Base de Donn\u00e9es","text":"<pre><code>def database_handler(context: CompileContext, query: str, **kwargs) -&gt; str:\n    \"\"\"Handler pour ex\u00e9cuter des requ\u00eates de base de donn\u00e9es.\"\"\"\n\n    db_url = context.get_variable(\"DATABASE_URL\")\n    if not db_url:\n        return \"echo 'Database URL not configured' &gt;&amp;2 &amp;&amp; exit 1\"\n\n    return f\"\"\"# Ex\u00e9cuter requ\u00eate base de donn\u00e9es\npsql \"{db_url}\" -c \"{query}\" \\\\\n  &amp;&amp; echo \"Query executed successfully\" \\\\\n  || (echo \"Database query failed\" &gt;&amp;2 &amp;&amp; exit 1)\"\"\"\n</code></pre>"},{"location":"plugin_tutorial/#plugin-avec-api-rest","title":"Plugin avec API REST","text":"<pre><code>def api_handler(context: CompileContext, endpoint: str, method: str = \"GET\", **kwargs) -&gt; str:\n    \"\"\"Handler pour appeler des APIs REST.\"\"\"\n\n    base_url = context.get_variable(\"API_BASE_URL\")\n    api_key = context.get_variable(\"API_KEY\")\n\n    headers = f\"-H 'Authorization: Bearer {api_key}'\" if api_key else \"\"\n\n    return f\"\"\"# Appel API REST\ncurl -X {method} {headers} \"{base_url}{endpoint}\" \\\\\n  &amp;&amp; echo \"API call successful\" \\\\\n  || (echo \"API call failed\" &gt;&amp;2 &amp;&amp; exit 1)\"\"\"\n</code></pre>"},{"location":"plugin_tutorial/#depannage","title":"D\u00e9pannage","text":""},{"location":"plugin_tutorial/#problemes-courants","title":"Probl\u00e8mes Courants","text":"<ol> <li>Plugin non trouv\u00e9 : V\u00e9rifier le chemin et l'enregistrement</li> <li>Handler non appel\u00e9 : V\u00e9rifier les patterns YAML</li> <li>Variables non d\u00e9finies : V\u00e9rifier la configuration</li> <li>Erreurs de syntaxe : V\u00e9rifier les commandes shell g\u00e9n\u00e9r\u00e9es</li> </ol>"},{"location":"plugin_tutorial/#debug","title":"Debug","text":"<pre><code># Activer le debug pour le plugin\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# V\u00e9rifier l'enregistrement\ncontext = CompileContext()\nregister_plugin(context)\nprint(\"Handlers:\", list(context.action_handlers.keys()))\nprint(\"Matchers:\", list(context.validation_matchers.keys()))\n</code></pre>"},{"location":"plugin_tutorial/#conclusion","title":"Conclusion","text":"<p>Ce tutoriel vous a guid\u00e9 \u00e0 travers la cr\u00e9ation compl\u00e8te d'un plugin KnightBatch. Les plugins sont un moyen puissant d'\u00e9tendre les fonctionnalit\u00e9s du syst\u00e8me selon vos besoins sp\u00e9cifiques.</p> <p>Pour plus d'informations, consultez : - Architecture Modulaire - Guide D\u00e9veloppeur - Tests et Validation</p>"},{"location":"regex_documentation/","title":"Guide des r\u00e8gles de reconnaissance (Regex)","text":"<p>Ce document d\u00e9crit les expressions r\u00e9guli\u00e8res utilis\u00e9es pour interpr\u00e9ter automatiquement les instructions d\u2019un sc\u00e9nario <code>.shtest</code>.</p> <p>Chaque ligne de sc\u00e9nario peut d\u00e9clencher une action, une d\u00e9finition de variable, ou une validation de r\u00e9sultat. Les regex permettent de les reconna\u00eetre.</p>"},{"location":"regex_documentation/#exemples-simples","title":"Exemples simples","text":"<pre><code>Action: ex\u00e9cuter le script setup.sql ; R\u00e9sultat: retour 0\nAction: cr\u00e9er le fichier /tmp/test.log ; R\u00e9sultat: le fichier est pr\u00e9sent\nAction: d\u00e9finir la variable ENV = prod\n</code></pre>"},{"location":"regex_documentation/#actions-reconnues","title":"\ufe0f Actions reconnues","text":"<p>Ces expressions d\u00e9clenchent des actions de script ou de pr\u00e9paration.</p>"},{"location":"regex_documentation/#execution-de-scripts","title":"Ex\u00e9cution de scripts","text":"<pre><code>ex\u00e9cuter mon_script.sql\nlancer clean.sh\ntraiter le script init.sh\n</code></pre> <p>Reconna\u00eet : - <code>.sql</code> \u2192 ex\u00e9cution SQL - <code>.sh</code> \u2192 script shell - toute action sans extension \u2192 g\u00e9n\u00e9rique</p>"},{"location":"regex_documentation/#initialisation","title":"Initialisation","text":"<pre><code>initialiser les param\u00e8tres\nconfigurer l\u2019environnement\n</code></pre>"},{"location":"regex_documentation/#variables-et-arguments","title":"Variables et arguments","text":"<pre><code>d\u00e9finir la variable ENV = prod\nd\u00e9finir la variable port = 5432\n</code></pre> <p>Les variables sont extraites et inject\u00e9es dans les scripts g\u00e9n\u00e9r\u00e9s.</p>"},{"location":"regex_documentation/#fichiers-et-dossiers","title":"Fichiers et dossiers","text":""},{"location":"regex_documentation/#creation","title":"Cr\u00e9ation","text":"<pre><code>cr\u00e9er le fichier = /etc/app.conf\ncr\u00e9er le dossier = /var/data\n</code></pre> <p>Avec droits : <pre><code>cr\u00e9er dossier = /tmp/logs avec les droits = 0755\n</code></pre></p>"},{"location":"regex_documentation/#touch-date","title":"Touch / Date","text":"<pre><code>mettre \u00e0 jour la date du fichier /tmp/test.txt 20250628143000\ntouch /tmp/file.log -t 20250628120000\n</code></pre>"},{"location":"regex_documentation/#lecture","title":"Lecture","text":"<pre><code>lire le fichier = /etc/hosts\n</code></pre>"},{"location":"regex_documentation/#copie-deplacement","title":"Copie / D\u00e9placement","text":"<pre><code>copier le fichier /tmp/a vers /var/b\nd\u00e9placer le dossier /data vers /backup\n</code></pre>"},{"location":"regex_documentation/#resultats-attendus","title":"R\u00e9sultats attendus","text":"<p>Ces expressions servent \u00e0 valider l\u2019\u00e9tat apr\u00e8s une action.</p> <pre><code>le script retourne un code 0\nle script affiche un code \"1\"\nla sortie standard est success\nla sortie d\u2019erreur contient erreur fatale\n</code></pre> <p>Alias pris en charge : - <code>retour 0</code> = le script a bien \u00e9t\u00e9 ex\u00e9cut\u00e9 - <code>stdout contient \"...\"</code>, <code>stderr=...</code></p>"},{"location":"regex_documentation/#autres-validations","title":"Autres validations","text":"<pre><code>le fichier /tmp/x existe\nle dossier est pr\u00eat\nle fichier est initialis\u00e9\nles identifiants sont configur\u00e9s\n</code></pre>"},{"location":"regex_documentation/#compatibilites-action-resultat","title":"Compatibilit\u00e9s Action \u2194 R\u00e9sultat","text":""},{"location":"regex_documentation/#exemples","title":"Exemples","text":"<pre><code>Action: ex\u00e9cuter init.sql ; R\u00e9sultat: retour 0\nAction: cr\u00e9er le fichier /etc/app.conf ; R\u00e9sultat: le fichier est pr\u00e9sent\nAction: d\u00e9finir la variable mode = debug ; R\u00e9sultat: identifiants configur\u00e9s\n</code></pre> <p>Chaque action a des r\u00e9sultats compatibles automatiquement reconnus.</p> <p>Pour plus de d\u00e9tails, consultez les fichiers de configuration du moteur de parsing.</p>"},{"location":"shtest_format/","title":"Construire des fichiers <code>.shtest</code>","text":"<p>Ce document d\u00e9crit la syntaxe utilis\u00e9e pour \u00e9crire les sc\u00e9narios de test automatis\u00e9s au format <code>.shtest</code>. Chaque instruction est une ligne unique au format\u00a0:</p> <pre><code>Action: ... ; R\u00e9sultat: ...\n</code></pre> <p>Les validations sont ensuite traduites en instructions ex\u00e9cutables (shell, SQL, etc.).</p>"},{"location":"shtest_format/#entete-des-fichiers-generes","title":"Ent\u00eate des fichiers g\u00e9n\u00e9r\u00e9s","text":"<p>Les fichiers shell g\u00e9n\u00e9r\u00e9s contiennent tous la base suivante :</p> <pre><code>#!/bin/sh\nset -e\n\nrun_cmd() {\n  local _stdout=$(mktemp)\n  local _stderr=$(mktemp)\n  /bin/sh -c \"$1\" &gt;\"$_stdout\" 2&gt;\"_stderr\"\n  last_ret=$?\n  last_stdout=$(cat \"$_stdout\")\n  last_stderr=$(cat \"$_stderr\")\n  rm -f \"$_stdout\" \"$_stderr\"\n  if [ $last_ret -ne 0 ]; then\n    echo \"STDERR: $last_stderr\"\n  fi\n}\n\nlog_diff() {\n  expected=\"$1\"\n  actual=\"$2\"\n  if [ \"$expected\" != \"$actual\" ]; then\n    echo 'Diff\u00e9rence d\u00e9tect\u00e9e :'\n    echo \"- Attendu : $expected\"\n    echo \"- Obtenu : $actual\"\n  fi\n}\n</code></pre>"},{"location":"shtest_format/#manipulation-sql","title":"Manipulation SQL","text":"<p>Ce chapitre couvre la configuration de la connexion \u00e0 une base de donn\u00e9es, ainsi que l\u2019ex\u00e9cution de scripts SQL depuis un sc\u00e9nario.</p>"},{"location":"shtest_format/#definir-la-connexion-a-une-base-de-donnees","title":"D\u00e9finir la connexion \u00e0 une base de donn\u00e9es","text":"<p>D\u00e9finissez les variables n\u00e9cessaires pour acc\u00e9der \u00e0 une base de donn\u00e9es (driver et cha\u00eene de connexion). KnightBatch utilise les variables r\u00e9serv\u00e9es <code>SQL_DRIVER</code> et <code>SQL_CONN</code> pour g\u00e9n\u00e9rer des instructions compatibles avec votre moteur de base de donn\u00e9es. Il est possible de r\u00e9\u00e9crire la variable SQL_DRIVER plusieurs fois dans le m\u00eame test si vous utilisez plusieurs bases de donn\u00e9es.</p> <p>Pour d\u00e9finir le moteur de base de donn\u00e9es : <pre><code>Action: D\u00e9finir la variable SQL_DRIVER = mysql ; R\u00e9sultat: identifiants configur\u00e9s.\n</code></pre> Pour d\u00e9finir la chaine de connexion \u00e0 la base de donn\u00e9es : <pre><code>Action: D\u00e9finir la variable SQL_CONN = rootme/ffDDD584R@base_name ; R\u00e9sultat: identifiants configur\u00e9s.\n</code></pre></p> <p>Les lignes ci-dessus sont traduites en shell de la mani\u00e8re suivante : <pre><code>export SQL_DRIVER=\"mysql\"\nexport SQL_CONN=\"rootme/ffDDD584R@base_name\"\n\n# Attendu : identifiants configur\u00e9s\nif [ -n \"$SQL_CONN\" ]; then actual=\"identifiants configur\u00e9s\"; else actual=\"non configur\u00e9\"; fi\n\nexpected=\"identifiants configur\u00e9s\"\nlog_diff \"$expected\" \"$actual\"\n\nif [ \"$expected\" = \"$actual\" ]; then cond1=1; else cond1=0; fi\nverdict=\"KO\"\nif [ ${cond1} -eq 1 ]; then verdict=\"OK\"; fi\n\nexpected=\"OK\"\nlog_diff \"$expected\" \"$verdict\"\n</code></pre></p>"},{"location":"shtest_format/#executer-un-script-en-base-de-donnees","title":"Ex\u00e9cuter un script en base de donn\u00e9es","text":"<p>Il est possible d'ex\u00e9cuter des scripts SQL de la mani\u00e8re suivante :</p> <p><pre><code>Action: Ex\u00e9cuter le script SQL ./init_bdd.sql ; R\u00e9sultat: La base est pr\u00eate pour le test.\n</code></pre> Ce qui produira : <pre><code>run_cmd \"mysql ${SQL_CONN:-user/password@db} &lt; init_bdd.sql\"\n\n# Attendu : base pr\u00eate\nif [ $last_ret -eq 0 ]; then actual=\"base pr\u00eate\"; else actual=\"base non pr\u00eate\"; fi\n\nexpected=\"base pr\u00eate\"\nlog_diff \"$expected\" \"$actual\"\n\nif [ \"$expected\" = \"$actual\" ]; then cond2=1; else cond2=0; fi\nverdict=\"KO\"\nif [ ${cond2} -eq 1 ]; then verdict=\"OK\"; fi\n\nexpected=\"OK\"\nlog_diff \"$expected\" \"$verdict\"\n</code></pre></p> <p>S'il ne s'agit pas d'une initialisation, il est \u00e9galement possible d'utiliser des alias tels que : <pre><code>Action: Ex\u00e9cuter le script SQL verification.sql ; R\u00e9sultat: Le script s\u2019ex\u00e9cute avec succ\u00e8s.\n</code></pre> Ce qui produira un script similaire : <pre><code>run_cmd \"mysql ${SQL_CONN:-user/password@db} &lt; verification.sql\"\n\n# Attendu : retour 0\nif [ $last_ret -eq 0 ]; then actual=\"retour 0\"; else actual=\"retour $last_ret\"; fi\n\nexpected=\"retour 0\"\nlog_diff \"$expected\" \"$actual\"\n\nif [ \"$expected\" = \"$actual\" ]; then cond4=1; else cond4=0; fi\nverdict=\"KO\"\nif [ ${cond4} -eq 1 ]; then verdict=\"OK\"; fi\n\nexpected=\"OK\"\nlog_diff \"$expected\" \"$verdict\"\n</code></pre></p>"},{"location":"shtest_format/#note-il-est-possible-dexporter-le-resultat-dun-select-dans-un-fichier-afin-de-le-comparer-a-un-resultat-attendu-a-laide-des-actions-de-manipulation-de-fichiers","title":"&gt; Note : il est possible d'exporter le r\u00e9sultat d'un <code>SELECT</code> dans un fichier afin de le comparer \u00e0 un r\u00e9sultat attendu \u00e0 l'aide des actions de manipulation de fichiers.","text":""},{"location":"shtest_format/#manipulation-de-fichiers","title":"Manipulation de fichiers","text":"<p>Cette section regroupe toutes les actions relatives \u00e0 la gestion de fichiers : cr\u00e9ation, copie, modification de dates.</p>"},{"location":"shtest_format/#creer-et-copier-des-fichiers","title":"Cr\u00e9er et copier des fichiers","text":"<p>Vous pouvez cr\u00e9er des fichiers avec des permissions pr\u00e9cises ou les dupliquer dans d'autres emplacements.</p> <p><pre><code>Action: Cr\u00e9er le fichier /tmp/test.txt avec les droits 0600 ; R\u00e9sultat: le fichier est pr\u00e9sent.\n</code></pre> <pre><code>Action: Copier le fichier /tmp/a.txt vers /tmp/b.txt ; R\u00e9sultat: le fichier est copi\u00e9.\n</code></pre></p>"},{"location":"shtest_format/#modifier-les-metadonnees-dun-fichier","title":"Modifier les m\u00e9tadonn\u00e9es d\u2019un fichier","text":"<p>Modifiez les dates de fichiers pour simuler des cas de traitement diff\u00e9r\u00e9 ou obsol\u00e8te.</p> <p><pre><code>Action: Toucher le fichier ./ancien.txt -t 202201010000 ; R\u00e9sultat: date modifi\u00e9e.\n</code></pre> <pre><code>Action: Mettre \u00e0 jour la date du fichier ./nouveau.txt 202401010101 ; R\u00e9sultat: date modifi\u00e9e.\n</code></pre></p>"},{"location":"shtest_format/#execution-de-batchs","title":"Ex\u00e9cution de batchs","text":"<p>Ce chapitre montre comment ex\u00e9cuter des scripts batch et tester leur ex\u00e9cution \u00e0 travers leurs retours ou leurs sorties.</p>"},{"location":"shtest_format/#lancer-un-traitement","title":"Lancer un traitement","text":"<p>Voici des instructions pour lancer un script et valider son ex\u00e9cution correcte.</p> <pre><code>Action: Ex\u00e9cuter ./scripts/purge.sh ; R\u00e9sultat: retour 0.\nAction: Ex\u00e9cuter /opt/batch/migration.sh ; R\u00e9sultat: retour 0.\n</code></pre>"},{"location":"shtest_format/#appliquer-des-validations-complexes","title":"Appliquer des validations complexes","text":"<p>Vous pouvez aussi v\u00e9rifier les sorties standard ou d'erreur pour affiner les v\u00e9rifications.</p> <pre><code>Action: Ex\u00e9cuter ./traitement.sh ; R\u00e9sultat: retour 0 et stdout contient \"Succ\u00e8s complet\".\nAction: Ex\u00e9cuter ./verif.sh ; R\u00e9sultat: stderr contient \"WARNING\".\n</code></pre>"},{"location":"shtest_format/#verifications","title":"V\u00e9rifications","text":"<p>Ces instructions permettent de valider l\u2019exactitude des fichiers produits ou des messages retourn\u00e9s.</p>"},{"location":"shtest_format/#comparaison-de-fichiers","title":"Comparaison de fichiers","text":"<p>Compare deux fichiers pour v\u00e9rifier que le traitement a produit la sortie attendue.</p> <pre><code>Action: Comparer le fichier ./resultat.txt avec ./attendu.txt ; R\u00e9sultat: fichiers identiques.\n</code></pre>"},{"location":"shtest_format/#verification-de-sortie","title":"V\u00e9rification de sortie","text":"<p>Assurez-vous que les scripts produisent les bons messages sur la sortie standard ou erreur.</p> <pre><code>Action: Ex\u00e9cuter ./analyse.sh ; R\u00e9sultat: stdout contient \"Analyse termin\u00e9e\".\nAction: Ex\u00e9cuter ./check.sh ; R\u00e9sultat: stderr contient \"Erreur d\u00e9tect\u00e9e\".\n</code></pre>"},{"location":"shtest_format/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Il est important de tester les cas d\u2019erreur, qu\u2019ils soient attendus ou bloquants.</p>"},{"location":"shtest_format/#verifier-les-codes-de-retour-non-nuls","title":"V\u00e9rifier les codes de retour non nuls","text":"<pre><code>Action: Ex\u00e9cuter ./script_noncritique.sh ; R\u00e9sultat: retour 1.\n</code></pre>"},{"location":"shtest_format/#capturer-des-erreurs-dans-la-sortie-standard-ou-erreur","title":"Capturer des erreurs dans la sortie standard ou erreur","text":"<pre><code>Action: Ex\u00e9cuter ./script.sh ; R\u00e9sultat: stdout contient \"Erreur d\u00e9tect\u00e9e\".\nAction: Ex\u00e9cuter ./script.sh ; R\u00e9sultat: stderr contient \"Permission denied\".\n</code></pre>"},{"location":"shtest_format/#combiner-erreurs-et-autres-validations","title":"Combiner erreurs et autres validations","text":"<pre><code>Action: Ex\u00e9cuter ./traitement.sh ; R\u00e9sultat: retour 1 ou stderr contient \"Erreur de validation\".\n</code></pre>"},{"location":"shtest_format/#nettoyage-des-ressources","title":"Nettoyage des ressources","text":"<p>Les sc\u00e9narios de test doivent parfois remettre l\u2019environnement dans un \u00e9tat propre.</p>"},{"location":"shtest_format/#supprimer-ou-purger-un-dossier","title":"Supprimer ou purger un dossier","text":"<pre><code>Action: Supprimer le dossier /tmp/test_env ; R\u00e9sultat: dossier supprim\u00e9.\nAction: Purger le contenu du dossier ./temp ; R\u00e9sultat: dossier vid\u00e9.\n</code></pre>"},{"location":"shtest_format/#reinitialiser-un-fichier-ou-une-base","title":"R\u00e9initialiser un fichier ou une base","text":"<pre><code>Action: R\u00e9initialiser le fichier ./data.json ; R\u00e9sultat: fichier vide.\nAction: Ex\u00e9cuter le script SQL cleanup.sql ; R\u00e9sultat: base r\u00e9initialis\u00e9e.\n</code></pre>"},{"location":"shtest_format/#catalogue-complet-des-actions","title":"Catalogue complet des actions","text":"<p>Les exemples ci-dessous r\u00e9capitulent toutes les actions observ\u00e9es dans le dossier <code>tests</code>. Elles sont class\u00e9es par th\u00e8me et accompagn\u00e9es du r\u00e9sultat attendu.</p>"},{"location":"shtest_format/#consultation-de-fichiers","title":"Consultation de fichiers","text":"<pre><code>Action: Afficher le contenu du fichier /tmp/JDD_Commun.sql ; R\u00e9sultat: Le contenu est affich\u00e9.\nAction: Afficher le contenu du fichier /tmp/JDD_Extra.sql ; R\u00e9sultat: Le script est affich\u00e9.\nAction: Afficher le contenu du fichier /tmp/file.txt ; R\u00e9sultat: Le contenu est correct.\nAction: Afficher le contenu du fichier /tmp/file.txt ; R\u00e9sultat: contenu correct.\nAction: Afficher le contenu du fichier /tmp/output.txt ; R\u00e9sultat: Le contenu est correct.\nAction: Afficher le contenu du fichier /tmp/test.txt ; R\u00e9sultat: Le contenu est affich\u00e9.\nAction: Afficher le contenu du fichier /tmp/test.txt ; R\u00e9sultat: Le script est affich\u00e9.\nAction: Afficher le contenu du fichier /tmp/test.txt ; R\u00e9sultat: contenu affich\u00e9.\nAction: Afficher le contenu du fichier /tmp/test.txt ; R\u00e9sultat: le contenu est lisible.\nAction: Afficher le contenu du fichier /tmp/test_folder/test.txt ; R\u00e9sultat: le contenu est lisible.\nAction: lire le fichier = /tmp/test.txt ; R\u00e9sultat: contenu affich\u00e9.\nAction: cat le fichier = /tmp/test.txt ; R\u00e9sultat: contenu affich\u00e9.\nAction: afficher le contenu du fichier /tmp/test.txt ; R\u00e9sultat: contenu affich\u00e9.\n</code></pre>"},{"location":"shtest_format/#creation-et-copie-de-fichiers","title":"Cr\u00e9ation et copie de fichiers","text":"<pre><code>Action: Cr\u00e9er le fichier /tmp/output.txt avec les droits = 0644 ; R\u00e9sultat: Le fichier est pr\u00e9sent.\nAction: Cr\u00e9er le fichier /tmp/test_folder/test.txt avec les droits = 0600 ; R\u00e9sultat: le fichier est cr\u00e9\u00e9.\nAction: cr\u00e9er le fichier /tmp/test.txt avec les droits = 0600 ; R\u00e9sultat: Le fichier est pr\u00e9sent.\nAction: copier le fichier /tmp/a.txt vers /tmp/b.txt ; R\u00e9sultat: le fichier est copi\u00e9.\nAction: d\u00e9placer le fichier /tmp/a.txt vers /tmp/b.txt ; R\u00e9sultat: le fichier est copi\u00e9.\nAction: Copier le fichier /tmp/src.txt vers /tmp/dest.txt ; R\u00e9sultat: le fichier est copi\u00e9.\nAction: Copier le dossier /tmp/data vers /tmp/backup ; R\u00e9sultat: le dossier est copi\u00e9.\nAction: copier le dossier /tmp/dir vers /tmp/dir2 ; R\u00e9sultat: le dossier est copi\u00e9.\nAction: d\u00e9placer le dossier /tmp/dir vers /tmp/dir2 ; R\u00e9sultat: le dossier est copi\u00e9.\n</code></pre>"},{"location":"shtest_format/#gestion-des-dossiers","title":"Gestion des dossiers","text":"<pre><code>Action: Cr\u00e9er le dossier /tmp/data avec les droits = 0755 ; R\u00e9sultat: Le dossier est cr\u00e9\u00e9.\nAction: Cr\u00e9er le dossier /tmp/newdir ; R\u00e9sultat: Le dossier est cr\u00e9\u00e9.\nAction: Cr\u00e9er le dossier /tmp/newdir ; R\u00e9sultat: dossier cr\u00e9\u00e9.\nAction: Cr\u00e9er le dossier /tmp/newdir ; R\u00e9sultat: le dossier est pr\u00eat.\nAction: Cr\u00e9er le dossier /tmp/test_folder avec les droits = 0700 ; R\u00e9sultat: le dossier est pr\u00eat.\n</code></pre>"},{"location":"shtest_format/#manipulation-de-dates","title":"Manipulation de dates","text":"<pre><code>Action: Toucher le fichier /tmp/init.flag 202501010000 ; R\u00e9sultat: Le fichier est initialis\u00e9.\nAction: toucher le fichier /tmp/test.txt -t 202501010101 ; R\u00e9sultat: date modifi\u00e9e.\nAction: toucher le fichier /tmp/test.txt -t 202501010101 ; R\u00e9sultat: date modifi\u00e9e.\nAction: Mettre \u00e0 jour la date du fichier /tmp/file.txt 202501010101 ; R\u00e9sultat: La date est modifi\u00e9e.\nAction: Mettre \u00e0 jour la date du fichier /tmp/file.txt 202501010101 ; R\u00e9sultat: date modifi\u00e9e.\nAction: Mettre \u00e0 jour la date du fichier /tmp/output.txt 202501021200 ; R\u00e9sultat: La date est modifi\u00e9e.\nAction: mettre \u00e0 jour la date du fichier /tmp/test.txt 202501010101 ; R\u00e9sultat: date modifi\u00e9e.\n</code></pre>"},{"location":"shtest_format/#execution-de-scripts-et-sql","title":"Ex\u00e9cution de scripts et SQL","text":"<pre><code>Action: Ex\u00e9cuter /opt/batch/traitement.sh ; R\u00e9sultat: Le script retourne un code 0 et (La sortie standard contient \"OK\" ou La sortie d'erreur contient WARNING).\nAction: Ex\u00e9cuter /opt/batch/traitement.sh ; R\u00e9sultat: retour 0 et (la sortie standard contient \"Succ\u00e8s complet\" ou la sortie d'erreur contient WARNING).\nAction: Ex\u00e9cuter /opt/batch/traitement.sh ; R\u00e9sultat: retour 0 et (stdout contient \"OK\" ou stderr contient WARNING).\nAction: Ex\u00e9cuter /opt/batch/traitement.sh avec l'argument produit=123 et la quantit\u00e9=10 ; R\u00e9sultat: retour 0.\nAction: Ex\u00e9cuter /opt/batch/traitement.sh avec l'argument produit=567 et la quantit\u00e9=20 ; R\u00e9sultat: retour 0 et (stdout contient \"Traitement OK\" ou stderr contient WARNING).\nAction: ex\u00e9cuter traitement.sh ; R\u00e9sultat: retour 0.\nAction: lancer traitement.sh ; R\u00e9sultat: retour 0.\nAction: traiter traitement.sh ; R\u00e9sultat: retour 0.\nAction: ex\u00e9cuter dummy.sh ; R\u00e9sultat: retour 0.\nAction: Ex\u00e9cuter le script SQL JDD_Commun.sql ; R\u00e9sultat: La base de test est pr\u00eate.\nAction: Ex\u00e9cuter le script SQL JDD_Commun.sql puis JDD_Extra.sql ; R\u00e9sultat: La base est pr\u00eate pour le test.\nAction: Ex\u00e9cuter script.sh ; R\u00e9sultat: La base de test est pr\u00eate.\nAction: Ex\u00e9cuter script.sh ; R\u00e9sultat: La base est pr\u00eate pour le test.\nAction: Ex\u00e9cuter script.sh ; R\u00e9sultat: Le fichier /tmp/a.txt est identique a /tmp/b.txt.\nAction: Ex\u00e9cuter script.sh ; R\u00e9sultat: Le fichier /tmp/a.txt est identique \u00e0 /tmp/b.txt.\nAction: Ex\u00e9cuter script.sh ; R\u00e9sultat: base pr\u00eate.\nAction: Ex\u00e9cuter script.sh ; R\u00e9sultat: fichier_identique /tmp/a.txt /tmp/b.txt.\n</code></pre>"},{"location":"shtest_format/#parametrage-et-contexte","title":"Param\u00e9trage et contexte","text":"<pre><code>Action: D\u00e9finir la variable SQL_CONN sqlplus -S user/password@db ; R\u00e9sultat: Les identifiants sont configur\u00e9s.\nAction: D\u00e9finir la variable SQL_CONN = sqlplus -S user/password@db ; R\u00e9sultat: identifiants configur\u00e9s.\nAction: Indiquer le chemin des logs /var/log/sys.log ; R\u00e9sultat: les logs sont accessibles.\nAction: Indiquer le chemin des logs /var/log/sys.log ; R\u00e9sultat: logs accessibles.\nAction: Indiquer le chemin des logs /var/log/system.log ; R\u00e9sultat: les logs sont accessibles.\nAction: configurer le contexte ; R\u00e9sultat: base pr\u00eate.\nAction: cr\u00e9er le contexte ; R\u00e9sultat: base pr\u00eate.\nAction: initialiser le contexte ; R\u00e9sultat: base pr\u00eate.\n</code></pre>"},{"location":"shtest_format/#verifications_1","title":"V\u00e9rifications","text":"<pre><code>Action: V\u00e9rifier qu'aucune erreur n'appara\u00eet ; R\u00e9sultat: le script affiche un code \"030\".\nAction: V\u00e9rifier qu'il n'y a pas d'erreur ; R\u00e9sultat: aucun message d'erreur.\nAction: V\u00e9rifier qu'il n'y a pas d'erreur ; R\u00e9sultat: stderr=.\nAction: V\u00e9rifier qu'il n'y a pas d'erreurs dans les logs ; R\u00e9sultat: aucun message d'erreur.\nAction: V\u00e9rifier que la date du fichier /tmp/test.log est 202501010000 ; R\u00e9sultat: la date du fichier /tmp/test.log est 202501010000.\nAction: V\u00e9rifier que le dossier /tmp/testdir a les droits 0755 ; R\u00e9sultat: le dossier /tmp/testdir a les droits 0755.\nAction: V\u00e9rifier que le dossier /tmp/testdir contient 2 fichiers *.txt ; R\u00e9sultat: le dossier /tmp/testdir contient 2 fichiers *.txt.\nAction: V\u00e9rifier que le dossier /tmp/testdir existe ; R\u00e9sultat: le dossier /tmp/testdir existe.\nAction: V\u00e9rifier que le fichier /tmp/dest.txt existe ; R\u00e9sultat: le fichier /tmp/dest.txt existe ;\nAction: V\u00e9rifier que le fichier /tmp/dest.txt existe ; R\u00e9sultat: le fichier est pr\u00e9sent et (le fichier /tmp/dest.txt existe ; ou la sortie d'erreur contient \"Erreur de copie\").\nAction: V\u00e9rifier que le fichier /tmp/test.log a les droits 0644 ; R\u00e9sultat: le fichier /tmp/test.log a les droits 0644.\nAction: V\u00e9rifier que le fichier /tmp/test.log contient OK ; R\u00e9sultat: le fichier /tmp/test.log contient OK.\nAction: V\u00e9rifier que le fichier /tmp/test.log contient exactement ALLGOOD ; R\u00e9sultat: le fichier /tmp/test.log contient exactement ALLGOOD.\nAction: V\u00e9rifier que le fichier /tmp/test.log existe ; R\u00e9sultat: le fichier /tmp/test.log existe.\n</code></pre>"},{"location":"shtest_format/#nettoyage","title":"Nettoyage","text":"<pre><code>Action: Vider le r\u00e9pertoire /tmp/cache ; R\u00e9sultat: le dossier est pr\u00eat.\n</code></pre>"},{"location":"shtest_format/#extrait-du-script-genere","title":"Extrait du script g\u00e9n\u00e9r\u00e9","text":"<p>Pour illustrer la transformation, toutes ces actions ont \u00e9t\u00e9 r\u00e9unies dans un unique fichier <code>.shtest</code> puis converties en script shell\u00a0:</p> <pre><code>python src/run_all.py --input docs/catalogue_tests --output docs/catalogue_output --no-excel\n</code></pre> <p>Les premi\u00e8res lignes du script obtenu sont\u00a0:</p> <pre><code>    }\n\n    # ---- catalogue ----\n    run_cmd \"cat /tmp/JDD_Commun.sql\"\n    # Attendu : contenu affich\u00e9\n    if [ $last_ret -eq 0 ]; then actual=\"contenu affich\u00e9\"; else actual=\"contenu non affich\u00e9\"; fi\n    expected=\"contenu affich\u00e9\"\n    log_diff \"$expected\" \"$actual\"\n    if [ \"$expected\" = \"$actual\" ]; then cond1=1; else cond1=0; fi\n    verdict=\"KO\"\n    if [ ${cond1} -eq 1 ]; then verdict=\"OK\"; fi\n    expected=\"OK\"\n    log_diff \"$expected\" \"$verdict\"\n    run_cmd \"cat /tmp/JDD_Extra.sql\"\n    # Attendu : le script est affich\u00e9\n    if [ $last_ret -eq 0 ]; then actual=\"contenu affich\u00e9\"; else actual=\"contenu non affich\u00e9\"; fi\n    expected=\"contenu affich\u00e9\"\n    log_diff \"$expected\" \"$actual\"\n    if [ \"$expected\" = \"$actual\" ]; then cond2=1; else cond2=0; fi\n    verdict=\"KO\"\n    if [ ${cond2} -eq 1 ]; then verdict=\"OK\"; fi\n</code></pre> <p>Apr\u00e8s am\u00e9lioration des r\u00e8gles de conversion, toutes les validations sont d\u00e9sormais v\u00e9rifi\u00e9es dans le script g\u00e9n\u00e9r\u00e9.</p>"},{"location":"shtest_format/#utilisation-de-sql_conn-pour-les-scripts-sql-multi-sgbd","title":"Utilisation de SQL_CONN pour les scripts SQL multi-SGBD","text":"<p>Pour tous les SGBD, la variable d'environnement <code>SQL_CONN</code> doit \u00eatre d\u00e9finie dans le <code>.shtest</code> avant toute action SQL. Le format attendu d\u00e9pend du SGBD s\u00e9lectionn\u00e9 via <code>SQL_DRIVER</code>.</p>"},{"location":"shtest_format/#exemples-dutilisation-dans-un-shtest","title":"Exemples d'utilisation dans un <code>.shtest</code> :","text":"<p>Oracle <pre><code>Action: D\u00e9finir la variable SQL_DRIVER = oracle ;\nAction: D\u00e9finir la variable SQL_CONN = user/password@db ;\nAction: Ex\u00e9cuter le script SQL mon_script.sql ;\n# Commande g\u00e9n\u00e9r\u00e9e :\n#   sqlplus -s user/password@db @mon_script.sql\n</code></pre></p> <p>PostgreSQL <pre><code>Action: D\u00e9finir la variable SQL_DRIVER = postgres ;\nAction: D\u00e9finir la variable SQL_CONN = postgres://user:password@host:5432/dbname ;\nAction: Ex\u00e9cuter le script SQL mon_script.sql ;\n# Commande g\u00e9n\u00e9r\u00e9e :\n#   psql \"postgres://user:password@host:5432/dbname\" -f mon_script.sql\n</code></pre></p> <p>MySQL <pre><code>Action: D\u00e9finir la variable SQL_DRIVER = mysql ;\nAction: D\u00e9finir la variable SQL_CONN = mysql://user:password@host:3306/dbname ;\nAction: Ex\u00e9cuter le script SQL mon_script.sql ;\n# Commande g\u00e9n\u00e9r\u00e9e :\n#   mysql \"mysql://user:password@host:3306/dbname\" &lt; mon_script.sql\n</code></pre></p> <p>Redis <pre><code>Action: D\u00e9finir la variable SQL_DRIVER = redis ;\nAction: D\u00e9finir la variable SQL_CONN = -h myhost -p 6380 -a mypass ;\nAction: Ex\u00e9cuter le script SQL mon_script.redis ;\n# Commande g\u00e9n\u00e9r\u00e9e :\n#   redis-cli -h myhost -p 6380 -a mypass &lt; mon_script.redis\n</code></pre></p> <p>Note : - Il n'est pas n\u00e9cessaire de g\u00e9n\u00e9rer ou d'exporter SQL_DRIVER dans le shell, il sert uniquement \u00e0 la g\u00e9n\u00e9ration du script. - Adaptez la valeur de SQL_CONN selon le SGBD utilis\u00e9.</p>"},{"location":"style-guide/","title":"Guide de Style KnightBatch","text":"<p>Ce guide d\u00e9finit les conventions de style et les bonnes pratiques pour le d\u00e9veloppement avec KnightBatch.</p>"},{"location":"style-guide/#structure-des-fichiers-shtest","title":"Structure des fichiers .shtest","text":""},{"location":"style-guide/#format-general","title":"Format g\u00e9n\u00e9ral","text":"<pre><code>\u00c9tape: Nom de l'\u00e9tape\nAction: Description de l'action en fran\u00e7ais\nR\u00e9sultat: Expression de validation attendue\n</code></pre>"},{"location":"style-guide/#conventions-de-nommage","title":"Conventions de nommage","text":"<ul> <li>\u00c9tapes : Utilisez des noms descriptifs en fran\u00e7ais</li> <li><code>\u00c9tape: Pr\u00e9paration de l'environnement</code></li> <li> <p><code>\u00c9tape: setup</code></p> </li> <li> <p>Actions : D\u00e9crivez clairement l'action \u00e0 effectuer</p> </li> <li><code>Action: Cr\u00e9er le dossier /tmp/test</code></li> <li> <p><code>Action: mkdir /tmp/test</code></p> </li> <li> <p>R\u00e9sultats : Utilisez les expressions de validation standard</p> </li> <li><code>R\u00e9sultat: Le dossier est cr\u00e9\u00e9</code></li> <li><code>R\u00e9sultat: folder exists</code></li> </ul>"},{"location":"style-guide/#expressions-de-validation","title":"Expressions de validation","text":""},{"location":"style-guide/#validations-de-base","title":"Validations de base","text":"Expression Description <code>Retour 0</code> V\u00e9rifie que la commande retourne un code de sortie 0 <code>Le fichier existe</code> V\u00e9rifie l'existence d'un fichier <code>Le dossier est cr\u00e9\u00e9</code> V\u00e9rifie l'existence d'un dossier <code>Le contenu est affich\u00e9</code> V\u00e9rifie que du contenu est affich\u00e9 sur stdout"},{"location":"style-guide/#validations-avancees","title":"Validations avanc\u00e9es","text":"<pre><code>R\u00e9sultat: stdout contient 'succ\u00e8s'\nR\u00e9sultat: stderr ne contient pas 'erreur'\nR\u00e9sultat: Le fichier /path/to/file contient 'texte attendu'\n</code></pre>"},{"location":"style-guide/#variables-et-arguments","title":"Variables et arguments","text":""},{"location":"style-guide/#definition-de-variables","title":"D\u00e9finition de variables","text":"<pre><code>Action: D\u00e9finir la variable SQL_DRIVER = oracle\nAction: D\u00e9finir la variable CONFIG_PATH = /etc/config\n</code></pre>"},{"location":"style-guide/#utilisation-darguments","title":"Utilisation d'arguments","text":"<pre><code>Action: Ex\u00e9cuter le script {script} avec l'argument {arg}\n</code></pre>"},{"location":"style-guide/#scripts-sql","title":"Scripts SQL","text":""},{"location":"style-guide/#format-des-scripts-sql","title":"Format des scripts SQL","text":"<pre><code>Action: Ex\u00e9cuter le script SQL {script}\nR\u00e9sultat: Le script SQL s'ex\u00e9cute sans erreur\n</code></pre>"},{"location":"style-guide/#variables-sql","title":"Variables SQL","text":"<pre><code>Action: D\u00e9finir la variable SQL_CONN = user/pass@host:port/service\nAction: D\u00e9finir la variable SQL_DRIVER = oracle\n</code></pre>"},{"location":"style-guide/#operations-sur-les-fichiers","title":"Op\u00e9rations sur les fichiers","text":""},{"location":"style-guide/#creation","title":"Cr\u00e9ation","text":"<pre><code>Action: Cr\u00e9er le fichier /path/to/file\nAction: Cr\u00e9er le dossier /path/to/directory\n</code></pre>"},{"location":"style-guide/#manipulation","title":"Manipulation","text":"<pre><code>Action: Copier le fichier source vers destination\nAction: D\u00e9placer le fichier source vers destination\nAction: Supprimer le fichier /path/to/file\n</code></pre>"},{"location":"style-guide/#validation","title":"Validation","text":"<pre><code>R\u00e9sultat: Le fichier est copi\u00e9\nR\u00e9sultat: Le fichier est d\u00e9plac\u00e9\nR\u00e9sultat: Le fichier est supprim\u00e9\n</code></pre>"},{"location":"style-guide/#commentaires-et-documentation","title":"Commentaires et documentation","text":""},{"location":"style-guide/#commentaires-dans-les-tests","title":"Commentaires dans les tests","text":"<pre><code># Ce test v\u00e9rifie la cr\u00e9ation d'un environnement de test\n\u00c9tape: Pr\u00e9paration de l'environnement\nAction: Cr\u00e9er le dossier /tmp/test_env\nR\u00e9sultat: Le dossier est cr\u00e9\u00e9\n\n# V\u00e9rification de la configuration\n\u00c9tape: Configuration\nAction: Copier le fichier config.ini vers /tmp/test_env/\nR\u00e9sultat: Le fichier est copi\u00e9\n</code></pre>"},{"location":"style-guide/#documentation-des-plugins","title":"Documentation des plugins","text":"<p>Chaque plugin doit inclure :</p> <ol> <li>Description : Ce que fait le plugin</li> <li>Patterns : Les expressions reconnues</li> <li>Arguments : Les param\u00e8tres attendus</li> <li>Exemples : Cas d'usage typiques</li> </ol>"},{"location":"style-guide/#interface-recommandee-pour-les-handlers-de-plugins","title":"Interface recommand\u00e9e pour les handlers de plugins","text":"<ul> <li>Les handlers d'action doivent accepter uniquement un argument <code>params</code> (dictionnaire).</li> <li>Ils doivent retourner un objet <code>ActionNode</code> avec une m\u00e9thode <code>to_shell()</code> pour g\u00e9n\u00e9rer la commande shell.</li> <li>Ne pas utiliser <code>os.environ</code> ou des variables globales dans vos handlers.</li> </ul>"},{"location":"style-guide/#exemple-minimal","title":"Exemple minimal","text":"<pre><code>from shtest_compiler.ast.shell_framework_ast import ActionNode\n\nclass MyAction(ActionNode):\n    def __init__(self, param):\n        self.param = param\n    def to_shell(self):\n        return f\"echo '{self.param}' &gt; output.txt\"\n\ndef handle(params):\n    return MyAction(params[\"param\"])\n</code></pre>"},{"location":"style-guide/#bonnes-pratiques","title":"Bonnes pratiques","text":""},{"location":"style-guide/#lisibilite","title":"Lisibilit\u00e9","text":"<ul> <li>Utilisez des noms d'\u00e9tapes descriptifs</li> <li>\u00c9vitez les abr\u00e9viations</li> <li>Commentez les sections complexes</li> </ul>"},{"location":"style-guide/#maintenabilite","title":"Maintenabilit\u00e9","text":"<ul> <li>Groupez les actions logiquement</li> <li>R\u00e9utilisez les variables pour les chemins</li> <li>Testez chaque \u00e9tape individuellement</li> </ul>"},{"location":"style-guide/#robustesse","title":"Robustesse","text":"<ul> <li>V\u00e9rifiez toujours les r\u00e9sultats</li> <li>G\u00e9rez les cas d'erreur</li> <li>Utilisez des chemins absolus quand possible</li> </ul>"},{"location":"style-guide/#exemples-complets","title":"Exemples complets","text":""},{"location":"style-guide/#test-simple","title":"Test simple","text":"<pre><code>\u00c9tape: Test de cr\u00e9ation de fichier\nAction: Cr\u00e9er le fichier /tmp/test.txt\nR\u00e9sultat: Le fichier existe\n\n\u00c9tape: Test de contenu\nAction: \u00c9crire 'Hello World' dans /tmp/test.txt\nR\u00e9sultat: Le fichier contient 'Hello World'\n</code></pre>"},{"location":"style-guide/#test-avec-variables","title":"Test avec variables","text":"<pre><code>Action: D\u00e9finir la variable TEST_DIR = /tmp/knightbatch_test\nAction: Cr\u00e9er le dossier {TEST_DIR}\nR\u00e9sultat: Le dossier est cr\u00e9\u00e9\n\nAction: Cr\u00e9er le fichier {TEST_DIR}/config.ini\nR\u00e9sultat: Le fichier existe\n</code></pre>"},{"location":"style-guide/#test-sql","title":"Test SQL","text":"<pre><code>Action: D\u00e9finir la variable SQL_DRIVER = oracle\nAction: D\u00e9finir la variable SQL_CONN = user/pass@host:1521/service\nAction: Ex\u00e9cuter le script SQL scripts/test.sql\nR\u00e9sultat: Le script SQL s'ex\u00e9cute sans erreur\nR\u00e9sultat: stdout contient 'SUCCESS'\n</code></pre>"},{"location":"style-guide/#ressources","title":"Ressources","text":"<ul> <li>Format SHTEST - Documentation compl\u00e8te du format</li> <li>Expressions r\u00e9guli\u00e8res - Patterns reconnus</li> <li>Tutoriel des plugins - Cr\u00e9ation de plugins personnalis\u00e9s</li> </ul>"},{"location":"testing_and_validation/","title":"Tests et Validation","text":"<p>Cette section documente les capacit\u00e9s de test et de validation de KnightBatch, incluant les suites de tests E2E, la validation d'erreurs, et les outils de diagnostic.</p>"},{"location":"testing_and_validation/#vue-densemble","title":"Vue d'ensemble","text":"<p>KnightBatch dispose d'une suite de tests compl\u00e8te et d'un syst\u00e8me de validation robuste pour garantir la qualit\u00e9 et la fiabilit\u00e9 du compilateur de tests.</p>"},{"location":"testing_and_validation/#structure-des-tests","title":"Structure des Tests","text":""},{"location":"testing_and_validation/#organisation-des-tests","title":"Organisation des Tests","text":"<pre><code>src/tests/\n\u251c\u2500\u2500 unit/           # Tests unitaires des modules individuels\n\u251c\u2500\u2500 integration/    # Tests d'int\u00e9gration entre composants\n\u251c\u2500\u2500 e2e/           # Tests end-to-end avec fichiers .shtest\n\u2502   \u251c\u2500\u2500 ko/        # Tests n\u00e9gatifs (fichiers invalides)\n\u2502   \u2514\u2500\u2500 ok/        # Tests positifs (fichiers valides)\n</code></pre>"},{"location":"testing_and_validation/#types-de-tests","title":"Types de Tests","text":""},{"location":"testing_and_validation/#tests-unitaires","title":"Tests Unitaires","text":"<ul> <li>Objectif : Valider le comportement des modules individuels</li> <li>Couverture : Parser, lexer, AST builder, compilateur, plugins</li> <li>Ex\u00e9cution : <code>python -m pytest tests/unit/</code></li> </ul>"},{"location":"testing_and_validation/#tests-dintegration","title":"Tests d'Int\u00e9gration","text":"<ul> <li>Objectif : Valider les interactions entre composants</li> <li>Couverture : Flux complet de parsing \u00e0 g\u00e9n\u00e9ration de code</li> <li>Ex\u00e9cution : <code>python -m pytest tests/integration/</code></li> </ul>"},{"location":"testing_and_validation/#tests-e2e-end-to-end","title":"Tests E2E (End-to-End)","text":"<ul> <li>Objectif : Valider le comportement complet avec des fichiers r\u00e9els</li> <li>Couverture : Compilation, g\u00e9n\u00e9ration de scripts, export Excel</li> <li>Ex\u00e9cution : <code>python src/shtest_compiler/run_tests.py --all</code></li> </ul>"},{"location":"testing_and_validation/#tests-negatifs-ko","title":"Tests N\u00e9gatifs (KO)","text":""},{"location":"testing_and_validation/#objectif","title":"Objectif","text":"<p>Les tests n\u00e9gatifs v\u00e9rifient que le compilateur d\u00e9tecte et rejette correctement les fichiers invalides avec des messages d'erreur appropri\u00e9s.</p>"},{"location":"testing_and_validation/#cas-de-test-couverts","title":"Cas de Test Couverts","text":""},{"location":"testing_and_validation/#syntaxe-invalide","title":"Syntaxe Invalide","text":"<ul> <li>Fichiers vides : D\u00e9tection des fichiers sans contenu</li> <li>Fichiers commentaires uniquement : Rejet des fichiers sans \u00e9tapes</li> <li>Actions orphelines : Actions sans mot-cl\u00e9 <code>\u00c9tape:</code></li> <li>Actions malform\u00e9es : Actions vides ou incompl\u00e8tes</li> <li>Validations malform\u00e9es : Validations sans contenu ou invalides</li> </ul>"},{"location":"testing_and_validation/#operations-invalides","title":"Op\u00e9rations Invalides","text":"<ul> <li>Chemins de fichiers invalides : Caract\u00e8res sp\u00e9ciaux, permissions</li> <li>Op\u00e9rations SQL invalides : Requ\u00eates malform\u00e9es, tables inexistantes</li> <li>Variables invalides : Noms incorrects, assignations vides</li> <li>Plugins inexistants : R\u00e9f\u00e9rences \u00e0 des plugins non disponibles</li> </ul>"},{"location":"testing_and_validation/#structure-invalide","title":"Structure Invalide","text":"<ul> <li>Imbrication incorrecte : \u00c9tapes dans des \u00e9tapes</li> <li>Validations conflictuelles : Validations contradictoires</li> <li>Encodage invalide : Caract\u00e8res non-UTF8</li> </ul>"},{"location":"testing_and_validation/#execution-des-tests-negatifs","title":"Ex\u00e9cution des Tests N\u00e9gatifs","text":"<pre><code># Ex\u00e9cuter tous les tests n\u00e9gatifs\npython tests/e2e/ko/run_ko_tests.py\n\n# Tester un fichier sp\u00e9cifique\npython -m shtest_compiler.run_all --input tests/e2e/ko/invalid_syntax_1.shtest\n</code></pre>"},{"location":"testing_and_validation/#criteres-de-succes","title":"Crit\u00e8res de Succ\u00e8s","text":"<p>Un test n\u00e9gatif est r\u00e9ussi si : - Le compilateur d\u00e9tecte l'erreur et affiche un message clair - Aucun script shell n'est g\u00e9n\u00e9r\u00e9 (ou le script g\u00e9n\u00e9r\u00e9 \u00e9choue) - Le processus se termine avec un code de sortie non-z\u00e9ro - Le message d'erreur est utile et pointe vers le probl\u00e8me sp\u00e9cifique</p>"},{"location":"testing_and_validation/#validation-derreurs","title":"Validation d'Erreurs","text":""},{"location":"testing_and_validation/#systeme-de-validation-ast","title":"Syst\u00e8me de Validation AST","text":"<p>Le compilateur utilise un syst\u00e8me de validation AST pour d\u00e9tecter les erreurs structurelles et s\u00e9mantiques.</p>"},{"location":"testing_and_validation/#validateurs-disponibles","title":"Validateurs Disponibles","text":"<pre><code># Validation des \u00e9tapes\ndef _validate_steps(self, ast: ShtestFile) -&gt; List[str]:\n    \"\"\"Valide que les \u00e9tapes ont une structure appropri\u00e9e.\"\"\"\n    ...\n# Validation des actions\ndef _validate_actions(self, ast: ShtestFile) -&gt; List[str]:\n    ...\n# Validation des fichiers non-vides\ndef _validate_nonempty_file(self, ast: ShtestFile) -&gt; List[str]:\n    ...\n# Validation des commandes d'action\ndef _validate_action_commands(self, ast: ShtestFile) -&gt; List[str]:\n    ...\n# Validation des phrases de validation\ndef _validate_validation_phrases(self, ast: ShtestFile) -&gt; List[str]:\n    ...\n# Validation des actions orphelines\ndef _validate_no_orphaned_actions(self, ast: ShtestFile) -&gt; List[str]:\n    ...\n</code></pre>"},{"location":"testing_and_validation/#messages-derreur","title":"Messages d'Erreur","text":"<p>Le syst\u00e8me g\u00e9n\u00e8re des messages d'erreur clairs et localis\u00e9s\u00a0:</p> <pre><code>AST validation failed:\n- File is empty or contains no steps\n- Step 'Test Step' has no actions\n- Action 2 in step 'Test Step' has empty or comment-only command\n- Found orphaned action without proper step context\n</code></pre>"},{"location":"testing_and_validation/#gestion-des-erreurs","title":"Gestion des Erreurs","text":""},{"location":"testing_and_validation/#propagation-des-erreurs","title":"Propagation des Erreurs","text":"<ol> <li>Parser : D\u00e9tecte les erreurs de syntaxe et l\u00e8ve <code>ParseError</code></li> <li>AST Builder : Valide la structure et l\u00e8ve <code>ParseError</code> sur \u00e9chec</li> <li>CLI : Capture les erreurs et affiche les messages appropri\u00e9s</li> <li>Code de Sortie : Retourne un code non-z\u00e9ro en cas d'erreur</li> </ol>"},{"location":"testing_and_validation/#codes-de-sortie","title":"Codes de Sortie","text":"<ul> <li>0 : Succ\u00e8s</li> <li>1 : Erreur de validation ou de compilation</li> <li>2 : Erreur de configuration</li> <li>3 : Erreur syst\u00e8me</li> </ul>"},{"location":"testing_and_validation/#outils-de-diagnostic","title":"Outils de Diagnostic","text":""},{"location":"testing_and_validation/#script-de-debug","title":"Script de Debug","text":"<p>Le script <code>debug_parser.py</code> permet d'analyser le comportement du parser\u00a0:</p> <pre><code>python tests/e2e/ko/debug_parser.py\n</code></pre>"},{"location":"testing_and_validation/#fonctionnalites","title":"Fonctionnalit\u00e9s","text":"<ul> <li>Analyse des tokens : Affichage des tokens g\u00e9n\u00e9r\u00e9s</li> <li>Structure AST : Visualisation de l'arbre syntaxique</li> <li>Validation : Test des validateurs sur des fichiers sp\u00e9cifiques</li> </ul>"},{"location":"testing_and_validation/#mode-debug","title":"Mode Debug","text":"<p>Activer le mode debug pour des informations d\u00e9taill\u00e9es\u00a0:</p> <pre><code>python -m shtest_compiler.run_all --input file.shtest --debug\n</code></pre>"},{"location":"testing_and_validation/#informations-disponibles","title":"Informations Disponibles","text":"<ul> <li>Tokens g\u00e9n\u00e9r\u00e9s : D\u00e9tail de la tokenisation</li> <li>\u00c9tapes de parsing : Progression du parsing</li> <li>Validations : R\u00e9sultats des validations AST</li> <li>Erreurs d\u00e9taill\u00e9es : Stack traces et contexte</li> </ul>"},{"location":"testing_and_validation/#tests-sql-avances","title":"Tests SQL Avanc\u00e9s","text":""},{"location":"testing_and_validation/#comparaison-de-resultats","title":"Comparaison de R\u00e9sultats","text":"<p>KnightBatch supporte la comparaison avanc\u00e9e de r\u00e9sultats SQL\u00a0:</p> <pre><code>\u00c9tape: Comparer les r\u00e9sultats de deux requ\u00eates\n  Action: Ex\u00e9cuter la requ\u00eate SQL: SELECT * FROM users WHERE active = 1\n  Action: Exporter les r\u00e9sultats vers: results1.xlsx\n  Action: Ex\u00e9cuter la requ\u00eate SQL: SELECT * FROM users WHERE status = 'active'\n  Action: Exporter les r\u00e9sultats vers: results2.xlsx\n  Action: Comparer les r\u00e9sultats de la requ\u00eate results1.xlsx avec results2.xlsx (ignorer l'ordre lors de la comparaison)\n  V\u00e9rifier: Les r\u00e9sultats sont identiques\n</code></pre>"},{"location":"testing_and_validation/#fonctionnalites_1","title":"Fonctionnalit\u00e9s","text":"<ul> <li>Export Excel : Export automatique des r\u00e9sultats SQL</li> <li>Comparaison flexible : Support de l'ignorance d'ordre</li> <li>Tol\u00e9rance : Gestion des diff\u00e9rences mineures</li> <li>Validation : Int\u00e9gration avec le syst\u00e8me de validation</li> </ul>"},{"location":"testing_and_validation/#integration-cicd","title":"Int\u00e9gration CI/CD","text":""},{"location":"testing_and_validation/#execution-automatisee","title":"Ex\u00e9cution Automatis\u00e9e","text":"<pre><code># Exemple GitHub Actions\n- name: Run KnightBatch Tests\n  run: |\n    python -m shtest_compiler.run_all --input tests/\n    python tests/e2e/ko/run_ko_tests.py\n    python src/shtest_compiler/run_tests.py --all\n</code></pre>"},{"location":"testing_and_validation/#criteres-de-qualite","title":"Crit\u00e8res de Qualit\u00e9","text":"<ul> <li>Tous les tests positifs passent : Validation du comportement attendu</li> <li>Tous les tests n\u00e9gatifs \u00e9chouent : Validation de la gestion d'erreurs</li> <li>Couverture de code : Tests unitaires pour tous les modules</li> <li>Performance : Temps d'ex\u00e9cution acceptable</li> </ul>"},{"location":"testing_and_validation/#bonnes-pratiques","title":"Bonnes Pratiques","text":""},{"location":"testing_and_validation/#ecriture-de-tests","title":"\u00c9criture de Tests","text":"<ol> <li>Tests positifs : Un test par fonctionnalit\u00e9</li> <li>Tests n\u00e9gatifs : Un test par type d'erreur</li> <li>Tests d'int\u00e9gration : Validation des flux complets</li> <li>Documentation : Commentaires clairs sur l'intention</li> </ol>"},{"location":"testing_and_validation/#validation","title":"Validation","text":"<ol> <li>Messages d'erreur : Clairs et actionnables</li> <li>Localisation : Indication pr\u00e9cise de l'erreur</li> <li>Codes de sortie : Appropri\u00e9s pour l'automatisation</li> <li>Performance : Validation rapide m\u00eame sur gros fichiers</li> </ol>"},{"location":"testing_and_validation/#maintenance","title":"Maintenance","text":"<ol> <li>Mise \u00e0 jour r\u00e9guli\u00e8re : Ajout de tests pour nouvelles fonctionnalit\u00e9s</li> <li>R\u00e9vision des erreurs : Am\u00e9lioration des messages d'erreur</li> <li>Documentation : Mise \u00e0 jour de la documentation des tests</li> <li>Performance : Optimisation des temps d'ex\u00e9cution</li> </ol>"},{"location":"user_manual/","title":"Manuel Utilisateur KnightBatch","text":"Ce manuel complet guide l'utilisateur \u00e0 travers toutes les fonctionnalit\u00e9s du framework KnightBatch, de l'installation \u00e0 l'utilisation avanc\u00e9e."},{"location":"user_manual/#table-des-matieres","title":"Table des Mati\u00e8res","text":"<ol> <li>Installation et Configuration</li> <li>Premiers Pas</li> <li>\u00c9criture de Tests</li> <li>Compilation et Ex\u00e9cution</li> <li>Validation et Debug</li> <li>Fonctionnalit\u00e9s Avanc\u00e9es</li> <li>Int\u00e9gration Continue</li> <li>D\u00e9pannage</li> </ol>"},{"location":"user_manual/#installation-et-configuration","title":"Installation et Configuration","text":""},{"location":"user_manual/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Python 3.8+ : Le framework est d\u00e9velopp\u00e9 en Python moderne</li> <li>Bash : Pour l'ex\u00e9cution des scripts g\u00e9n\u00e9r\u00e9s</li> <li>Git : Pour la gestion des versions</li> </ul>"},{"location":"user_manual/#installation","title":"Installation","text":"<pre><code># Cloner le repository\ngit clone &lt;repository-url&gt;\ncd batch-testing\n\n# Installer les d\u00e9pendances\npip install -r src/requirements.txt\n\n# V\u00e9rifier l'installation\npython src/shtest_compiler/compile_file.py --help\n</code></pre>"},{"location":"user_manual/#configuration-initiale","title":"Configuration Initiale","text":"<p>Le fichier <code>src/config.ini</code> configure les param\u00e8tres par d\u00e9faut :</p> <pre><code>[application]\ninput_dir = tests\noutput_dir = output\nsql_driver = oracle\n</code></pre>"},{"location":"user_manual/#premiers-pas","title":"Premiers Pas","text":""},{"location":"user_manual/#1-creer-votre-premier-test","title":"1. Cr\u00e9er votre Premier Test","text":"<p>Cr\u00e9ez un fichier <code>mon_premier_test.shtest</code> :</p> <pre><code>\u00c9tape: Pr\u00e9paration de l'environnement\nAction: Cr\u00e9er le dossier ./test_data\nR\u00e9sultat: le dossier est cr\u00e9\u00e9\n\n\u00c9tape: Test de cr\u00e9ation de fichier\nAction: Cr\u00e9er le fichier ./test_data/example.txt avec le contenu \"Hello World\"\nR\u00e9sultat: le fichier existe\nR\u00e9sultat: le fichier contient \"Hello World\"\n\n\u00c9tape: V\u00e9rification finale\nAction: Lister le dossier ./test_data\nR\u00e9sultat: stdout contient \"example.txt\"\n</code></pre>"},{"location":"user_manual/#2-compiler-le-test","title":"2. Compiler le Test","text":"<pre><code># Compilation simple\npython src/shtest_compiler/compile_file.py mon_premier_test.shtest\n\n# Compilation avec sortie personnalis\u00e9e\npython src/shtest_compiler/compile_file.py mon_premier_test.shtest --output mon_script.sh\n</code></pre>"},{"location":"user_manual/#3-executer-le-test","title":"3. Ex\u00e9cuter le Test","text":"<pre><code># Ex\u00e9cution directe\nbash mon_premier_test.sh\n\n# Ex\u00e9cution avec logs d\u00e9taill\u00e9s\nbash -x mon_premier_test.sh\n</code></pre>"},{"location":"user_manual/#ecriture-de-tests","title":"\u00c9criture de Tests","text":""},{"location":"user_manual/#structure-de-base","title":"Structure de Base","text":"<p>Un fichier <code>.shtest</code> suit cette structure :</p> <pre><code>\u00c9tape: Nom de l'\u00e9tape\nAction: Commande ou action \u00e0 ex\u00e9cuter\nR\u00e9sultat: Validation attendue\nR\u00e9sultat: Autre validation attendue\n\n\u00c9tape: \u00c9tape suivante\nAction: Nouvelle action\nR\u00e9sultat: Validation\n</code></pre>"},{"location":"user_manual/#types-dactions","title":"Types d'Actions","text":""},{"location":"user_manual/#actions-de-fichiers","title":"Actions de Fichiers","text":"<pre><code># Cr\u00e9ation de fichiers\nAction: Cr\u00e9er le fichier ./data/config.json\nAction: Cr\u00e9er le fichier ./logs/app.log avec le contenu \"D\u00e9marrage\"\n\n# Copie et d\u00e9placement\nAction: Copier le fichier ./source.txt vers ./dest.txt\nAction: D\u00e9placer le fichier ./old.txt vers ./archive/\n\n# Suppression\nAction: Supprimer le fichier ./temp.txt\nAction: Purger le dossier ./cache/\n</code></pre>"},{"location":"user_manual/#actions-de-dossiers","title":"Actions de Dossiers","text":"<pre><code># Cr\u00e9ation de dossiers\nAction: Cr\u00e9er le dossier ./output\nAction: Cr\u00e9er le dossier ./logs avec les droits 755\n\n# Op\u00e9rations sur dossiers\nAction: Copier le dossier ./src vers ./backup\nAction: D\u00e9placer le dossier ./old vers ./archive\n</code></pre>"},{"location":"user_manual/#actions-de-scripts","title":"Actions de Scripts","text":"<pre><code># Ex\u00e9cution de scripts\nAction: Ex\u00e9cuter le script ./setup.sh\nAction: Ex\u00e9cuter le script ./deploy.sh avec les arguments \"prod\" \"v1.2.3\"\n\n# Ex\u00e9cution avec variables d'environnement\nAction: Ex\u00e9cuter le script ./test.sh avec la variable ENV=staging\n</code></pre>"},{"location":"user_manual/#actions-sql","title":"Actions SQL","text":"<pre><code># Requ\u00eates SQL\nAction: Ex\u00e9cuter la requ\u00eate SQL \"SELECT COUNT(*) FROM users\"\nAction: Ex\u00e9cuter le script SQL ./migration.sql\n</code></pre>"},{"location":"user_manual/#types-de-validations","title":"Types de Validations","text":""},{"location":"user_manual/#validations-de-fichiers","title":"Validations de Fichiers","text":"<pre><code># Existence et contenu\nR\u00e9sultat: le fichier existe\nR\u00e9sultat: le fichier est vide\nR\u00e9sultat: le fichier contient \"texte recherch\u00e9\"\nR\u00e9sultat: le fichier contient exactement \"contenu exact\"\n\n# Comparaisons\nR\u00e9sultat: les fichiers sont identiques\nR\u00e9sultat: le fichier a \u00e9t\u00e9 copi\u00e9\nR\u00e9sultat: le fichier a \u00e9t\u00e9 d\u00e9plac\u00e9\n</code></pre>"},{"location":"user_manual/#validations-de-dossiers","title":"Validations de Dossiers","text":"<pre><code># Existence et contenu\nR\u00e9sultat: le dossier existe\nR\u00e9sultat: le dossier est vide\nR\u00e9sultat: le dossier contient 5 fichiers\nR\u00e9sultat: le dossier contient \"nom_fichier.txt\"\n</code></pre>"},{"location":"user_manual/#validations-de-sortie","title":"Validations de Sortie","text":"<pre><code># Sortie standard\nR\u00e9sultat: stdout contient \"message attendu\"\nR\u00e9sultat: stdout contient exactement \"sortie exacte\"\n\n# Sortie d'erreur\nR\u00e9sultat: stderr contient \"message d'erreur\"\nR\u00e9sultat: aucun message d'erreur\n</code></pre>"},{"location":"user_manual/#validations-de-code-de-retour","title":"Validations de Code de Retour","text":"<pre><code># Codes de retour\nR\u00e9sultat: le code de retour est 0\nR\u00e9sultat: le code de retour est diff\u00e9rent de 0\n</code></pre>"},{"location":"user_manual/#validations-de-variables","title":"Validations de Variables","text":"<pre><code># Variables d'environnement\nR\u00e9sultat: la variable ENV est d\u00e9finie\nR\u00e9sultat: la variable VERSION \u00e9gale \"1.2.3\"\n</code></pre>"},{"location":"user_manual/#variables-et-contexte","title":"Variables et Contexte","text":""},{"location":"user_manual/#variables-denvironnement","title":"Variables d'Environnement","text":"<pre><code>\u00c9tape: Configuration\nAction: D\u00e9finir la variable ENV avec la valeur \"production\"\nR\u00e9sultat: la variable est d\u00e9finie\n\n\u00c9tape: Utilisation\nAction: Ex\u00e9cuter le script ./deploy.sh\nR\u00e9sultat: stdout contient \"Deploying to production\"\n</code></pre>"},{"location":"user_manual/#variables-de-contexte","title":"Variables de Contexte","text":"<pre><code>\u00c9tape: Pr\u00e9paration\nAction: Cr\u00e9er le fichier ./config.json\nR\u00e9sultat: le fichier existe\n\n\u00c9tape: Utilisation du contexte\nAction: Ex\u00e9cuter le script ./process.sh\nR\u00e9sultat: le fichier config.json a \u00e9t\u00e9 modifi\u00e9\n</code></pre>"},{"location":"user_manual/#compilation-et-execution","title":"Compilation et Ex\u00e9cution","text":""},{"location":"user_manual/#compilation-simple","title":"Compilation Simple","text":"<pre><code># Compiler un fichier\npython src/shtest_compiler/compile_file.py test.shtest\n\n# Compiler avec options\npython src/shtest_compiler/compile_file.py test.shtest --output mon_script.sh --debug\n</code></pre>"},{"location":"user_manual/#pipeline-complet","title":"Pipeline Complet","text":"<pre><code># Compilation, validation et export Excel\npython src/shtest_compiler/run_all.py --input tests/ --output output/ --excel rapport.xlsx\n\n# Options disponibles\npython src/shtest_compiler/run_all.py --help\n</code></pre>"},{"location":"user_manual/#execution-de-tests","title":"Ex\u00e9cution de Tests","text":"<pre><code># Ex\u00e9cuter tous les tests\npython src/shtest_compiler/run_tests.py --all\n\n# Tests sp\u00e9cifiques\npython src/shtest_compiler/run_tests.py --unit\npython src/shtest_compiler/run_tests.py --e2e\npython src/shtest_compiler/run_tests.py --integration\n</code></pre>"},{"location":"user_manual/#validation-et-debug","title":"Validation et Debug","text":""},{"location":"user_manual/#validation-de-syntaxe","title":"Validation de Syntaxe","text":"<pre><code># Validation d'un fichier\npython src/shtest_compiler/verify_syntax.py test.shtest\n\n# Validation d'un r\u00e9pertoire\npython src/shtest_compiler/verify_syntax.py tests/\n\n# Mode verbose\npython src/shtest_compiler/verify_syntax.py test.shtest --verbose\n</code></pre>"},{"location":"user_manual/#mode-debug","title":"Mode Debug","text":"<pre><code># Activer le debug global\nexport SHTEST_DEBUG=1\n\n# Compilation avec debug\npython src/shtest_compiler/compile_file.py test.shtest --debug\n\n# Pipeline avec debug\npython src/shtest_compiler/run_all.py --input tests/ --debug\n</code></pre>"},{"location":"user_manual/#outils-de-diagnostic","title":"Outils de Diagnostic","text":"<pre><code># Analyser un fichier probl\u00e9matique\npython tests/e2e/ko/debug_parser.py\n\n# V\u00e9rifier la structure AST\npython -c \"\nfrom shtest_compiler.parser.configurable_parser import ConfigurableParser\nparser = ConfigurableParser(debug=True)\nwith open('test.shtest') as f:\n    ast = parser.parse(f.read())\nprint('AST valide')\n\"\n</code></pre>"},{"location":"user_manual/#fonctionnalites-avancees","title":"Fonctionnalit\u00e9s Avanc\u00e9es","text":""},{"location":"user_manual/#plugins-personnalises","title":"Plugins Personnalis\u00e9s","text":""},{"location":"user_manual/#creer-un-plugin","title":"Cr\u00e9er un Plugin","text":"<pre><code># plugins/mon_plugin.py\nfrom shtest_compiler.core.handlers.base import BaseHandler\n\nclass MonHandler(BaseHandler):\n    def can_handle(self, action):\n        return \"mon_action\" in action.lower()\n\n    def handle(self, action, context):\n        # Logique de traitement\n        return f\"echo 'Action personnalis\u00e9e: {action}'\"\n</code></pre>"},{"location":"user_manual/#configuration-yaml","title":"Configuration YAML","text":"<pre><code># config/patterns_actions.yml\nmon_action:\n  handler: mon_plugin.MonHandler\n  description: \"Action personnalis\u00e9e\"\n  examples:\n    - \"Action: mon_action avec param\u00e8tre\"\n</code></pre>"},{"location":"user_manual/#validation-avancee","title":"Validation Avanc\u00e9e","text":""},{"location":"user_manual/#validations-combinees","title":"Validations Combin\u00e9es","text":"<pre><code>\u00c9tape: Test complexe\nAction: Cr\u00e9er le fichier ./data.json avec le contenu '{\"status\": \"ok\"}'\nR\u00e9sultat: le fichier existe\nR\u00e9sultat: le fichier contient \"status\"\nR\u00e9sultat: stdout contient \"Fichier cr\u00e9\u00e9 avec succ\u00e8s\"\n</code></pre>"},{"location":"user_manual/#validations-conditionnelles","title":"Validations Conditionnelles","text":"<pre><code>\u00c9tape: Test conditionnel\nAction: Ex\u00e9cuter le script ./check_status.sh\nR\u00e9sultat: le code de retour est 0 OU stdout contient \"warning\"\n</code></pre>"},{"location":"user_manual/#integration-avec-base-de-donnees","title":"Int\u00e9gration avec Base de Donn\u00e9es","text":"<pre><code>\u00c9tape: Test base de donn\u00e9es\nAction: Ex\u00e9cuter la requ\u00eate SQL \"SELECT COUNT(*) FROM users WHERE active = 1\"\nR\u00e9sultat: stdout contient \"5\"\n</code></pre>"},{"location":"user_manual/#integration-continue","title":"Int\u00e9gration Continue","text":""},{"location":"user_manual/#configuration-cicd","title":"Configuration CI/CD","text":""},{"location":"user_manual/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/test.yml\nname: KnightBatch Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n      - name: Install dependencies\n        run: |\n          pip install -r src/requirements.txt\n      - name: Run tests\n        run: |\n          python src/shtest_compiler/run_tests.py --all\n</code></pre>"},{"location":"user_manual/#jenkins-pipeline","title":"Jenkins Pipeline","text":"<pre><code>// Jenkinsfile\npipeline {\n    agent any\n    stages {\n        stage('Test') {\n            steps {\n                sh 'pip install -r src/requirements.txt'\n                sh 'python src/shtest_compiler/run_tests.py --all'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"user_manual/#rapports-automatises","title":"Rapports Automatis\u00e9s","text":"<pre><code># G\u00e9n\u00e9rer un rapport complet\npython src/shtest_compiler/run_all.py \\\n  --input tests/ \\\n  --output reports/ \\\n  --excel rapport_$(date +%Y%m%d).xlsx\n</code></pre>"},{"location":"user_manual/#depannage","title":"D\u00e9pannage","text":""},{"location":"user_manual/#erreurs-communes","title":"Erreurs Communes","text":""},{"location":"user_manual/#erreur-de-syntaxe","title":"Erreur de Syntaxe","text":"<pre><code>[ERROR] Parse error in file: AST validation failed: Found orphaned action...\n</code></pre> <p>Solution : V\u00e9rifiez que chaque action est pr\u00e9c\u00e9d\u00e9e d'un mot-cl\u00e9 <code>\u00c9tape:</code>.</p>"},{"location":"user_manual/#erreur-de-validation","title":"Erreur de Validation","text":"<pre><code>[ERROR] Validation failed: File is empty or contains no steps\n</code></pre> <p>Solution : Assurez-vous que le fichier contient au moins une \u00e9tape compl\u00e8te.</p>"},{"location":"user_manual/#erreur-de-plugin","title":"Erreur de Plugin","text":"<pre><code>[ERROR] Handler not found for action: action_inconnue\n</code></pre> <p>Solution : V\u00e9rifiez que l'action est d\u00e9finie dans <code>config/patterns_actions.yml</code>.</p>"},{"location":"user_manual/#debug-avance","title":"Debug Avanc\u00e9","text":""},{"location":"user_manual/#analyser-les-tokens","title":"Analyser les Tokens","text":"<pre><code># Activer le debug du lexer\nexport SHTEST_DEBUG=1\npython src/shtest_compiler/compile_file.py test.shtest --debug\n</code></pre>"},{"location":"user_manual/#verifier-last","title":"V\u00e9rifier l'AST","text":"<pre><code>from shtest_compiler.parser.configurable_parser import ConfigurableParser\nimport json\n\nparser = ConfigurableParser(debug=True)\nwith open('test.shtest') as f:\n    ast = parser.parse(f.read())\n\n# Afficher la structure AST\nprint(json.dumps(ast.to_dict(), indent=2))\n</code></pre>"},{"location":"user_manual/#support","title":"Support","text":"<ul> <li>Documentation : Consultez les autres sections de cette documentation</li> <li>Tests d'exemple : Explorez le dossier <code>tests/e2e/</code> pour des exemples</li> <li>Logs de debug : Utilisez le mode <code>--debug</code> pour des informations d\u00e9taill\u00e9es</li> </ul>"},{"location":"user_manual/#conclusion","title":"Conclusion","text":"<p>KnightBatch offre un framework puissant et flexible pour l'automatisation de tests. Ce manuel couvre les fonctionnalit\u00e9s essentielles et avanc\u00e9es. Pour plus d'informations :</p> <ul> <li>Format SHTEST - Syntaxe d\u00e9taill\u00e9e</li> <li>Architecture Modulaire - Documentation technique</li> <li>Guide D\u00e9veloppeur - Pour les contributeurs</li> <li>Extension VS Code - Outils de d\u00e9veloppement</li> </ul>"},{"location":"vscode_extension/","title":"Extension VS Code","text":"<p>Cette page documente l'extension VS Code pour KnightBatch, qui fournit un support complet pour l'\u00e9dition et la compilation de fichiers <code>.shtest</code>.</p>"},{"location":"vscode_extension/#vue-densemble","title":"Vue d'ensemble","text":"<p>L'extension VS Code KnightBatch offre une exp\u00e9rience de d\u00e9veloppement int\u00e9gr\u00e9e pour cr\u00e9er, \u00e9diter et compiler des sc\u00e9narios de test <code>.shtest</code>. Elle supporte la nouvelle architecture modulaire et maintient la compatibilit\u00e9 avec les anciens patterns.</p>"},{"location":"vscode_extension/#fonctionnalites-principales","title":"Fonctionnalit\u00e9s Principales","text":"<ul> <li>** Coloration syntaxique** : Support complet pour tous les \u00e9l\u00e9ments <code>.shtest</code></li> <li>\u26a1 Commandes int\u00e9gr\u00e9es : Compilation, v\u00e9rification, visualisation AST</li> <li>** Snippets intelligents** : Templates pour patterns courants</li> <li>\u2699\ufe0f Configuration flexible : Param\u00e8tres personnalisables</li> <li>** IntelliSense** : Autocompl\u00e9tion et validation en temps r\u00e9el</li> </ul>"},{"location":"vscode_extension/#installation","title":"Installation","text":""},{"location":"vscode_extension/#depuis-le-marketplace-vs-code","title":"Depuis le Marketplace VS Code","text":"<ol> <li>Ouvrez VS Code</li> <li>Allez dans Extensions (Ctrl+Shift+X)</li> <li>Recherchez \"KnightBatch\"</li> <li>Cliquez sur \"Installer\"</li> </ol>"},{"location":"vscode_extension/#depuis-un-fichier-vsix","title":"Depuis un fichier VSIX","text":"<ol> <li>T\u00e9l\u00e9chargez le fichier <code>.vsix</code> depuis les releases</li> <li>Dans VS Code, allez dans Extensions (Ctrl+Shift+X)</li> <li>Cliquez sur \"...\" et s\u00e9lectionnez \"Installer depuis VSIX...\"</li> <li>S\u00e9lectionnez le fichier t\u00e9l\u00e9charg\u00e9</li> </ol>"},{"location":"vscode_extension/#depuis-les-sources","title":"Depuis les sources","text":"<pre><code>cd vscode\nnpm install\nnpm run compile\nnpx vsce package\n</code></pre> <p>Puis installez le fichier <code>.vsix</code> g\u00e9n\u00e9r\u00e9.</p>"},{"location":"vscode_extension/#commandes-disponibles","title":"Commandes Disponibles","text":""},{"location":"vscode_extension/#compilation","title":"Compilation","text":""},{"location":"vscode_extension/#knightbatch-compile-current-file","title":"KnightBatch: Compile Current File","text":"<p>Compile le fichier <code>.shtest</code> actuellement ouvert en script shell.</p> <p>Utilisation : - Ouvrez un fichier <code>.shtest</code> - Appuyez sur Ctrl+Shift+P - Tapez \"KnightBatch: Compile Current File\" - Le script shell sera g\u00e9n\u00e9r\u00e9 dans le dossier de sortie configur\u00e9</p> <p>R\u00e9sultat : - Script shell g\u00e9n\u00e9r\u00e9 dans le dossier de sortie - Ouverture automatique du fichier g\u00e9n\u00e9r\u00e9 - Message de confirmation ou d'erreur</p>"},{"location":"vscode_extension/#knightbatch-compile-directory","title":"KnightBatch: Compile Directory","text":"<p>Compile tous les fichiers <code>.shtest</code> du workspace.</p> <p>Utilisation : - Clic droit sur un dossier dans l'explorateur - S\u00e9lectionnez \"KnightBatch: Compile Directory\" - Ou utilisez la palette de commandes</p> <p>R\u00e9sultat : - Tous les fichiers <code>.shtest</code> sont compil\u00e9s - Rapport du nombre de fichiers trait\u00e9s</p>"},{"location":"vscode_extension/#verification","title":"V\u00e9rification","text":""},{"location":"vscode_extension/#knightbatch-verify-syntax","title":"KnightBatch: Verify Syntax","text":"<p>V\u00e9rifie la syntaxe du fichier <code>.shtest</code> actuel.</p> <p>Utilisation : - Ouvrez un fichier <code>.shtest</code> - Appuyez sur Ctrl+Shift+P - Tapez \"KnightBatch: Verify Syntax\"</p> <p>R\u00e9sultat : - Message de succ\u00e8s si la syntaxe est correcte - D\u00e9tails des erreurs si la syntaxe est incorrecte</p>"},{"location":"vscode_extension/#analyse","title":"Analyse","text":""},{"location":"vscode_extension/#knightbatch-show-ast","title":"KnightBatch: Show AST","text":"<p>Affiche l'Arbre de Syntaxe Abstraite (AST) du fichier actuel.</p> <p>Utilisation : - Ouvrez un fichier <code>.shtest</code> - Appuyez sur Ctrl+Shift+P - Tapez \"KnightBatch: Show AST\"</p> <p>R\u00e9sultat : - Nouvel onglet avec l'AST au format JSON - Structure d\u00e9taill\u00e9e des n\u0153uds et relations</p>"},{"location":"vscode_extension/#knightbatch-show-tokens","title":"KnightBatch: Show Tokens","text":"<p>Affiche les tokens g\u00e9n\u00e9r\u00e9s par le lexer.</p> <p>Utilisation : - Ouvrez un fichier <code>.shtest</code> - Appuyez sur Ctrl+Shift+P - Tapez \"KnightBatch: Show Tokens\"</p> <p>R\u00e9sultat : - Nouvel onglet avec la liste des tokens - Informations sur le type et la valeur de chaque token</p>"},{"location":"vscode_extension/#export","title":"Export","text":""},{"location":"vscode_extension/#knightbatch-export-to-excel","title":"KnightBatch: Export to Excel","text":"<p>Exporte tous les sc\u00e9narios de test vers un fichier Excel.</p> <p>Utilisation : - Clic droit sur un fichier <code>.shtest</code> dans l'explorateur - S\u00e9lectionnez \"KnightBatch: Export to Excel\"</p> <p>R\u00e9sultat : - Fichier Excel g\u00e9n\u00e9r\u00e9 avec tous les sc\u00e9narios - Rapport du nombre de fichiers export\u00e9s</p>"},{"location":"vscode_extension/#coloration-syntaxique","title":"Coloration Syntaxique","text":"<p>L'extension fournit une coloration syntaxique compl\u00e8te pour tous les \u00e9l\u00e9ments <code>.shtest</code> :</p>"},{"location":"vscode_extension/#elements-de-base","title":"\u00c9l\u00e9ments de Base","text":"<ul> <li>Actions : <code>Action:</code> en bleu</li> <li>R\u00e9sultats : <code>R\u00e9sultat:</code> en vert</li> <li>\u00c9tapes : <code>Etape:</code> en violet</li> <li>Commentaires : <code>#</code> en gris</li> </ul>"},{"location":"vscode_extension/#operations-sql","title":"Op\u00e9rations SQL","text":"<ul> <li>Variables SQL : <code>SQL_DRIVER</code>, <code>SQL_CONN</code> en orange</li> <li>Moteurs SQL : <code>mysql</code>, <code>oracle</code>, <code>postgres</code> en cyan</li> <li>Scripts SQL : <code>script SQL</code> en jaune</li> </ul>"},{"location":"vscode_extension/#operations-fichier","title":"Op\u00e9rations Fichier","text":"<ul> <li>Actions fichier : <code>cr\u00e9er</code>, <code>copier</code>, <code>toucher</code> en bleu</li> <li>Permissions : <code>0600</code>, <code>0644</code>, <code>0755</code> en rouge</li> <li>\u00c9tats fichier : <code>pr\u00e9sent</code>, <code>existe</code>, <code>cr\u00e9\u00e9</code> en vert</li> </ul>"},{"location":"vscode_extension/#operateurs-logiques","title":"Op\u00e9rateurs Logiques","text":"<ul> <li>Connecteurs : <code>et</code>, <code>ou</code> en violet</li> <li>Flux : <code>stdout</code>, <code>stderr</code> en orange</li> <li>Comparaisons : <code>contient</code>, <code>est</code>, <code>identique</code> en jaune</li> </ul>"},{"location":"vscode_extension/#snippets","title":"Snippets","text":"<p>L'extension fournit des snippets organis\u00e9s pour acc\u00e9l\u00e9rer l'\u00e9criture :</p>"},{"location":"vscode_extension/#snippets-de-base","title":"Snippets de Base","text":"<ul> <li><code>step</code> - Cr\u00e9er un nouveau bloc d'\u00e9tape</li> <li><code>action</code> - Cr\u00e9er une action avec r\u00e9sultat</li> <li><code>exec</code> - Ex\u00e9cuter un script</li> <li><code>createfile</code> - Cr\u00e9er un fichier</li> <li><code>createdir</code> - Cr\u00e9er un dossier</li> </ul>"},{"location":"vscode_extension/#snippets-sql","title":"Snippets SQL","text":"<ul> <li><code>sqlconn</code> - Configuration de connexion SQL</li> <li><code>sqlscript</code> - Ex\u00e9cution de script SQL</li> </ul>"},{"location":"vscode_extension/#snippets-de-validation","title":"Snippets de Validation","text":"<ul> <li><code>fileexists</code> - V\u00e9rifier l'existence d'un fichier</li> <li><code>filecontent</code> - V\u00e9rifier le contenu d'un fichier</li> <li><code>noerrors</code> - V\u00e9rifier l'absence d'erreurs</li> <li><code>complex</code> - Validation complexe avec op\u00e9rateurs logiques</li> </ul>"},{"location":"vscode_extension/#snippets-avances","title":"Snippets Avanc\u00e9s","text":"<ul> <li><code>execout</code> - Ex\u00e9cution avec validation de sortie</li> <li><code>execargs</code> - Ex\u00e9cution avec arguments</li> <li><code>checkperm</code> - V\u00e9rification de permissions</li> <li><code>checkdate</code> - V\u00e9rification de date</li> </ul> <p>Utilisation : 1. Tapez le pr\u00e9fixe du snippet 2. Appuyez sur Tab 3. Remplissez les variables <code>$1</code>, <code>$2</code>, etc.</p>"},{"location":"vscode_extension/#configuration","title":"Configuration","text":""},{"location":"vscode_extension/#parametres-vs-code","title":"Param\u00e8tres VS Code","text":"<p>Ajoutez ces param\u00e8tres dans vos param\u00e8tres VS Code :</p> <pre><code>{\n  \"knightbatch.configPath\": \"config/patterns_hybrid.yml\",\n  \"knightbatch.aliasesPath\": \"config/aliases.yml\",\n  \"knightbatch.outputDirectory\": \"output\",\n  \"knightbatch.sqlDriver\": \"mysql\",\n  \"knightbatch.debugMode\": false\n}\n</code></pre>"},{"location":"vscode_extension/#parametres-disponibles","title":"Param\u00e8tres Disponibles","text":"Param\u00e8tre Description D\u00e9faut <code>configPath</code> Chemin vers le fichier de patterns <code>config/patterns_hybrid.yml</code> <code>aliasesPath</code> Chemin vers le fichier d'alias <code>config/aliases.yml</code> <code>outputDirectory</code> Dossier de sortie pour les scripts <code>output</code> <code>sqlDriver</code> Moteur SQL par d\u00e9faut <code>mysql</code> <code>debugMode</code> Mode debug pour logs d\u00e9taill\u00e9s <code>false</code>"},{"location":"vscode_extension/#configuration-par-workspace","title":"Configuration par Workspace","text":"<p>Cr\u00e9ez un fichier <code>.vscode/settings.json</code> dans votre workspace :</p> <pre><code>{\n  \"knightbatch.configPath\": \"config/custom_patterns.yml\",\n  \"knightbatch.outputDirectory\": \"generated_scripts\",\n  \"knightbatch.sqlDriver\": \"oracle\"\n}\n</code></pre>"},{"location":"vscode_extension/#exemples-dutilisation","title":"Exemples d'Utilisation","text":""},{"location":"vscode_extension/#scenario-de-test-complet","title":"Sc\u00e9nario de Test Complet","text":"<pre><code># Test d'int\u00e9gration base de donn\u00e9es\nEtape: Configuration\nAction: D\u00e9finir la variable SQL_DRIVER = mysql ; R\u00e9sultat: identifiants configur\u00e9s.\nAction: D\u00e9finir la variable SQL_CONN = user/pass@testdb ; R\u00e9sultat: identifiants configur\u00e9s.\n\nEtape: Pr\u00e9paration\nAction: Cr\u00e9er le dossier /tmp/test avec les droits 0755 ; R\u00e9sultat: le dossier est cr\u00e9\u00e9.\nAction: Cr\u00e9er le fichier /tmp/test/input.txt avec les droits 0644 ; R\u00e9sultat: le fichier est pr\u00e9sent.\n\nEtape: Ex\u00e9cution\nAction: Ex\u00e9cuter le script SQL init.sql ; R\u00e9sultat: La base est pr\u00eate.\nAction: Ex\u00e9cuter /opt/batch/process.sh ; R\u00e9sultat: retour 0 et stdout contient \"SUCCESS\".\n\nEtape: Validation\nAction: V\u00e9rifier que le fichier /tmp/test/output.txt existe ; R\u00e9sultat: le fichier existe.\nAction: Comparer le fichier /tmp/test/output.txt avec /tmp/test/expected.txt ; R\u00e9sultat: fichiers identiques.\n</code></pre>"},{"location":"vscode_extension/#utilisation-des-snippets","title":"Utilisation des Snippets","text":"<ol> <li>Cr\u00e9er une \u00e9tape : Tapez <code>step</code> + Tab</li> <li>Ajouter une action : Tapez <code>action</code> + Tab</li> <li>Configurer SQL : Tapez <code>sqlconn</code> + Tab</li> <li>Valider un fichier : Tapez <code>fileexists</code> + Tab</li> </ol>"},{"location":"vscode_extension/#compilation-rapide","title":"Compilation Rapide","text":"<ol> <li>Ouvrez un fichier <code>.shtest</code></li> <li>Appuyez sur Ctrl+Shift+P</li> <li>Tapez \"KnightBatch: Compile Current File\"</li> <li>Le script shell est g\u00e9n\u00e9r\u00e9 automatiquement</li> </ol>"},{"location":"vscode_extension/#integration-avec-larchitecture-modulaire","title":"Int\u00e9gration avec l'Architecture Modulaire","text":"<p>L'extension supporte pleinement la nouvelle architecture modulaire :</p>"},{"location":"vscode_extension/#support-des-patterns-configurables","title":"Support des Patterns Configurables","text":"<ul> <li>Utilise les patterns d\u00e9finis dans <code>patterns_hybrid.yml</code></li> <li>Support des alias d\u00e9finis dans <code>aliases.yml</code></li> <li>Chargement dynamique de la configuration</li> </ul>"},{"location":"vscode_extension/#support-des-plugins","title":"Support des Plugins","text":"<ul> <li>Les plugins sont automatiquement d\u00e9tect\u00e9s</li> <li>Les nouveaux matchers sont disponibles dans l'IntelliSense</li> <li>Les nouvelles validations sont reconnues</li> </ul>"},{"location":"vscode_extension/#debug-et-diagnostic","title":"Debug et Diagnostic","text":"<ul> <li>Mode debug pour logs d\u00e9taill\u00e9s</li> <li>Affichage AST pour diagnostic</li> <li>Affichage tokens pour d\u00e9bogage</li> </ul>"},{"location":"vscode_extension/#depannage","title":"D\u00e9pannage","text":""},{"location":"vscode_extension/#problemes-courants","title":"Probl\u00e8mes Courants","text":""},{"location":"vscode_extension/#extension-ne-se-charge-pas","title":"Extension ne se charge pas","text":"<ol> <li>V\u00e9rifiez que vous \u00eates dans un workspace avec des fichiers <code>.shtest</code></li> <li>Red\u00e9marrez VS Code</li> <li>V\u00e9rifiez les logs d'extension (Help &gt; Toggle Developer Tools)</li> </ol>"},{"location":"vscode_extension/#commandes-non-disponibles","title":"Commandes non disponibles","text":"<ol> <li>V\u00e9rifiez que l'extension est activ\u00e9e</li> <li>Ouvrez un fichier <code>.shtest</code></li> <li>V\u00e9rifiez que vous \u00eates dans le bon workspace</li> </ol>"},{"location":"vscode_extension/#erreurs-de-compilation","title":"Erreurs de compilation","text":"<ol> <li>Activez le mode debug dans les param\u00e8tres</li> <li>V\u00e9rifiez les chemins de configuration</li> <li>V\u00e9rifiez que KnightBatch est install\u00e9 dans le workspace</li> </ol>"},{"location":"vscode_extension/#snippets-ne-fonctionnent-pas","title":"Snippets ne fonctionnent pas","text":"<ol> <li>V\u00e9rifiez que le fichier a l'extension <code>.shtest</code></li> <li>V\u00e9rifiez que la langue est d\u00e9tect\u00e9e comme \"shtest\"</li> <li>Red\u00e9marrez VS Code</li> </ol>"},{"location":"vscode_extension/#mode-debug","title":"Mode Debug","text":"<p>Activez le mode debug pour obtenir des informations d\u00e9taill\u00e9es :</p> <pre><code>{\n  \"knightbatch.debugMode\": true\n}\n</code></pre> <p>Les logs appara\u00eetront dans la console de d\u00e9veloppement (Help &gt; Toggle Developer Tools).</p>"},{"location":"vscode_extension/#logs-dextension","title":"Logs d'Extension","text":"<p>Pour voir les logs de l'extension : 1. Appuyez sur Ctrl+Shift+P 2. Tapez \"Developer: Show Logs\" 3. S\u00e9lectionnez \"Extension Host\"</p>"},{"location":"vscode_extension/#developpement","title":"D\u00e9veloppement","text":""},{"location":"vscode_extension/#structure-du-projet","title":"Structure du Projet","text":"<pre><code>vscode/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 extension.ts          # Point d'entr\u00e9e principal\n\u2502   \u2514\u2500\u2500 test/                 # Tests unitaires\n\u251c\u2500\u2500 syntaxes/\n\u2502   \u2514\u2500\u2500 shtest.tmLanguage.json # Coloration syntaxique\n\u251c\u2500\u2500 snippets/\n\u2502   \u2514\u2500\u2500 shtest.code-snippets  # Snippets\n\u251c\u2500\u2500 themes/\n\u2502   \u2514\u2500\u2500 shellTest.colorTheme.json # Th\u00e8me de couleur\n\u2514\u2500\u2500 package.json              # Configuration de l'extension\n</code></pre>"},{"location":"vscode_extension/#ajouter-de-nouveaux-snippets","title":"Ajouter de Nouveaux Snippets","text":"<ol> <li>\u00c9ditez <code>snippets/shtest.code-snippets</code></li> <li>Ajoutez un nouveau snippet :</li> </ol> <pre><code>{\n  \"Nouveau Snippet\": {\n    \"prefix\": \"newsnippet\",\n    \"body\": [\n      \"Action: $1 ; R\u00e9sultat: $2\"\n    ],\n    \"description\": \"Description du nouveau snippet\"\n  }\n}\n</code></pre>"},{"location":"vscode_extension/#modifier-la-coloration-syntaxique","title":"Modifier la Coloration Syntaxique","text":"<ol> <li>\u00c9ditez <code>syntaxes/shtest.tmLanguage.json</code></li> <li>Ajoutez de nouveaux patterns dans la section appropri\u00e9e</li> <li>Testez avec Ctrl+Shift+P &gt; \"Developer: Reload Window\"</li> </ol>"},{"location":"vscode_extension/#tests","title":"Tests","text":"<p>Ex\u00e9cutez les tests de l'extension :</p> <pre><code>cd vscode\nnpm test\n</code></pre>"},{"location":"vscode_extension/#ressources","title":"Ressources","text":"<ul> <li>Documentation de l'architecture modulaire</li> <li>Guide de configuration</li> <li>Format SHTEST</li> <li>Repository GitHub</li> </ul> <p>Pour plus d'informations sur l'utilisation pratique, consultez les exemples d'utilisation et la documentation CLI.</p>"}]}