ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 28 lines
[DEBUG] Lexing text with 28 lines
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Example KnightBatch Test Scenario at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Example KnightBatch Test Scenario at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Example KnightBatch Test Scenario at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# Example KnightBatch Test Scenario at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.COMMENT, value=# Example KnightBatch Test Scenario, result=None, original=# Example KnightBatch Test Scenario at line 1
[DEBUG] Yielding token: COMMENT@1:0 '# Example KnightBatch Test Scenario'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# This file demonstrates the new modular architecture features at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# This file demonstrates the new modular architecture features at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# This file demonstrates the new modular architecture features at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=# This file demonstrates the new modular architecture features at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.COMMENT, value=# This file demonstrates the new modular architecture features, result=None, original=# This file demonstrates the new modular architecture features at line 1
[DEBUG] Yielding token: COMMENT@1:0 '# This file demonstrates the new modular architecture features'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Setup - Database Connection, result=('Setup - Database Connection',), original=Etape: Setup - Database Connection at line 1
[DEBUG] Yielding token: STEP@1:0 'Setup - Database Connection' -> '('Setup - Database Connection',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable SQL_DRIVER = mysql ; Résultat: identifiants configurés. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Définir la variable SQL_DRIVER = mysql, result=('Définir la variable SQL_DRIVER = mysql', 'identifiants configurés.', None), original=Action: Définir la variable SQL_DRIVER = mysql ; Résultat: identifiants configurés. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Définir la variable SQL_DRIVER = mysql' -> '('Définir la variable SQL_DRIVER = mysql', 'identifiants configurés.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable SQL_CONN = user/password@testdb ; Résultat: identifiants configurés. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Définir la variable SQL_CONN = user/password@testdb, result=('Définir la variable SQL_CONN = user/password@testdb', 'identifiants configurés.', None), original=Action: Définir la variable SQL_CONN = user/password@testdb ; Résultat: identifiants configurés. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Définir la variable SQL_CONN = user/password@testdb' -> '('Définir la variable SQL_CONN = user/password@testdb', 'identifiants configurés.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Setup - File System, result=('Setup - File System',), original=Etape: Setup - File System at line 1
[DEBUG] Yielding token: STEP@1:0 'Setup - File System' -> '('Setup - File System',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le dossier /tmp/knightbatch_test avec les droits 0755 ; Résultat: le dossier est créé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le dossier /tmp/knightbatch_test avec les droits 0755, result=('Créer le dossier /tmp/knightbatch_test avec les droits 0755', 'le dossier est créé.', None), original=Action: Créer le dossier /tmp/knightbatch_test avec les droits 0755 ; Résultat: le dossier est créé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le dossier /tmp/knightbatch_test avec les droits 0755' -> '('Créer le dossier /tmp/knightbatch_test avec les droits 0755', 'le dossier est créé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644 ; Résultat: le fichier est présent. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644, result=('Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644', 'le fichier est présent.', None), original=Action: Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644 ; Résultat: le fichier est présent. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644' -> '('Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644', 'le fichier est présent.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Toucher le fichier /tmp/knightbatch_test/old.txt -t 202201010000 ; Résultat: date modifiée. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Toucher le fichier /tmp/knightbatch_test/old.txt -t 202201010000, result=('Toucher le fichier /tmp/knightbatch_test/old.txt -t 202201010000', 'date modifiée.', None), original=Action: Toucher le fichier /tmp/knightbatch_test/old.txt -t 202201010000 ; Résultat: date modifiée. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Toucher le fichier /tmp/knightbatch_test/old.txt -t 202201010000' -> '('Toucher le fichier /tmp/knightbatch_test/old.txt -t 202201010000', 'date modifiée.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Database Operations, result=('Database Operations',), original=Etape: Database Operations at line 1
[DEBUG] Yielding token: STEP@1:0 'Database Operations' -> '('Database Operations',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter le script SQL init_database.sql ; Résultat: La base est prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter le script SQL init_database.sql, result=('Exécuter le script SQL init_database.sql', 'La base est prête.', None), original=Action: Exécuter le script SQL init_database.sql ; Résultat: La base est prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter le script SQL init_database.sql' -> '('Exécuter le script SQL init_database.sql', 'La base est prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter le script SQL load_data.sql ; Résultat: La base est prête pour le test. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter le script SQL load_data.sql, result=('Exécuter le script SQL load_data.sql', 'La base est prête pour le test.', None), original=Action: Exécuter le script SQL load_data.sql ; Résultat: La base est prête pour le test. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter le script SQL load_data.sql' -> '('Exécuter le script SQL load_data.sql', 'La base est prête pour le test.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Process Execution, result=('Process Execution',), original=Etape: Process Execution at line 1
[DEBUG] Yielding token: STEP@1:0 'Process Execution' -> '('Process Execution',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter /opt/batch/process_data.sh ; Résultat: retour 0 et (stdout contient "Succès complet" ou stderr contient WARNING). at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter /opt/batch/process_data.sh, result=('Exécuter /opt/batch/process_data.sh', 'retour 0 et (stdout contient "Succès complet" ou stderr contient WARNING).', None), original=Action: Exécuter /opt/batch/process_data.sh ; Résultat: retour 0 et (stdout contient "Succès complet" ou stderr contient WARNING). at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter /opt/batch/process_data.sh' -> '('Exécuter /opt/batch/process_data.sh', 'retour 0 et (stdout contient "Succès complet" ou stderr contient WARNING).', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter /opt/batch/validate.sh avec l'argument mode=test ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter /opt/batch/validate.sh avec l'argument mode=test, result=("Exécuter /opt/batch/validate.sh avec l'argument mode=test", 'retour 0.', None), original=Action: Exécuter /opt/batch/validate.sh avec l'argument mode=test ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter /opt/batch/validate.sh avec l'argument mode=test' -> '("Exécuter /opt/batch/validate.sh avec l'argument mode=test", 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Validation, result=('Validation',), original=Etape: Validation at line 1
[DEBUG] Yielding token: STEP@1:0 'Validation' -> '('Validation',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/knightbatch_test/output.txt existe ; Résultat: le fichier existe. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/knightbatch_test/output.txt existe, result=('Vérifier que le fichier /tmp/knightbatch_test/output.txt existe', 'le fichier existe.', None), original=Action: Vérifier que le fichier /tmp/knightbatch_test/output.txt existe ; Résultat: le fichier existe. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/knightbatch_test/output.txt existe' -> '('Vérifier que le fichier /tmp/knightbatch_test/output.txt existe', 'le fichier existe.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Comparer le fichier /tmp/knightbatch_test/output.txt avec /tmp/knightbatch_test/expected.txt ; Résultat: fichiers identiques. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Comparer le fichier /tmp/knightbatch_test/output.txt avec /tmp/knightbatch_test/expected.txt, result=('Comparer le fichier /tmp/knightbatch_test/output.txt avec /tmp/knightbatch_test/expected.txt', 'fichiers identiques.', None), original=Action: Comparer le fichier /tmp/knightbatch_test/output.txt avec /tmp/knightbatch_test/expected.txt ; Résultat: fichiers identiques. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Comparer le fichier /tmp/knightbatch_test/output.txt avec /tmp/knightbatch_test/expected.txt' -> '('Comparer le fichier /tmp/knightbatch_test/output.txt avec /tmp/knightbatch_test/expected.txt', 'fichiers identiques.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/knightbatch_test/output.txt contient "SUCCESS" ; Résultat: contenu correct. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/knightbatch_test/output.txt contient "SUCCESS", result=('Vérifier que le fichier /tmp/knightbatch_test/output.txt contient "SUCCESS"', 'contenu correct.', None), original=Action: Vérifier que le fichier /tmp/knightbatch_test/output.txt contient "SUCCESS" ; Résultat: contenu correct. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/knightbatch_test/output.txt contient "SUCCESS"' -> '('Vérifier que le fichier /tmp/knightbatch_test/output.txt contient "SUCCESS"', 'contenu correct.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=Cleanup, result=('Cleanup',), original=Etape: Cleanup at line 1
[DEBUG] Yielding token: STEP@1:0 'Cleanup' -> '('Cleanup',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vider le répertoire /tmp/knightbatch_test/temp ; Résultat: le dossier est prêt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vider le répertoire /tmp/knightbatch_test/temp, result=('Vider le répertoire /tmp/knightbatch_test/temp', 'le dossier est prêt.', None), original=Action: Vider le répertoire /tmp/knightbatch_test/temp ; Résultat: le dossier est prêt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vider le répertoire /tmp/knightbatch_test/temp' -> '('Vider le répertoire /tmp/knightbatch_test/temp', 'le dossier est prêt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier qu'aucune erreur n'apparaît ; Résultat: aucun message d'erreur. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier qu'aucune erreur n'apparaît, result=("Vérifier qu'aucune erreur n'apparaît", "aucun message d'erreur.", None), original=Action: Vérifier qu'aucune erreur n'apparaît ; Résultat: aucun message d'erreur.  at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier qu'aucune erreur n'apparaît' -> '("Vérifier qu'aucune erreur n'apparaît", "aucun message d'erreur.", None)'
[DEBUG] Got 28 tokens
[DEBUG] Grammar: _merge_action_result called with 28 tokens
[DEBUG] Grammar: Token 0: kind=COMMENT, value='# Example KnightBatch Test Scenario'
[DEBUG] Grammar: Token 1: kind=COMMENT, value='# This file demonstrates the new modular architecture features'
[DEBUG] Grammar: Token 2: kind=EMPTY, value=''
[DEBUG] Grammar: Token 3: kind=STEP, value='Setup - Database Connection'
[DEBUG] Grammar: Token 4: kind=ACTION_RESULT, value='Définir la variable SQL_DRIVER = mysql'
[DEBUG] Grammar: Token 5: kind=ACTION_RESULT, value='Définir la variable SQL_CONN = user/password@testdb'
[DEBUG] Grammar: Token 6: kind=EMPTY, value=''
[DEBUG] Grammar: Token 7: kind=STEP, value='Setup - File System'
[DEBUG] Grammar: Token 8: kind=ACTION_RESULT, value='Créer le dossier /tmp/knightbatch_test avec les droits 0755'
[DEBUG] Grammar: Token 9: kind=ACTION_RESULT, value='Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644'
[DEBUG] Grammar: Token 10: kind=ACTION_RESULT, value='Toucher le fichier /tmp/knightbatch_test/old.txt -t 202201010000'
[DEBUG] Grammar: Token 11: kind=EMPTY, value=''
[DEBUG] Grammar: Token 12: kind=STEP, value='Database Operations'
[DEBUG] Grammar: Token 13: kind=ACTION_RESULT, value='Exécuter le script SQL init_database.sql'
[DEBUG] Grammar: Token 14: kind=ACTION_RESULT, value='Exécuter le script SQL load_data.sql'
[DEBUG] Grammar: Token 15: kind=EMPTY, value=''
[DEBUG] Grammar: Token 16: kind=STEP, value='Process Execution'
[DEBUG] Grammar: Token 17: kind=ACTION_RESULT, value='Exécuter /opt/batch/process_data.sh'
[DEBUG] Grammar: Token 18: kind=ACTION_RESULT, value='Exécuter /opt/batch/validate.sh avec l'argument mode=test'
[DEBUG] Grammar: Token 19: kind=EMPTY, value=''
[DEBUG] Grammar: Token 20: kind=STEP, value='Validation'
[DEBUG] Grammar: Token 21: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/knightbatch_test/output.txt existe'
[DEBUG] Grammar: Token 22: kind=ACTION_RESULT, value='Comparer le fichier /tmp/knightbatch_test/output.txt avec /tmp/knightbatch_test/expected.txt'
[DEBUG] Grammar: Token 23: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/knightbatch_test/output.txt contient "SUCCESS"'
[DEBUG] Grammar: Token 24: kind=EMPTY, value=''
[DEBUG] Grammar: Token 25: kind=STEP, value='Cleanup'
[DEBUG] Grammar: Token 26: kind=ACTION_RESULT, value='Vider le répertoire /tmp/knightbatch_test/temp'
[DEBUG] Grammar: Token 27: kind=ACTION_RESULT, value='Vérifier qu'aucune erreur n'apparaît'
[DEBUG] Grammar: _merge_action_result returning 28 tokens
[DEBUG] get_action_shell_command called with: 'Définir la variable SQL_DRIVER = mysql'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Définir la variable SQL_DRIVER = mysql' (normalized: 'définir la variable sql_driver = mysql')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'afficher le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^afficher\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cat le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^cat\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cat (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cat (.+)$'
[DEBUG] canonize_action: Checking alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Checking alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script {script}' with handler 'run_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ (.+)$'
[DEBUG] canonize_action: Checking alias 'traiter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^traiter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter traitement.sh'
[DEBUG] canonize_action: Checking alias 'lancer traitement.sh'
[DEBUG] canonize_action: Checking alias 'traiter traitement.sh'
[DEBUG] canonize_action: Checking alias '^sh (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sh (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire tourner le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ tourner\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'démarrer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^démarrer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script SQL {script}' with handler 'run_sql_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script SQL {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter la requête SQL {query}' with handler 'sql_query'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exporter les résultats de la requête {query} vers {output}' with handler 'sql_export'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer les résultats de la requête {query1} avec {query2}' with handler 'sql_compare'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer le fichier {file1} avec {file2}' with handler 'compare_files'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} avec {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} et {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ et\ (.+)$'
[DEBUG] canonize_action: Checking alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Définir la variable {var} = {value}' with handler 'export_var'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Définir\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Définir la variable {var} = {value}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'export_var' for phrase 'Définir la variable {var} = {value}'
[DEBUG] get_action_shell_command: context={'action': 'Définir la variable SQL_DRIVER = mysql', 'handler': 'export_var', 'category': 'variables', 'variables': {'var': 'SQL_DRIVER', 'value': 'mysql'}, 'requirements': {'required_variables': ['var', 'value'], 'optional_variables': [], 'scope': 'global', 'description': 'Export a variable', 'category': 'variables', 'validation_rules': {'var': {'type': 'var', 'required': True, 'pattern': '^[a-zA-Z_][a-zA-Z0-9_]*$'}, 'value': {'type': 'value', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Définir la variable {var} = {value}', 'config': {'type': 'action', 'phrase': 'Définir la variable {var} = {value}', 'aliases': ['définir la variable SQL_CONN = {value}', "définir la variable d'environnement {var} = {value}", 'exporter la variable {var} = {value}', '^export (.+)=(.+)$', 'définir la variable {var} = {value}'], 'handler': 'export_var'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=export_var, variables={'var': 'SQL_DRIVER', 'value': 'mysql'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.export_var
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Définir la variable SQL_DRIVER = mysql', 'handler': 'export_var', 'category': 'variables', 'variables': {'var': 'SQL_DRIVER', 'value': 'mysql'}, 'requirements': {'required_variables': ['var', 'value'], 'optional_variables': [], 'scope': 'global', 'description': 'Export a variable', 'category': 'variables', 'validation_rules': {'var': {'type': 'var', 'required': True, 'pattern': '^[a-zA-Z_][a-zA-Z0-9_]*$'}, 'value': {'type': 'value', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Définir la variable {var} = {value}', 'config': {'type': 'action', 'phrase': 'Définir la variable {var} = {value}', 'aliases': ['définir la variable SQL_CONN = {value}', "définir la variable d'environnement {var} = {value}", 'exporter la variable {var} = {value}', '^export (.+)=(.+)$', 'définir la variable {var} = {value}'], 'handler': 'export_var'}}], 'scope': 'global'}, 'var': 'SQL_DRIVER', 'value': 'mysql'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.export_var.ExportVarAction object at 0x0000022316E9E790>
[DEBUG] get_action_shell_command: Generated shell command: export SQL_DRIVER='mysql'
[DEBUG] compile_validation_expression called with: 'identifiants configurés'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='identifiants configurés', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Définir la variable SQL_DRIVER = mysql'}
[DEBUG] compile_atomic: Trying to canonize validation: 'identifiants configurés'
[DEBUG] compile_atomic: canonize_validation('identifiants configurés') result: {'phrase': 'Identifiants configurés', 'handler': 'credentials_configured', 'scope': 'global', 'pattern_entry': {'phrase': 'Identifiants configurés', 'handler': 'credentials_configured', 'scope': 'global', 'opposite': {'phrase': 'Identifiants non configurés'}, 'aliases': ['identifiants configurés', 'Les identifiants sont configurés', '^identifiants configurés$', '^les identifiants sont configurés$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'identifiants configurés', 'handler': 'credentials_configured', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'global', 'description': 'Check if credentials are configured', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'global'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.credentials_configured
[DEBUG] Core handler returned: ValidationCheck(expected='la variable SQL_CONN est configurée', actual_cmd='test -n "${SQL_CONN}"', handler='credentials_configured', scope='last_action', params={'var': 'SQL_CONN', 'opposite': "la variable SQL_CONN n'est pas configurée"})
[DEBUG] get_action_shell_command called with: 'Définir la variable SQL_CONN = user/password@testdb'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Définir la variable SQL_CONN = user/password@testdb' (normalized: 'définir la variable sql_conn = user/password@testdb')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'afficher le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^afficher\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cat le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^cat\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cat (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cat (.+)$'
[DEBUG] canonize_action: Checking alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Checking alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script {script}' with handler 'run_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ (.+)$'
[DEBUG] canonize_action: Checking alias 'traiter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^traiter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter traitement.sh'
[DEBUG] canonize_action: Checking alias 'lancer traitement.sh'
[DEBUG] canonize_action: Checking alias 'traiter traitement.sh'
[DEBUG] canonize_action: Checking alias '^sh (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sh (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire tourner le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ tourner\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'démarrer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^démarrer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script SQL {script}' with handler 'run_sql_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script SQL {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter la requête SQL {query}' with handler 'sql_query'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exporter les résultats de la requête {query} vers {output}' with handler 'sql_export'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer les résultats de la requête {query1} avec {query2}' with handler 'sql_compare'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer le fichier {file1} avec {file2}' with handler 'compare_files'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} avec {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} et {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ et\ (.+)$'
[DEBUG] canonize_action: Checking alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Définir la variable {var} = {value}' with handler 'export_var'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Définir\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Définir la variable {var} = {value}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'export_var' for phrase 'Définir la variable {var} = {value}'
[DEBUG] get_action_shell_command: context={'action': 'Définir la variable SQL_CONN = user/password@testdb', 'handler': 'export_var', 'category': 'variables', 'variables': {'var': 'SQL_CONN', 'value': 'user/password@testdb'}, 'requirements': {'required_variables': ['var', 'value'], 'optional_variables': [], 'scope': 'global', 'description': 'Export a variable', 'category': 'variables', 'validation_rules': {'var': {'type': 'var', 'required': True, 'pattern': '^[a-zA-Z_][a-zA-Z0-9_]*$'}, 'value': {'type': 'value', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Définir la variable {var} = {value}', 'config': {'type': 'action', 'phrase': 'Définir la variable {var} = {value}', 'aliases': ['définir la variable SQL_CONN = {value}', "définir la variable d'environnement {var} = {value}", 'exporter la variable {var} = {value}', '^export (.+)=(.+)$', 'définir la variable {var} = {value}'], 'handler': 'export_var'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=export_var, variables={'var': 'SQL_CONN', 'value': 'user/password@testdb'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.export_var
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Définir la variable SQL_CONN = user/password@testdb', 'handler': 'export_var', 'category': 'variables', 'variables': {'var': 'SQL_CONN', 'value': 'user/password@testdb'}, 'requirements': {'required_variables': ['var', 'value'], 'optional_variables': [], 'scope': 'global', 'description': 'Export a variable', 'category': 'variables', 'validation_rules': {'var': {'type': 'var', 'required': True, 'pattern': '^[a-zA-Z_][a-zA-Z0-9_]*$'}, 'value': {'type': 'value', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Définir la variable {var} = {value}', 'config': {'type': 'action', 'phrase': 'Définir la variable {var} = {value}', 'aliases': ['définir la variable SQL_CONN = {value}', "définir la variable d'environnement {var} = {value}", 'exporter la variable {var} = {value}', '^export (.+)=(.+)$', 'définir la variable {var} = {value}'], 'handler': 'export_var'}}], 'scope': 'global'}, 'var': 'SQL_CONN', 'value': 'user/password@testdb'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.export_var.ExportVarAction object at 0x00000223171FF3D0>
[DEBUG] get_action_shell_command: Generated shell command: export SQL_CONN='user/password@testdb'
[DEBUG] compile_validation_expression called with: 'identifiants configurés'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='identifiants configurés', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Définir la variable SQL_CONN = user/password@testdb'}
[DEBUG] compile_atomic: Trying to canonize validation: 'identifiants configurés'
[DEBUG] compile_atomic: canonize_validation('identifiants configurés') result: {'phrase': 'Identifiants configurés', 'handler': 'credentials_configured', 'scope': 'global', 'pattern_entry': {'phrase': 'Identifiants configurés', 'handler': 'credentials_configured', 'scope': 'global', 'opposite': {'phrase': 'Identifiants non configurés'}, 'aliases': ['identifiants configurés', 'Les identifiants sont configurés', '^identifiants configurés$', '^les identifiants sont configurés$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'identifiants configurés', 'handler': 'credentials_configured', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'global', 'description': 'Check if credentials are configured', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'global'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.credentials_configured
[DEBUG] Core handler returned: ValidationCheck(expected='la variable SQL_CONN est configurée', actual_cmd='test -n "${SQL_CONN}"', handler='credentials_configured', scope='last_action', params={'var': 'SQL_CONN', 'opposite': "la variable SQL_CONN n'est pas configurée"})
[DEBUG] get_action_shell_command called with: 'Créer le dossier /tmp/knightbatch_test avec les droits 0755'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le dossier /tmp/knightbatch_test avec les droits 0755' (normalized: 'créer le dossier /tmp/knightbatch_test avec les droits 0755')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le dossier /tmp/knightbatch_test avec les droits 0755', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '/tmp/knightbatch_test avec les droits 0755'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '/tmp/knightbatch_test avec les droits 0755'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le dossier /tmp/knightbatch_test avec les droits 0755', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '/tmp/knightbatch_test avec les droits 0755'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '/tmp/knightbatch_test avec les droits 0755'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x0000022316E6FE90>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '/tmp/knightbatch_test avec les droits 0755'
[DEBUG] compile_validation_expression called with: 'le dossier est créé'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le dossier est créé', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le dossier /tmp/knightbatch_test avec les droits 0755'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le dossier est créé'
[DEBUG] compile_atomic: canonize_validation('le dossier est créé') result: {'phrase': 'le dossier est créé', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le dossier est créé', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644' (normalized: 'créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_file' for phrase 'Créer le fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644', 'handler': 'create_file', 'category': 'file_operations', 'variables': {'path': '/tmp/knightbatch_test/input.txt avec les droits 0644'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new file', 'category': 'file_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le fichier {path}', 'config': {'type': 'action', 'phrase': 'Créer le fichier {path}', 'aliases': ['créer un fichier {path}', 'faire un fichier {path}', 'générer le fichier {path}', 'nouveau fichier {path}', 'cr[ée]er le fichier (.+)', '^touch (.+)$'], 'handler': 'create_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_file, variables={'path': '/tmp/knightbatch_test/input.txt avec les droits 0644'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644', 'handler': 'create_file', 'category': 'file_operations', 'variables': {'path': '/tmp/knightbatch_test/input.txt avec les droits 0644'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new file', 'category': 'file_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le fichier {path}', 'config': {'type': 'action', 'phrase': 'Créer le fichier {path}', 'aliases': ['créer un fichier {path}', 'faire un fichier {path}', 'générer le fichier {path}', 'nouveau fichier {path}', 'cr[ée]er le fichier (.+)', '^touch (.+)$'], 'handler': 'create_file'}}], 'scope': 'global'}, 'path': '/tmp/knightbatch_test/input.txt avec les droits 0644'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_file.CreateFileAction object at 0x0000022316E85950>
[DEBUG] get_action_shell_command: Generated shell command: touch '/tmp/knightbatch_test/input.txt avec les droits 0644'
[DEBUG] compile_validation_expression called with: 'le fichier est présent'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le fichier est présent', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le fichier /tmp/knightbatch_test/input.txt avec les droits 0644'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le fichier est présent'
[DEBUG] compile_atomic: canonize_validation('le fichier est présent') result: {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'opposite': {'phrase': 'Le fichier est absent'}, 'aliases': ['Le fichier est présent', 'le fichier existe', 'fichier présent', 'le fichier est cree', 'fichier cree', 'le fichier est créé', 'fichier créé', 'le fichier est initialisé', 'fichier initialisé', 'le fichier est present', 'fichier present', 'le fichier est cree', 'fichier cree', 'le fichier est cree', 'fichier cree', 'le fichier est initialise', 'fichier initialise', '^le fichier est présent$', '^le fichier existe$', '^fichier présent$', '^le fichier est cree$', '^fichier cree$', '^le fichier est créé$', '^fichier créé$', '^le fichier est initialisé$', '^fichier initialisé$', '^le fichier est present$', '^fichier present$', '^le fichier est cree$', '^fichier cree$', '^le fichier est initialise$', '^fichier initialise$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le fichier est présent', 'handler': 'file_present', 'category': 'file_operations', 'variables': {}, 'requirements': {'required_variables': ['file'], 'optional_variables': [], 'scope': 'global', 'description': 'Check if a file exists', 'category': 'file_operations', 'validation_rules': {'file': {'type': 'file', 'required': True}}}, 'patterns_matched': [], 'scope': 'global'}
[DEBUG] Validation context errors for 'le fichier est présent': Handler file_present requires 'file' variable
[ERROR] ValidationParseError: Validation context errors for 'le fichier est présent': Handler file_present requires 'file' variable
Traceback (most recent call last):
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\compiler\shell_generator.py", line 171, in visit
    shellframework_ast = ShtestToShellFrameworkVisitor().visit(node)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\visitor.py", line 23, in visit
    return visitor_method(node)
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\shtest_to_shellframework_visitor.py", line 166, in visit_shtestfile
    validation_lines = self.compile_validation_expression(action.result_expr, action_context={'command': action.command})
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\shtest_to_shellframework_visitor.py", line 237, in compile_validation_expression
    return compile_atomic(expression, varname="result", last_file_var=None, action_context=action_context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\compiler\atomic_compiler.py", line 63, in compile_atomic
    raise ValidationParseError(error_msg)
shtest_compiler.core.errors.ValidationParseError: Validation context errors for 'le fichier est présent': Handler file_present requires 'file' variable

Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\vscode\example.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\vscode\example.sh
