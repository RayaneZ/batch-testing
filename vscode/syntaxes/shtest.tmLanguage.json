{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Shell Test",
  "scopeName": "source.shtest",
  "fileTypes": ["shtest"],
  "patterns": [
    { "include": "#step_blocks" },
    { "include": "#actions" },
    { "include": "#results" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#paths" },
    { "include": "#assignments" },
    { "include": "#control" },
    { "include": "#verbs" },
    { "include": "#types" },
    { "include": "#timestamps" },
    { "include": "#logic" },
    { "include": "#parens" },
    { "include": "#comments" }
  ],
  "repository": {
    "step_blocks": {
      "patterns": [
        {
          "begin": "^ *(\\u00c9tape|Etape|Step)\\s*:\\s*",
          "beginCaptures": {
            "1": { "name": "keyword.other.step.shtest" }
          },
          "end": "(?=^\\s*$|^\\s*(Action|R[\u00e9e]sultat)\\s*:)",
          "patterns": [
            { "include": "#actions" },
            { "include": "#results" }
          ]
        }
      ]
    },
    "actions": {
      "patterns": [
        {
          "begin": "^ *Action\\s*:\\s*",
          "beginCaptures": {
            "0": { "name": "keyword.control.action.prefix.shtest" }
          },
          "end": ";|(?=^\\s*(R[ée]sultat|Resultat)\\s*:|^\\s*$)",
          "patterns": [
            { "include": "#paths" },
            { "include": "#timestamps" },
            { "include": "#verbs" },
            { "include": "#control" },
            {
              "match": "[^;\\n]+",
              "name": "string.quoted.action.content.shtest"
            }
          ]
        }
      ]
    },
    "results": {
      "patterns": [
        {
          "match": "(R[ée]sultat)\\s*:",
          "captures": {
            "1": {
              "name": "keyword.control.result.prefix.shtest"
            }
          }
        },
        {
          "begin": "^ *(R[ée]sultat)\\s*:?",
          "beginCaptures": {
            "1": { "name": "keyword.control.result.prefix.shtest" }
          },
          "end": "$",
          "patterns": [
            { "include": "#paths" },
            { "include": "#timestamps" },
            { "include": "#verbs" },
            { "include": "#control" },
            {
              "match": ".+",
              "name": "string.quoted.result.content.shtest"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(if|while|for|return)\\b",
          "name": "keyword.control.shtest"
        }
      ]
    },
    "strings": {
      "begin": "\"",
      "end": "\"",
      "name": "string.quoted.double.shtest",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.shtest"
        }
      ]
    },
    "control": {
      "patterns": [
        {
          "match": "\\b(cr[ée]er|configurer|traiter|valider|toucher|copier|d[ée]placer|afficher|initialiser|mettre|cat)\\b",
          "name": "keyword.control.shtest"
        }
      ]
    },
    "verbs": {
      "patterns": [
        {
          "match": "\\b(Ex[ée]cuter|Comparer|V[ée]rifier|Mettre|Creer|Créer)\\b",
          "name": "support.function.builtin.shtest"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "\\b(argument|param[èe]tre|chemin|path|script sql)\\b",
          "name": "storage.type.shtest"
        }
      ]
    },
    "timestamps": {
      "patterns": [
        {
          "match": "\\b\\d{8,14}\\b",
          "name": "constant.numeric.timestamp.shtest"
        }
      ]
    },
    "paths": {
      "patterns": [
        {
          "match": "(\\.|\\~)?\\/?([\\w\\.-]+\\/)*[\\w\\.-]+",
          "name": "string.unquoted.path.shtest"
        }
      ]
    },
    "logic": {
      "patterns": [
        {
          "match": "\\b(et|ou)\\b",
          "name": "keyword.operator.logical.shtest"
        }
      ]
    },
    "parens": {
      "patterns": [
        {
          "match": "[()]",
          "name": "punctuation.section.parens.shtest"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "#.*$",
          "name": "comment.line.number-sign.shtest"
        }
      ]
    },
    "assignments": {
      "patterns": [
        {
          "match": "\\b([A-Z_][A-Z0-9_]+)(=)",
          "captures": {
            "1": {
              "name": "variable.other.assignment.name.shtest"
            },
            "2": {
              "name": "keyword.operator.assignment.shtest"
            }
          }
        }
      ]
    }
  }
}
