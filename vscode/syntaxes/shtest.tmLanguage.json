{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Shell Test",
  "scopeName": "source.shtest",
  "patterns": [
    {
      "include": "#step_blocks"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#paths"
    },
    {
      "include": "#control"
    },
    {
      "include": "#types"
    },
    {
      "include": "#timestamps"
    },
    {
      "include": "#logic"
    },
    {
      "include": "#parens"
    }
  ],
  "repository": {
    "step_blocks": {
      "patterns": [
        {
          "begin": "^(\u00c9tape|Etape|Step)\\s*:",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.step.shtest"
            }
          },
          "end": "^(?=\u00c9tape|Etape|Step|$)",
          "patterns": [
            {
              "include": "#actions"
            },
            {
              "include": "#results"
            }
          ]
        }
      ]
    },
    "actions": {
      "patterns": [
        {
          "begin": "^Action\\s*:\\s*",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.action.prefix.shtest"
            }
          },
          "end": "(?=^\\s*(R\u00e9sultat|Resultat)\\s*:)|;",
          "patterns": [
            {
              "match": "[^;]+",
              "name": "string.quoted.action.content.shtest"
            }
          ]
        }
      ]
    },
    "results": {
      "patterns": [
        {
          "begin": "^R[\u00e9e]sultat\\s*:?\\s*",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.result.prefix.shtest"
            }
          },
          "end": "$",
          "patterns": [
            {
              "match": ".*",
              "name": "string.quoted.result.content.shtest"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(if|while|for|return)\\b",
          "name": "keyword.control.shtest"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.shtest",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.shtest"
        }
      ]
    },
    "control": {
      "patterns": [
        {
          "match": "\\b(cr\u00e9er|configurer|ex\u00e9cuter|lancer|traiter|v\u00e9rifier|valider|toucher|copier|d\u00e9placer|afficher|initialiser|mettre|cat)\\b",
          "name": "keyword.control.shtest"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "\\b(argument|param\u00e8tre|chemin|path|script sql)\\b",
          "name": "storage.type.shtest"
        }
      ]
    },
    "timestamps": {
      "patterns": [
        {
          "match": "\\b\\d{8,14}\\b",
          "name": "constant.numeric.timestamp.shtest"
        }
      ]
    },
    "paths": {
      "patterns": [
        {
          "match": "\\/[\\w\\.\\/\\-]+",
          "name": "string.unquoted.path.shtest"
        }
      ]
    },
    "logic": {
      "patterns": [
        {
          "match": "\\b(et|ou)\\b",
          "name": "keyword.operator.logical.shtest"
        }
      ]
    },
    "parens": {
      "patterns": [
        {
          "match": "[()]",
          "name": "punctuation.section.parens.shtest"
        }
      ]
    }
  }
}