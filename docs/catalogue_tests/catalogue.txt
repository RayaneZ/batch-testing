ENTRYPOINT DEBUG ACTIVE: src/shtest_compiler/shtest.py loaded
[DEBUG] Loaded patterns: ['step', 'action_result', 'action_only', 'result_only', 'comment']
[DEBUG] Pattern for step: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Pattern for action_result: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Pattern for action_only: ^Action\s*:\s*(.*)$
[DEBUG] Pattern for result_only: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Pattern for comment: ^\s*#.*$
[DEBUG] Added STEP tokenizer with pattern: ^(?:Étape|Etape|Step)\s*:\s*(.*)$
[DEBUG] Added ACTION_RESULT tokenizer with pattern: ^Action\s*:\s*(.*?)(?:\s*;\s*(?:R[ée]sultat|Resultat)\s*:\s*(.*)|\s*R[ée]sultat\s*:\s*(.*))$
[DEBUG] Added ACTION_ONLY tokenizer with pattern: ^Action\s*:\s*(.*)$
[DEBUG] Added RESULT_ONLY tokenizer with pattern: ^R[ée]sultat\s*:\s*(.*)$
[DEBUG] Added COMMENT tokenizer with pattern: ^\s*#.*$
[DEBUG] Added FallbackTokenizer
[DEBUG] Parsing text with 75 lines
[DEBUG] Lexing text with 75 lines
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.STEP, value=catalogue, result=('catalogue',), original=Step: catalogue at line 1
[DEBUG] Yielding token: STEP@1:0 'catalogue' -> '('catalogue',)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/JDD_Commun.sql ; Résultat: Le contenu est affiché. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/JDD_Commun.sql, result=('Afficher le contenu du fichier = /tmp/JDD_Commun.sql', 'Le contenu est affiché.', None), original=Action: Afficher le contenu du fichier = /tmp/JDD_Commun.sql ; Résultat: Le contenu est affiché. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/JDD_Commun.sql' -> '('Afficher le contenu du fichier = /tmp/JDD_Commun.sql', 'Le contenu est affiché.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/JDD_Extra.sql ; Résultat: Le script est affiché. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/JDD_Extra.sql, result=('Afficher le contenu du fichier = /tmp/JDD_Extra.sql', 'Le script est affiché.', None), original=Action: Afficher le contenu du fichier = /tmp/JDD_Extra.sql ; Résultat: Le script est affiché. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/JDD_Extra.sql' -> '('Afficher le contenu du fichier = /tmp/JDD_Extra.sql', 'Le script est affiché.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/file.txt ; Résultat: Le contenu est correct. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/file.txt, result=('Afficher le contenu du fichier = /tmp/file.txt', 'Le contenu est correct.', None), original=Action: Afficher le contenu du fichier = /tmp/file.txt ; Résultat: Le contenu est correct. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/file.txt' -> '('Afficher le contenu du fichier = /tmp/file.txt', 'Le contenu est correct.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/file.txt ; Résultat: contenu correct. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/file.txt, result=('Afficher le contenu du fichier = /tmp/file.txt', 'contenu correct.', None), original=Action: Afficher le contenu du fichier = /tmp/file.txt ; Résultat: contenu correct. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/file.txt' -> '('Afficher le contenu du fichier = /tmp/file.txt', 'contenu correct.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/output.txt ; Résultat: Le contenu est correct. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/output.txt, result=('Afficher le contenu du fichier = /tmp/output.txt', 'Le contenu est correct.', None), original=Action: Afficher le contenu du fichier = /tmp/output.txt ; Résultat: Le contenu est correct. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/output.txt' -> '('Afficher le contenu du fichier = /tmp/output.txt', 'Le contenu est correct.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/test.txt ; Résultat: Le contenu est affiché. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/test.txt, result=('Afficher le contenu du fichier = /tmp/test.txt', 'Le contenu est affiché.', None), original=Action: Afficher le contenu du fichier = /tmp/test.txt ; Résultat: Le contenu est affiché. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/test.txt' -> '('Afficher le contenu du fichier = /tmp/test.txt', 'Le contenu est affiché.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/test.txt ; Résultat: Le script est affiché. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/test.txt, result=('Afficher le contenu du fichier = /tmp/test.txt', 'Le script est affiché.', None), original=Action: Afficher le contenu du fichier = /tmp/test.txt ; Résultat: Le script est affiché. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/test.txt' -> '('Afficher le contenu du fichier = /tmp/test.txt', 'Le script est affiché.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/test.txt ; Résultat: contenu affiché. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/test.txt, result=('Afficher le contenu du fichier = /tmp/test.txt', 'contenu affiché.', None), original=Action: Afficher le contenu du fichier = /tmp/test.txt ; Résultat: contenu affiché. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/test.txt' -> '('Afficher le contenu du fichier = /tmp/test.txt', 'contenu affiché.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/test.txt ; Résultat: le contenu est lisible. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/test.txt, result=('Afficher le contenu du fichier = /tmp/test.txt', 'le contenu est lisible.', None), original=Action: Afficher le contenu du fichier = /tmp/test.txt ; Résultat: le contenu est lisible. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/test.txt' -> '('Afficher le contenu du fichier = /tmp/test.txt', 'le contenu est lisible.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Afficher le contenu du fichier = /tmp/test_folder/test.txt ; Résultat: le contenu est lisible. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Afficher le contenu du fichier = /tmp/test_folder/test.txt, result=('Afficher le contenu du fichier = /tmp/test_folder/test.txt', 'le contenu est lisible.', None), original=Action: Afficher le contenu du fichier = /tmp/test_folder/test.txt ; Résultat: le contenu est lisible. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Afficher le contenu du fichier = /tmp/test_folder/test.txt' -> '('Afficher le contenu du fichier = /tmp/test_folder/test.txt', 'le contenu est lisible.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Copier le dossier /tmp/data vers /tmp/backup ; Résultat: le dossier est copié. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Copier le dossier /tmp/data vers /tmp/backup, result=('Copier le dossier /tmp/data vers /tmp/backup', 'le dossier est copié.', None), original=Action: Copier le dossier /tmp/data vers /tmp/backup ; Résultat: le dossier est copié. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Copier le dossier /tmp/data vers /tmp/backup' -> '('Copier le dossier /tmp/data vers /tmp/backup', 'le dossier est copié.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Copier le fichier /tmp/src.txt vers /tmp/dest.txt ; Résultat: le fichier est copié. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Copier le fichier /tmp/src.txt vers /tmp/dest.txt, result=('Copier le fichier /tmp/src.txt vers /tmp/dest.txt', 'le fichier est copié.', None), original=Action: Copier le fichier /tmp/src.txt vers /tmp/dest.txt ; Résultat: le fichier est copié. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Copier le fichier /tmp/src.txt vers /tmp/dest.txt' -> '('Copier le fichier /tmp/src.txt vers /tmp/dest.txt', 'le fichier est copié.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le dossier = /tmp/data avec les droits = 0755 ; Résultat: Le dossier est créé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le dossier = /tmp/data avec les droits = 0755, result=('Créer le dossier = /tmp/data avec les droits = 0755', 'Le dossier est créé.', None), original=Action: Créer le dossier = /tmp/data avec les droits = 0755 ; Résultat: Le dossier est créé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le dossier = /tmp/data avec les droits = 0755' -> '('Créer le dossier = /tmp/data avec les droits = 0755', 'Le dossier est créé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le dossier = /tmp/newdir ; Résultat: Le dossier est créé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le dossier = /tmp/newdir, result=('Créer le dossier = /tmp/newdir', 'Le dossier est créé.', None), original=Action: Créer le dossier = /tmp/newdir ; Résultat: Le dossier est créé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le dossier = /tmp/newdir' -> '('Créer le dossier = /tmp/newdir', 'Le dossier est créé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le dossier = /tmp/newdir ; Résultat: dossier créé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le dossier = /tmp/newdir, result=('Créer le dossier = /tmp/newdir', 'dossier créé.', None), original=Action: Créer le dossier = /tmp/newdir ; Résultat: dossier créé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le dossier = /tmp/newdir' -> '('Créer le dossier = /tmp/newdir', 'dossier créé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer le dossier = /tmp/newdir ; Résultat: le dossier est prêt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer le dossier = /tmp/newdir, result=('Créer le dossier = /tmp/newdir', 'le dossier est prêt.', None), original=Action: Créer le dossier = /tmp/newdir ; Résultat: le dossier est prêt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer le dossier = /tmp/newdir' -> '('Créer le dossier = /tmp/newdir', 'le dossier est prêt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer dossier = /tmp/test_folder avec les droits = 0700 ; Résultat: le dossier est prêt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer dossier = /tmp/test_folder avec les droits = 0700, result=('Créer dossier = /tmp/test_folder avec les droits = 0700', 'le dossier est prêt.', None), original=Action: Créer dossier = /tmp/test_folder avec les droits = 0700 ; Résultat: le dossier est prêt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer dossier = /tmp/test_folder avec les droits = 0700' -> '('Créer dossier = /tmp/test_folder avec les droits = 0700', 'le dossier est prêt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer fichier = /tmp/output.txt avec les droits = 0644 ; Résultat: Le fichier est présent. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer fichier = /tmp/output.txt avec les droits = 0644, result=('Créer fichier = /tmp/output.txt avec les droits = 0644', 'Le fichier est présent.', None), original=Action: Créer fichier = /tmp/output.txt avec les droits = 0644 ; Résultat: Le fichier est présent. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer fichier = /tmp/output.txt avec les droits = 0644' -> '('Créer fichier = /tmp/output.txt avec les droits = 0644', 'Le fichier est présent.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Créer fichier = /tmp/test_folder/test.txt avec les droits = 0600 ; Résultat: le fichier est créé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Créer fichier = /tmp/test_folder/test.txt avec les droits = 0600, result=('Créer fichier = /tmp/test_folder/test.txt avec les droits = 0600', 'le fichier est créé.', None), original=Action: Créer fichier = /tmp/test_folder/test.txt avec les droits = 0600 ; Résultat: le fichier est créé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Créer fichier = /tmp/test_folder/test.txt avec les droits = 0600' -> '('Créer fichier = /tmp/test_folder/test.txt avec les droits = 0600', 'le fichier est créé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable SQL_CONN = sqlplus -S user/password@db ; Résultat: Les identifiants sont configurés. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Définir la variable SQL_CONN = sqlplus -S user/password@db, result=('Définir la variable SQL_CONN = sqlplus -S user/password@db', 'Les identifiants sont configurés.', None), original=Action: Définir la variable SQL_CONN = sqlplus -S user/password@db ; Résultat: Les identifiants sont configurés. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Définir la variable SQL_CONN = sqlplus -S user/password@db' -> '('Définir la variable SQL_CONN = sqlplus -S user/password@db', 'Les identifiants sont configurés.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Définir la variable SQL_CONN = sqlplus -S user/password@db ; Résultat: identifiants configurés. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Définir la variable SQL_CONN = sqlplus -S user/password@db, result=('Définir la variable SQL_CONN = sqlplus -S user/password@db', 'identifiants configurés.', None), original=Action: Définir la variable SQL_CONN = sqlplus -S user/password@db ; Résultat: identifiants configurés. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Définir la variable SQL_CONN = sqlplus -S user/password@db' -> '('Définir la variable SQL_CONN = sqlplus -S user/password@db', 'identifiants configurés.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter /opt/batch/traitement.sh ; Résultat: Le script retourne un code 0 et (La sortie standard contient "OK" ou La sortie d'erreur contient WARNING). at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter /opt/batch/traitement.sh, result=('Exécuter /opt/batch/traitement.sh', 'Le script retourne un code 0 et (La sortie standard contient "OK" ou La sortie d\'erreur contient WARNING).', None), original=Action: Exécuter /opt/batch/traitement.sh ; Résultat: Le script retourne un code 0 et (La sortie standard contient "OK" ou La sortie d'erreur contient WARNING). at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter /opt/batch/traitement.sh' -> '('Exécuter /opt/batch/traitement.sh', 'Le script retourne un code 0 et (La sortie standard contient "OK" ou La sortie d\'erreur contient WARNING).', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter /opt/batch/traitement.sh ; Résultat: retour 0 et (la sortie standard contient "Succès complet" ou la sortie d'erreur contient WARNING). at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter /opt/batch/traitement.sh, result=('Exécuter /opt/batch/traitement.sh', 'retour 0 et (la sortie standard contient "Succès complet" ou la sortie d\'erreur contient WARNING).', None), original=Action: Exécuter /opt/batch/traitement.sh ; Résultat: retour 0 et (la sortie standard contient "Succès complet" ou la sortie d'erreur contient WARNING). at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter /opt/batch/traitement.sh' -> '('Exécuter /opt/batch/traitement.sh', 'retour 0 et (la sortie standard contient "Succès complet" ou la sortie d\'erreur contient WARNING).', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter /opt/batch/traitement.sh ; Résultat: retour 0 et (stdout contient "OK" ou stderr contient WARNING). at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter /opt/batch/traitement.sh, result=('Exécuter /opt/batch/traitement.sh', 'retour 0 et (stdout contient "OK" ou stderr contient WARNING).', None), original=Action: Exécuter /opt/batch/traitement.sh ; Résultat: retour 0 et (stdout contient "OK" ou stderr contient WARNING). at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter /opt/batch/traitement.sh' -> '('Exécuter /opt/batch/traitement.sh', 'retour 0 et (stdout contient "OK" ou stderr contient WARNING).', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter /opt/batch/traitement.sh avec l'argument produit=123 et la quantité=10 ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter /opt/batch/traitement.sh avec l'argument produit=123 et la quantité=10, result=("Exécuter /opt/batch/traitement.sh avec l'argument produit=123 et la quantité=10", 'retour 0.', None), original=Action: Exécuter /opt/batch/traitement.sh avec l'argument produit=123 et la quantité=10 ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter /opt/batch/traitement.sh avec l'argument produit=123 et la quantité=10' -> '("Exécuter /opt/batch/traitement.sh avec l'argument produit=123 et la quantité=10", 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter /opt/batch/traitement.sh avec l'argument produit=567 et la quantité=20 ; Résultat: retour 0 et (stdout contient "Traitement OK" ou stderr contient WARNING). at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter /opt/batch/traitement.sh avec l'argument produit=567 et la quantité=20, result=("Exécuter /opt/batch/traitement.sh avec l'argument produit=567 et la quantité=20", 'retour 0 et (stdout contient "Traitement OK" ou stderr contient WARNING).', None), original=Action: Exécuter /opt/batch/traitement.sh avec l'argument produit=567 et la quantité=20 ; Résultat: retour 0 et (stdout contient "Traitement OK" ou stderr contient WARNING). at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter /opt/batch/traitement.sh avec l'argument produit=567 et la quantité=20' -> '("Exécuter /opt/batch/traitement.sh avec l'argument produit=567 et la quantité=20", 'retour 0 et (stdout contient "Traitement OK" ou stderr contient WARNING).', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter le script SQL JDD_Commun.sql ; Résultat: La base de test est prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter le script SQL JDD_Commun.sql, result=('Exécuter le script SQL JDD_Commun.sql', 'La base de test est prête.', None), original=Action: Exécuter le script SQL JDD_Commun.sql ; Résultat: La base de test est prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter le script SQL JDD_Commun.sql' -> '('Exécuter le script SQL JDD_Commun.sql', 'La base de test est prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter le script SQL JDD_Commun.sql puis JDD_Extra.sql ; Résultat: La base est prête pour le test. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter le script SQL JDD_Commun.sql puis JDD_Extra.sql, result=('Exécuter le script SQL JDD_Commun.sql puis JDD_Extra.sql', 'La base est prête pour le test.', None), original=Action: Exécuter le script SQL JDD_Commun.sql puis JDD_Extra.sql ; Résultat: La base est prête pour le test. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter le script SQL JDD_Commun.sql puis JDD_Extra.sql' -> '('Exécuter le script SQL JDD_Commun.sql puis JDD_Extra.sql', 'La base est prête pour le test.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: La base de test est prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'La base de test est prête.', None), original=Action: Exécuter script.sh ; Résultat: La base de test est prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'La base de test est prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: La base est prête pour le test. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'La base est prête pour le test.', None), original=Action: Exécuter script.sh ; Résultat: La base est prête pour le test. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'La base est prête pour le test.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: Le fichier /tmp/a.txt est identique a /tmp/b.txt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'Le fichier /tmp/a.txt est identique a /tmp/b.txt.', None), original=Action: Exécuter script.sh ; Résultat: Le fichier /tmp/a.txt est identique a /tmp/b.txt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'Le fichier /tmp/a.txt est identique a /tmp/b.txt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: Le fichier /tmp/a.txt est identique à /tmp/b.txt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'Le fichier /tmp/a.txt est identique à /tmp/b.txt.', None), original=Action: Exécuter script.sh ; Résultat: Le fichier /tmp/a.txt est identique à /tmp/b.txt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'Le fichier /tmp/a.txt est identique à /tmp/b.txt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: base prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'base prête.', None), original=Action: Exécuter script.sh ; Résultat: base prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'base prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Exécuter script.sh ; Résultat: fichier_identique /tmp/a.txt /tmp/b.txt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Exécuter script.sh, result=('Exécuter script.sh', 'fichier_identique /tmp/a.txt /tmp/b.txt.', None), original=Action: Exécuter script.sh ; Résultat: fichier_identique /tmp/a.txt /tmp/b.txt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Exécuter script.sh' -> '('Exécuter script.sh', 'fichier_identique /tmp/a.txt /tmp/b.txt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Indiquer le chemin des logs = /var/log/sys.log ; Résultat: les logs sont accessibles. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Indiquer le chemin des logs = /var/log/sys.log, result=('Indiquer le chemin des logs = /var/log/sys.log', 'les logs sont accessibles.', None), original=Action: Indiquer le chemin des logs = /var/log/sys.log ; Résultat: les logs sont accessibles. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Indiquer le chemin des logs = /var/log/sys.log' -> '('Indiquer le chemin des logs = /var/log/sys.log', 'les logs sont accessibles.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Indiquer le chemin des logs = /var/log/sys.log ; Résultat: logs accessibles. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Indiquer le chemin des logs = /var/log/sys.log, result=('Indiquer le chemin des logs = /var/log/sys.log', 'logs accessibles.', None), original=Action: Indiquer le chemin des logs = /var/log/sys.log ; Résultat: logs accessibles. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Indiquer le chemin des logs = /var/log/sys.log' -> '('Indiquer le chemin des logs = /var/log/sys.log', 'logs accessibles.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Indiquer le chemin des logs = /var/log/system.log ; Résultat: les logs sont accessibles. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Indiquer le chemin des logs = /var/log/system.log, result=('Indiquer le chemin des logs = /var/log/system.log', 'les logs sont accessibles.', None), original=Action: Indiquer le chemin des logs = /var/log/system.log ; Résultat: les logs sont accessibles. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Indiquer le chemin des logs = /var/log/system.log' -> '('Indiquer le chemin des logs = /var/log/system.log', 'les logs sont accessibles.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Mettre à jour la date du fichier /tmp/file.txt 202501010101 ; Résultat: La date est modifiée. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Mettre à jour la date du fichier /tmp/file.txt 202501010101, result=('Mettre à jour la date du fichier /tmp/file.txt 202501010101', 'La date est modifiée.', None), original=Action: Mettre à jour la date du fichier /tmp/file.txt 202501010101 ; Résultat: La date est modifiée. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Mettre à jour la date du fichier /tmp/file.txt 202501010101' -> '('Mettre à jour la date du fichier /tmp/file.txt 202501010101', 'La date est modifiée.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Mettre à jour la date du fichier /tmp/file.txt 202501010101 ; Résultat: date modifiée. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Mettre à jour la date du fichier /tmp/file.txt 202501010101, result=('Mettre à jour la date du fichier /tmp/file.txt 202501010101', 'date modifiée.', None), original=Action: Mettre à jour la date du fichier /tmp/file.txt 202501010101 ; Résultat: date modifiée. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Mettre à jour la date du fichier /tmp/file.txt 202501010101' -> '('Mettre à jour la date du fichier /tmp/file.txt 202501010101', 'date modifiée.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Mettre à jour la date du fichier /tmp/output.txt 202501021200 ; Résultat: La date est modifiée. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Mettre à jour la date du fichier /tmp/output.txt 202501021200, result=('Mettre à jour la date du fichier /tmp/output.txt 202501021200', 'La date est modifiée.', None), original=Action: Mettre à jour la date du fichier /tmp/output.txt 202501021200 ; Résultat: La date est modifiée. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Mettre à jour la date du fichier /tmp/output.txt 202501021200' -> '('Mettre à jour la date du fichier /tmp/output.txt 202501021200', 'La date est modifiée.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Toucher le fichier /tmp/init.flag 202501010000 ; Résultat: Le fichier est initialisé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Toucher le fichier /tmp/init.flag 202501010000, result=('Toucher le fichier /tmp/init.flag 202501010000', 'Le fichier est initialisé.', None), original=Action: Toucher le fichier /tmp/init.flag 202501010000 ; Résultat: Le fichier est initialisé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Toucher le fichier /tmp/init.flag 202501010000' -> '('Toucher le fichier /tmp/init.flag 202501010000', 'Le fichier est initialisé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vider le répertoire /tmp/cache ; Résultat: le dossier est prêt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vider le répertoire /tmp/cache, result=('Vider le répertoire /tmp/cache', 'le dossier est prêt.', None), original=Action: Vider le répertoire /tmp/cache ; Résultat: le dossier est prêt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vider le répertoire /tmp/cache' -> '('Vider le répertoire /tmp/cache', 'le dossier est prêt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier qu'aucune erreur n'apparaît ; Résultat: le script affiche un code "030". at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier qu'aucune erreur n'apparaît, result=("Vérifier qu'aucune erreur n'apparaît", 'le script affiche un code "030".', None), original=Action: Vérifier qu'aucune erreur n'apparaît ; Résultat: le script affiche un code "030". at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier qu'aucune erreur n'apparaît' -> '("Vérifier qu'aucune erreur n'apparaît", 'le script affiche un code "030".', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier qu'il n'y a pas d'erreur ; Résultat: aucun message d'erreur. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier qu'il n'y a pas d'erreur, result=("Vérifier qu'il n'y a pas d'erreur", "aucun message d'erreur.", None), original=Action: Vérifier qu'il n'y a pas d'erreur ; Résultat: aucun message d'erreur. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier qu'il n'y a pas d'erreur' -> '("Vérifier qu'il n'y a pas d'erreur", "aucun message d'erreur.", None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier qu'il n'y a pas d'erreur ; Résultat: stderr=. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier qu'il n'y a pas d'erreur, result=("Vérifier qu'il n'y a pas d'erreur", 'stderr=.', None), original=Action: Vérifier qu'il n'y a pas d'erreur ; Résultat: stderr=. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier qu'il n'y a pas d'erreur' -> '("Vérifier qu'il n'y a pas d'erreur", 'stderr=.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier qu'il n'y a pas d'erreurs dans les logs ; Résultat: aucun message d'erreur. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier qu'il n'y a pas d'erreurs dans les logs, result=("Vérifier qu'il n'y a pas d'erreurs dans les logs", "aucun message d'erreur.", None), original=Action: Vérifier qu'il n'y a pas d'erreurs dans les logs ; Résultat: aucun message d'erreur. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier qu'il n'y a pas d'erreurs dans les logs' -> '("Vérifier qu'il n'y a pas d'erreurs dans les logs", "aucun message d'erreur.", None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que la date du fichier /tmp/test.log est 202501010000 ; Résultat: la date du fichier /tmp/test.log est 202501010000. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que la date du fichier /tmp/test.log est 202501010000, result=('Vérifier que la date du fichier /tmp/test.log est 202501010000', 'la date du fichier /tmp/test.log est 202501010000.', None), original=Action: Vérifier que la date du fichier /tmp/test.log est 202501010000 ; Résultat: la date du fichier /tmp/test.log est 202501010000. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que la date du fichier /tmp/test.log est 202501010000' -> '('Vérifier que la date du fichier /tmp/test.log est 202501010000', 'la date du fichier /tmp/test.log est 202501010000.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le dossier /tmp/testdir a les droits 0755 ; Résultat: le dossier /tmp/testdir a les droits 0755. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le dossier /tmp/testdir a les droits 0755, result=('Vérifier que le dossier /tmp/testdir a les droits 0755', 'le dossier /tmp/testdir a les droits 0755.', None), original=Action: Vérifier que le dossier /tmp/testdir a les droits 0755 ; Résultat: le dossier /tmp/testdir a les droits 0755. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le dossier /tmp/testdir a les droits 0755' -> '('Vérifier que le dossier /tmp/testdir a les droits 0755', 'le dossier /tmp/testdir a les droits 0755.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt ; Résultat: le dossier /tmp/testdir contient 2 fichiers *.txt. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt, result=('Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt', 'le dossier /tmp/testdir contient 2 fichiers *.txt.', None), original=Action: Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt ; Résultat: le dossier /tmp/testdir contient 2 fichiers *.txt. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt' -> '('Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt', 'le dossier /tmp/testdir contient 2 fichiers *.txt.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le dossier /tmp/testdir existe ; Résultat: le dossier /tmp/testdir existe. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le dossier /tmp/testdir existe, result=('Vérifier que le dossier /tmp/testdir existe', 'le dossier /tmp/testdir existe.', None), original=Action: Vérifier que le dossier /tmp/testdir existe ; Résultat: le dossier /tmp/testdir existe. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le dossier /tmp/testdir existe' -> '('Vérifier que le dossier /tmp/testdir existe', 'le dossier /tmp/testdir existe.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/dest.txt existe ; Résultat: le fichier /tmp/dest.txt existe ; at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/dest.txt existe, result=('Vérifier que le fichier /tmp/dest.txt existe', 'le fichier /tmp/dest.txt existe ;', None), original=Action: Vérifier que le fichier /tmp/dest.txt existe ; Résultat: le fichier /tmp/dest.txt existe ; at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/dest.txt existe' -> '('Vérifier que le fichier /tmp/dest.txt existe', 'le fichier /tmp/dest.txt existe ;', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/dest.txt existe ; Résultat: le fichier est présent et (le fichier /tmp/dest.txt existe ; ou la sortie d'erreur contient "Erreur de copie"). at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/dest.txt existe, result=('Vérifier que le fichier /tmp/dest.txt existe', 'le fichier est présent et (le fichier /tmp/dest.txt existe ; ou la sortie d\'erreur contient "Erreur de copie").', None), original=Action: Vérifier que le fichier /tmp/dest.txt existe ; Résultat: le fichier est présent et (le fichier /tmp/dest.txt existe ; ou la sortie d'erreur contient "Erreur de copie"). at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/dest.txt existe' -> '('Vérifier que le fichier /tmp/dest.txt existe', 'le fichier est présent et (le fichier /tmp/dest.txt existe ; ou la sortie d\'erreur contient "Erreur de copie").', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/test.log a les droits 0644 ; Résultat: le fichier /tmp/test.log a les droits 0644. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/test.log a les droits 0644, result=('Vérifier que le fichier /tmp/test.log a les droits 0644', 'le fichier /tmp/test.log a les droits 0644.', None), original=Action: Vérifier que le fichier /tmp/test.log a les droits 0644 ; Résultat: le fichier /tmp/test.log a les droits 0644. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/test.log a les droits 0644' -> '('Vérifier que le fichier /tmp/test.log a les droits 0644', 'le fichier /tmp/test.log a les droits 0644.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/test.log contient OK ; Résultat: le fichier /tmp/test.log contient OK. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/test.log contient OK, result=('Vérifier que le fichier /tmp/test.log contient OK', 'le fichier /tmp/test.log contient OK.', None), original=Action: Vérifier que le fichier /tmp/test.log contient OK ; Résultat: le fichier /tmp/test.log contient OK. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/test.log contient OK' -> '('Vérifier que le fichier /tmp/test.log contient OK', 'le fichier /tmp/test.log contient OK.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD ; Résultat: le fichier /tmp/test.log contient exactement ALLGOOD. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD, result=('Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD', 'le fichier /tmp/test.log contient exactement ALLGOOD.', None), original=Action: Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD ; Résultat: le fichier /tmp/test.log contient exactement ALLGOOD. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD' -> '('Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD', 'le fichier /tmp/test.log contient exactement ALLGOOD.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: Vérifier que le fichier /tmp/test.log existe ; Résultat: le fichier /tmp/test.log existe. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=Vérifier que le fichier /tmp/test.log existe, result=('Vérifier que le fichier /tmp/test.log existe', 'le fichier /tmp/test.log existe.', None), original=Action: Vérifier que le fichier /tmp/test.log existe ; Résultat: le fichier /tmp/test.log existe. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'Vérifier que le fichier /tmp/test.log existe' -> '('Vérifier que le fichier /tmp/test.log existe', 'le fichier /tmp/test.log existe.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: afficher le contenu du fichier = /tmp/test.txt ; Résultat: contenu affiché. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=afficher le contenu du fichier = /tmp/test.txt, result=('afficher le contenu du fichier = /tmp/test.txt', 'contenu affiché.', None), original=Action: afficher le contenu du fichier = /tmp/test.txt ; Résultat: contenu affiché. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'afficher le contenu du fichier = /tmp/test.txt' -> '('afficher le contenu du fichier = /tmp/test.txt', 'contenu affiché.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: cat le fichier = /tmp/test.txt ; Résultat: contenu affiché. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=cat le fichier = /tmp/test.txt, result=('cat le fichier = /tmp/test.txt', 'contenu affiché.', None), original=Action: cat le fichier = /tmp/test.txt ; Résultat: contenu affiché. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'cat le fichier = /tmp/test.txt' -> '('cat le fichier = /tmp/test.txt', 'contenu affiché.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: configurer le contexte ; Résultat: base prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=configurer le contexte, result=('configurer le contexte', 'base prête.', None), original=Action: configurer le contexte ; Résultat: base prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'configurer le contexte' -> '('configurer le contexte', 'base prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: copier le dossier /tmp/dir vers /tmp/dir2 ; Résultat: le dossier est copié. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=copier le dossier /tmp/dir vers /tmp/dir2, result=('copier le dossier /tmp/dir vers /tmp/dir2', 'le dossier est copié.', None), original=Action: copier le dossier /tmp/dir vers /tmp/dir2 ; Résultat: le dossier est copié. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'copier le dossier /tmp/dir vers /tmp/dir2' -> '('copier le dossier /tmp/dir vers /tmp/dir2', 'le dossier est copié.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: copier le fichier /tmp/a.txt vers /tmp/b.txt ; Résultat: le fichier est copié. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=copier le fichier /tmp/a.txt vers /tmp/b.txt, result=('copier le fichier /tmp/a.txt vers /tmp/b.txt', 'le fichier est copié.', None), original=Action: copier le fichier /tmp/a.txt vers /tmp/b.txt ; Résultat: le fichier est copié. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'copier le fichier /tmp/a.txt vers /tmp/b.txt' -> '('copier le fichier /tmp/a.txt vers /tmp/b.txt', 'le fichier est copié.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: créer le contexte ; Résultat: base prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=créer le contexte, result=('créer le contexte', 'base prête.', None), original=Action: créer le contexte ; Résultat: base prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'créer le contexte' -> '('créer le contexte', 'base prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: créer fichier = /tmp/test.txt avec les droits = 0600 ; Résultat: Le fichier est présent. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=créer fichier = /tmp/test.txt avec les droits = 0600, result=('créer fichier = /tmp/test.txt avec les droits = 0600', 'Le fichier est présent.', None), original=Action: créer fichier = /tmp/test.txt avec les droits = 0600 ; Résultat: Le fichier est présent. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'créer fichier = /tmp/test.txt avec les droits = 0600' -> '('créer fichier = /tmp/test.txt avec les droits = 0600', 'Le fichier est présent.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: déplacer le dossier /tmp/dir vers /tmp/dir2 ; Résultat: le dossier est déplacé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=déplacer le dossier /tmp/dir vers /tmp/dir2, result=('déplacer le dossier /tmp/dir vers /tmp/dir2', 'le dossier est déplacé.', None), original=Action: déplacer le dossier /tmp/dir vers /tmp/dir2 ; Résultat: le dossier est déplacé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'déplacer le dossier /tmp/dir vers /tmp/dir2' -> '('déplacer le dossier /tmp/dir vers /tmp/dir2', 'le dossier est déplacé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: déplacer le fichier /tmp/a.txt vers /tmp/b.txt ; Résultat: le fichier est déplacé. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=déplacer le fichier /tmp/a.txt vers /tmp/b.txt, result=('déplacer le fichier /tmp/a.txt vers /tmp/b.txt', 'le fichier est déplacé.', None), original=Action: déplacer le fichier /tmp/a.txt vers /tmp/b.txt ; Résultat: le fichier est déplacé. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'déplacer le fichier /tmp/a.txt vers /tmp/b.txt' -> '('déplacer le fichier /tmp/a.txt vers /tmp/b.txt', 'le fichier est déplacé.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: exécuter dummy.sh ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=exécuter dummy.sh, result=('exécuter dummy.sh', 'retour 0.', None), original=Action: exécuter dummy.sh ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'exécuter dummy.sh' -> '('exécuter dummy.sh', 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: exécuter traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=exécuter traitement.sh, result=('exécuter traitement.sh', 'retour 0.', None), original=Action: exécuter traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'exécuter traitement.sh' -> '('exécuter traitement.sh', 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: initialiser le contexte ; Résultat: base prête. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=initialiser le contexte, result=('initialiser le contexte', 'base prête.', None), original=Action: initialiser le contexte ; Résultat: base prête. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'initialiser le contexte' -> '('initialiser le contexte', 'base prête.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: lancer traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=lancer traitement.sh, result=('lancer traitement.sh', 'retour 0.', None), original=Action: lancer traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'lancer traitement.sh' -> '('lancer traitement.sh', 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: lire le fichier = /tmp/test.txt ; Résultat: contenu affiché. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=lire le fichier = /tmp/test.txt, result=('lire le fichier = /tmp/test.txt', 'contenu affiché.', None), original=Action: lire le fichier = /tmp/test.txt ; Résultat: contenu affiché. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'lire le fichier = /tmp/test.txt' -> '('lire le fichier = /tmp/test.txt', 'contenu affiché.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: mettre à jour la date du fichier /tmp/test.txt 202501010101 ; Résultat: date modifiée. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=mettre à jour la date du fichier /tmp/test.txt 202501010101, result=('mettre à jour la date du fichier /tmp/test.txt 202501010101', 'date modifiée.', None), original=Action: mettre à jour la date du fichier /tmp/test.txt 202501010101 ; Résultat: date modifiée. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'mettre à jour la date du fichier /tmp/test.txt 202501010101' -> '('mettre à jour la date du fichier /tmp/test.txt 202501010101', 'date modifiée.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: mettre à jour fichier = /tmp/test.txt avec les droits = 0600 ; Résultat: Le fichier est présent. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=mettre à jour fichier = /tmp/test.txt avec les droits = 0600, result=('mettre à jour fichier = /tmp/test.txt avec les droits = 0600', 'Le fichier est présent.', None), original=Action: mettre à jour fichier = /tmp/test.txt avec les droits = 0600 ; Résultat: Le fichier est présent. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'mettre à jour fichier = /tmp/test.txt avec les droits = 0600' -> '('mettre à jour fichier = /tmp/test.txt avec les droits = 0600', 'Le fichier est présent.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: toucher le fichier /tmp/test.txt -t 202501010101 ; Résultat: date modifiée. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=toucher le fichier /tmp/test.txt -t 202501010101, result=('toucher le fichier /tmp/test.txt -t 202501010101', 'date modifiée.', None), original=Action: toucher le fichier /tmp/test.txt -t 202501010101 ; Résultat: date modifiée. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'toucher le fichier /tmp/test.txt -t 202501010101' -> '('toucher le fichier /tmp/test.txt -t 202501010101', 'date modifiée.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding TEXT token value=Action: traiter traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] RegexTokenizer.tokenize: Yielding token type=TokenType.ACTION_RESULT, value=traiter traitement.sh, result=('traiter traitement.sh', 'retour 0.', None), original=Action: traiter traitement.sh ; Résultat: retour 0. at line 1
[DEBUG] Yielding token: ACTION_RESULT@1:0 'traiter traitement.sh' -> '('traiter traitement.sh', 'retour 0.', None)'
[DEBUG] RegexTokenizer.tokenize: Yielding EMPTY token at line 1
[DEBUG] Yielding token: EMPTY@1:0 ''
[DEBUG] Got 76 tokens
[DEBUG] Grammar: _merge_action_result called with 76 tokens
[DEBUG] Grammar: Token 0: kind=STEP, value='catalogue'
[DEBUG] Grammar: Token 1: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/JDD_Commun.sql'
[DEBUG] Grammar: Token 2: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/JDD_Extra.sql'
[DEBUG] Grammar: Token 3: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/file.txt'
[DEBUG] Grammar: Token 4: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/file.txt'
[DEBUG] Grammar: Token 5: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/output.txt'
[DEBUG] Grammar: Token 6: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] Grammar: Token 7: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] Grammar: Token 8: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] Grammar: Token 9: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] Grammar: Token 10: kind=ACTION_RESULT, value='Afficher le contenu du fichier = /tmp/test_folder/test.txt'
[DEBUG] Grammar: Token 11: kind=ACTION_RESULT, value='Copier le dossier /tmp/data vers /tmp/backup'
[DEBUG] Grammar: Token 12: kind=ACTION_RESULT, value='Copier le fichier /tmp/src.txt vers /tmp/dest.txt'
[DEBUG] Grammar: Token 13: kind=ACTION_RESULT, value='Créer le dossier = /tmp/data avec les droits = 0755'
[DEBUG] Grammar: Token 14: kind=ACTION_RESULT, value='Créer le dossier = /tmp/newdir'
[DEBUG] Grammar: Token 15: kind=ACTION_RESULT, value='Créer le dossier = /tmp/newdir'
[DEBUG] Grammar: Token 16: kind=ACTION_RESULT, value='Créer le dossier = /tmp/newdir'
[DEBUG] Grammar: Token 17: kind=ACTION_RESULT, value='Créer dossier = /tmp/test_folder avec les droits = 0700'
[DEBUG] Grammar: Token 18: kind=ACTION_RESULT, value='Créer fichier = /tmp/output.txt avec les droits = 0644'
[DEBUG] Grammar: Token 19: kind=ACTION_RESULT, value='Créer fichier = /tmp/test_folder/test.txt avec les droits = 0600'
[DEBUG] Grammar: Token 20: kind=ACTION_RESULT, value='Définir la variable SQL_CONN = sqlplus -S user/password@db'
[DEBUG] Grammar: Token 21: kind=ACTION_RESULT, value='Définir la variable SQL_CONN = sqlplus -S user/password@db'
[DEBUG] Grammar: Token 22: kind=ACTION_RESULT, value='Exécuter /opt/batch/traitement.sh'
[DEBUG] Grammar: Token 23: kind=ACTION_RESULT, value='Exécuter /opt/batch/traitement.sh'
[DEBUG] Grammar: Token 24: kind=ACTION_RESULT, value='Exécuter /opt/batch/traitement.sh'
[DEBUG] Grammar: Token 25: kind=ACTION_RESULT, value='Exécuter /opt/batch/traitement.sh avec l'argument produit=123 et la quantité=10'
[DEBUG] Grammar: Token 26: kind=ACTION_RESULT, value='Exécuter /opt/batch/traitement.sh avec l'argument produit=567 et la quantité=20'
[DEBUG] Grammar: Token 27: kind=ACTION_RESULT, value='Exécuter le script SQL JDD_Commun.sql'
[DEBUG] Grammar: Token 28: kind=ACTION_RESULT, value='Exécuter le script SQL JDD_Commun.sql puis JDD_Extra.sql'
[DEBUG] Grammar: Token 29: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 30: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 31: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 32: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 33: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 34: kind=ACTION_RESULT, value='Exécuter script.sh'
[DEBUG] Grammar: Token 35: kind=ACTION_RESULT, value='Indiquer le chemin des logs = /var/log/sys.log'
[DEBUG] Grammar: Token 36: kind=ACTION_RESULT, value='Indiquer le chemin des logs = /var/log/sys.log'
[DEBUG] Grammar: Token 37: kind=ACTION_RESULT, value='Indiquer le chemin des logs = /var/log/system.log'
[DEBUG] Grammar: Token 38: kind=ACTION_RESULT, value='Mettre à jour la date du fichier /tmp/file.txt 202501010101'
[DEBUG] Grammar: Token 39: kind=ACTION_RESULT, value='Mettre à jour la date du fichier /tmp/file.txt 202501010101'
[DEBUG] Grammar: Token 40: kind=ACTION_RESULT, value='Mettre à jour la date du fichier /tmp/output.txt 202501021200'
[DEBUG] Grammar: Token 41: kind=ACTION_RESULT, value='Toucher le fichier /tmp/init.flag 202501010000'
[DEBUG] Grammar: Token 42: kind=ACTION_RESULT, value='Vider le répertoire /tmp/cache'
[DEBUG] Grammar: Token 43: kind=ACTION_RESULT, value='Vérifier qu'aucune erreur n'apparaît'
[DEBUG] Grammar: Token 44: kind=ACTION_RESULT, value='Vérifier qu'il n'y a pas d'erreur'
[DEBUG] Grammar: Token 45: kind=ACTION_RESULT, value='Vérifier qu'il n'y a pas d'erreur'
[DEBUG] Grammar: Token 46: kind=ACTION_RESULT, value='Vérifier qu'il n'y a pas d'erreurs dans les logs'
[DEBUG] Grammar: Token 47: kind=ACTION_RESULT, value='Vérifier que la date du fichier /tmp/test.log est 202501010000'
[DEBUG] Grammar: Token 48: kind=ACTION_RESULT, value='Vérifier que le dossier /tmp/testdir a les droits 0755'
[DEBUG] Grammar: Token 49: kind=ACTION_RESULT, value='Vérifier que le dossier /tmp/testdir contient 2 fichiers *.txt'
[DEBUG] Grammar: Token 50: kind=ACTION_RESULT, value='Vérifier que le dossier /tmp/testdir existe'
[DEBUG] Grammar: Token 51: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/dest.txt existe'
[DEBUG] Grammar: Token 52: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/dest.txt existe'
[DEBUG] Grammar: Token 53: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/test.log a les droits 0644'
[DEBUG] Grammar: Token 54: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/test.log contient OK'
[DEBUG] Grammar: Token 55: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/test.log contient exactement ALLGOOD'
[DEBUG] Grammar: Token 56: kind=ACTION_RESULT, value='Vérifier que le fichier /tmp/test.log existe'
[DEBUG] Grammar: Token 57: kind=ACTION_RESULT, value='afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] Grammar: Token 58: kind=ACTION_RESULT, value='cat le fichier = /tmp/test.txt'
[DEBUG] Grammar: Token 59: kind=ACTION_RESULT, value='configurer le contexte'
[DEBUG] Grammar: Token 60: kind=ACTION_RESULT, value='copier le dossier /tmp/dir vers /tmp/dir2'
[DEBUG] Grammar: Token 61: kind=ACTION_RESULT, value='copier le fichier /tmp/a.txt vers /tmp/b.txt'
[DEBUG] Grammar: Token 62: kind=ACTION_RESULT, value='créer le contexte'
[DEBUG] Grammar: Token 63: kind=ACTION_RESULT, value='créer fichier = /tmp/test.txt avec les droits = 0600'
[DEBUG] Grammar: Token 64: kind=ACTION_RESULT, value='déplacer le dossier /tmp/dir vers /tmp/dir2'
[DEBUG] Grammar: Token 65: kind=ACTION_RESULT, value='déplacer le fichier /tmp/a.txt vers /tmp/b.txt'
[DEBUG] Grammar: Token 66: kind=ACTION_RESULT, value='exécuter dummy.sh'
[DEBUG] Grammar: Token 67: kind=ACTION_RESULT, value='exécuter traitement.sh'
[DEBUG] Grammar: Token 68: kind=ACTION_RESULT, value='initialiser le contexte'
[DEBUG] Grammar: Token 69: kind=ACTION_RESULT, value='lancer traitement.sh'
[DEBUG] Grammar: Token 70: kind=ACTION_RESULT, value='lire le fichier = /tmp/test.txt'
[DEBUG] Grammar: Token 71: kind=ACTION_RESULT, value='mettre à jour la date du fichier /tmp/test.txt 202501010101'
[DEBUG] Grammar: Token 72: kind=ACTION_RESULT, value='mettre à jour fichier = /tmp/test.txt avec les droits = 0600'
[DEBUG] Grammar: Token 73: kind=ACTION_RESULT, value='toucher le fichier /tmp/test.txt -t 202501010101'
[DEBUG] Grammar: Token 74: kind=ACTION_RESULT, value='traiter traitement.sh'
[DEBUG] Grammar: Token 75: kind=EMPTY, value=''
[DEBUG] Grammar: _merge_action_result returning 76 tokens
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/JDD_Commun.sql'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/JDD_Commun.sql' (normalized: 'afficher le contenu du fichier = /tmp/jdd_commun.sql')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/JDD_Commun.sql', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/JDD_Commun.sql'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/JDD_Commun.sql'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/JDD_Commun.sql', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/JDD_Commun.sql'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/JDD_Commun.sql'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F0540DFED0>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/JDD_Commun.sql'
[DEBUG] compile_validation_expression called with: 'Le contenu est affiché'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le contenu est affiché', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/JDD_Commun.sql'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le contenu est affiché'
[DEBUG] compile_atomic: canonize_validation('Le contenu est affiché') result: {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le contenu est affiché', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/JDD_Extra.sql'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/JDD_Extra.sql' (normalized: 'afficher le contenu du fichier = /tmp/jdd_extra.sql')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/JDD_Extra.sql', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/JDD_Extra.sql'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/JDD_Extra.sql'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/JDD_Extra.sql', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/JDD_Extra.sql'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/JDD_Extra.sql'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F0542FFD90>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/JDD_Extra.sql'
[DEBUG] compile_validation_expression called with: 'Le script est affiché'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le script est affiché', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/JDD_Extra.sql'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le script est affiché'
[DEBUG] compile_atomic: canonize_validation('Le script est affiché') result: {'phrase': 'Le script est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le script est affiché', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/file.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/file.txt' (normalized: 'afficher le contenu du fichier = /tmp/file.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/file.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/file.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/file.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/file.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/file.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/file.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F0542FE810>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/file.txt'
[DEBUG] compile_validation_expression called with: 'Le contenu est correct'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le contenu est correct', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/file.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le contenu est correct'
[DEBUG] compile_atomic: canonize_validation('Le contenu est correct') result: {'phrase': 'le contenu est correct', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le contenu est correct', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/file.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/file.txt' (normalized: 'afficher le contenu du fichier = /tmp/file.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/file.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/file.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/file.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/file.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/file.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/file.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F05433D5D0>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/file.txt'
[DEBUG] compile_validation_expression called with: 'contenu correct'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='contenu correct', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/file.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'contenu correct'
[DEBUG] compile_atomic: canonize_validation('contenu correct') result: {'phrase': 'contenu correct', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'contenu correct', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/output.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/output.txt' (normalized: 'afficher le contenu du fichier = /tmp/output.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/output.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/output.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/output.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/output.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/output.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/output.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F054341E10>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/output.txt'
[DEBUG] compile_validation_expression called with: 'Le contenu est correct'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le contenu est correct', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/output.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le contenu est correct'
[DEBUG] compile_atomic: canonize_validation('Le contenu est correct') result: {'phrase': 'le contenu est correct', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le contenu est correct', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/test.txt' (normalized: 'afficher le contenu du fichier = /tmp/test.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/test.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/test.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F053FC3090>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/test.txt'
[DEBUG] compile_validation_expression called with: 'Le contenu est affiché'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le contenu est affiché', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/test.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le contenu est affiché'
[DEBUG] compile_atomic: canonize_validation('Le contenu est affiché') result: {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le contenu est affiché', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/test.txt' (normalized: 'afficher le contenu du fichier = /tmp/test.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/test.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/test.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F0543B0710>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/test.txt'
[DEBUG] compile_validation_expression called with: 'Le script est affiché'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le script est affiché', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/test.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le script est affiché'
[DEBUG] compile_atomic: canonize_validation('Le script est affiché') result: {'phrase': 'Le script est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le script est affiché', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/test.txt' (normalized: 'afficher le contenu du fichier = /tmp/test.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/test.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/test.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F053FD7950>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/test.txt'
[DEBUG] compile_validation_expression called with: 'contenu affiché'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='contenu affiché', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/test.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'contenu affiché'
[DEBUG] compile_atomic: canonize_validation('contenu affiché') result: {'phrase': 'contenu affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'contenu affiché', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/test.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/test.txt' (normalized: 'afficher le contenu du fichier = /tmp/test.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/test.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/test.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F053FC7550>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/test.txt'
[DEBUG] compile_validation_expression called with: 'le contenu est lisible'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le contenu est lisible', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/test.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le contenu est lisible'
[DEBUG] compile_atomic: canonize_validation('le contenu est lisible') result: {'phrase': 'le contenu est lisible', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le contenu est lisible', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Afficher le contenu du fichier = /tmp/test_folder/test.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Afficher le contenu du fichier = /tmp/test_folder/test.txt' (normalized: 'afficher le contenu du fichier = /tmp/test_folder/test.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'cat_file' for phrase 'Afficher le contenu du fichier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Afficher le contenu du fichier = /tmp/test_folder/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test_folder/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=cat_file, variables={'path': '= /tmp/test_folder/test.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.cat_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Afficher le contenu du fichier = /tmp/test_folder/test.txt', 'handler': 'cat_file', 'category': 'content_operations', 'variables': {'path': '= /tmp/test_folder/test.txt'}, 'requirements': {'required_variables': ['path'], 'optional_variables': [], 'scope': 'global', 'description': 'Display file contents', 'category': 'content_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Afficher le contenu du fichier {path}', 'config': {'type': 'action', 'phrase': 'Afficher le contenu du fichier {path}', 'aliases': ['afficher le contenu du fichier = {path}', 'cat le fichier = {path}', 'lire le fichier = {path}', 'voir le contenu du fichier = {path}', 'consulter le fichier = {path}', 'ouvrir le fichier = {path}', '^cat (.+)$', '^afficher le contenu du fichier = (.+)$', '^lire le fichier = (.+)$', 'voir le contenu du fichier {path}', 'lire le fichier {path}', 'consulter le fichier {path}', 'ouvrir le fichier {path}'], 'handler': 'cat_file'}}], 'scope': 'global'}, 'path': '= /tmp/test_folder/test.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.cat_file.CatFileAction object at 0x000001F053FC7550>
[DEBUG] get_action_shell_command: Generated shell command: cat '= /tmp/test_folder/test.txt'
[DEBUG] compile_validation_expression called with: 'le contenu est lisible'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le contenu est lisible', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Afficher le contenu du fichier = /tmp/test_folder/test.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le contenu est lisible'
[DEBUG] compile_atomic: canonize_validation('le contenu est lisible') result: {'phrase': 'le contenu est lisible', 'handler': 'content_displayed', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le contenu est affiché', 'handler': 'content_displayed', 'scope': 'last_action', 'opposite': {'phrase': "Le contenu n'est pas affiché"}, 'aliases': ['contenu affiché', 'contenu affiche', 'Le script est affiché', 'le contenu est lisible', 'le contenu est correct', 'contenu correct', '^contenu affiché$', '^contenu affiche$', '^le contenu est affiché$', '^le script est affiché$', '^le contenu est lisible$', '^le contenu est correct$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le contenu est lisible', 'handler': 'content_displayed', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if content was displayed', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.content_displayed
[DEBUG] Core handler returned: ValidationCheck(expected='le contenu de None est affiché', actual_cmd="test -s 'None'", handler='content_displayed', scope='last_action', params={'file_path': None, 'opposite': "le contenu de None n'est pas affiché"})
[DEBUG] get_action_shell_command called with: 'Copier le dossier /tmp/data vers /tmp/backup'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Copier le dossier /tmp/data vers /tmp/backup' (normalized: 'copier le dossier /tmp/data vers /tmp/backup')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Copier le dossier {src} vers {dest}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'copy_dir' for phrase 'Copier le dossier {src} vers {dest}'
[DEBUG] get_action_shell_command: context={'action': 'Copier le dossier /tmp/data vers /tmp/backup', 'handler': 'copy_dir', 'category': 'directory_operations', 'variables': {'src': '/tmp/data', 'dest': '/tmp/backup'}, 'requirements': {'required_variables': ['src', 'dest'], 'optional_variables': [], 'scope': 'global', 'description': 'Copy a directory from source to destination', 'category': 'directory_operations', 'validation_rules': {'src': {'type': 'path', 'required': True}, 'dest': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Copier le dossier {src} vers {dest}', 'config': {'type': 'action', 'phrase': 'Copier le dossier {src} vers {dest}', 'aliases': ['dupliquer le dossier {src} vers {dest}', 'copier le dossier {src} à {dest}', '^cp -r (.+) (.+)$'], 'handler': 'copy_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=copy_dir, variables={'src': '/tmp/data', 'dest': '/tmp/backup'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.copy_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Copier le dossier /tmp/data vers /tmp/backup', 'handler': 'copy_dir', 'category': 'directory_operations', 'variables': {'src': '/tmp/data', 'dest': '/tmp/backup'}, 'requirements': {'required_variables': ['src', 'dest'], 'optional_variables': [], 'scope': 'global', 'description': 'Copy a directory from source to destination', 'category': 'directory_operations', 'validation_rules': {'src': {'type': 'path', 'required': True}, 'dest': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Copier le dossier {src} vers {dest}', 'config': {'type': 'action', 'phrase': 'Copier le dossier {src} vers {dest}', 'aliases': ['dupliquer le dossier {src} vers {dest}', 'copier le dossier {src} à {dest}', '^cp -r (.+) (.+)$'], 'handler': 'copy_dir'}}], 'scope': 'global'}, 'src': '/tmp/data', 'dest': '/tmp/backup'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.copy_dir.CopyDirAction object at 0x000001F053FD6F90>
[DEBUG] get_action_shell_command: Generated shell command: cp -r '/tmp/data' '/tmp/backup'
[DEBUG] compile_validation_expression called with: 'le dossier est copié'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le dossier est copié', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Copier le dossier /tmp/data vers /tmp/backup'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le dossier est copié'
[DEBUG] compile_atomic: canonize_validation('le dossier est copié') result: {'phrase': 'Le dossier est copié', 'handler': 'dir_copied', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est copié', 'handler': 'dir_copied', 'scope': 'last_action', 'opposite': {'phrase': "Le dossier n'est pas copié"}, 'aliases': ['le dossier est copié', 'dossier copié', '^le dossier est copié$', '^dossier copié$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le dossier est copié', 'handler': 'dir_copied', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory was copied', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_copied
[DEBUG] Core handler returned: ValidationCheck(expected='le dossier None a été copié vers None', actual_cmd="test -d 'None' && test -d 'None' && diff -r 'None' 'None' >/dev/null 2>&1", handler='dir_copied', scope='last_action', params={'dir1': None, 'dir2': None, 'opposite': "le dossier None n'a pas été copié vers None"})
[DEBUG] get_action_shell_command called with: 'Copier le fichier /tmp/src.txt vers /tmp/dest.txt'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Copier le fichier /tmp/src.txt vers /tmp/dest.txt' (normalized: 'copier le fichier /tmp/src.txt vers /tmp/dest.txt')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Copier le fichier {src} vers {dest}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'copy_file' for phrase 'Copier le fichier {src} vers {dest}'
[DEBUG] get_action_shell_command: context={'action': 'Copier le fichier /tmp/src.txt vers /tmp/dest.txt', 'handler': 'copy_file', 'category': 'file_operations', 'variables': {'src': '/tmp/src.txt', 'dest': '/tmp/dest.txt'}, 'requirements': {'required_variables': ['src', 'dest'], 'optional_variables': [], 'scope': 'global', 'description': 'Copy a file from source to destination', 'category': 'file_operations', 'validation_rules': {'src': {'type': 'path', 'required': True}, 'dest': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Copier le fichier {src} vers {dest}', 'config': {'type': 'action', 'phrase': 'Copier le fichier {src} vers {dest}', 'aliases': ['dupliquer le fichier {src} vers {dest}', 'copier le fichier {src} à {dest}', '^cp (.+) (.+)$', 'copier le fichier {src} vers {dest}'], 'handler': 'copy_file'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=copy_file, variables={'src': '/tmp/src.txt', 'dest': '/tmp/dest.txt'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.copy_file
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Copier le fichier /tmp/src.txt vers /tmp/dest.txt', 'handler': 'copy_file', 'category': 'file_operations', 'variables': {'src': '/tmp/src.txt', 'dest': '/tmp/dest.txt'}, 'requirements': {'required_variables': ['src', 'dest'], 'optional_variables': [], 'scope': 'global', 'description': 'Copy a file from source to destination', 'category': 'file_operations', 'validation_rules': {'src': {'type': 'path', 'required': True}, 'dest': {'type': 'path', 'required': True}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Copier le fichier {src} vers {dest}', 'config': {'type': 'action', 'phrase': 'Copier le fichier {src} vers {dest}', 'aliases': ['dupliquer le fichier {src} vers {dest}', 'copier le fichier {src} à {dest}', '^cp (.+) (.+)$', 'copier le fichier {src} vers {dest}'], 'handler': 'copy_file'}}], 'scope': 'global'}, 'src': '/tmp/src.txt', 'dest': '/tmp/dest.txt'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.copy_file.CopyFileAction object at 0x000001F053FD6F90>
[DEBUG] get_action_shell_command: Generated shell command: cp '/tmp/src.txt' '/tmp/dest.txt'
[DEBUG] compile_validation_expression called with: 'le fichier est copié'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le fichier est copié', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Copier le fichier /tmp/src.txt vers /tmp/dest.txt'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le fichier est copié'
[DEBUG] compile_atomic: canonize_validation('le fichier est copié') result: {'phrase': 'Le fichier est copié', 'handler': 'file_copied', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le fichier est copié', 'handler': 'file_copied', 'scope': 'last_action', 'opposite': {'phrase': "Le fichier n'est pas copié"}, 'aliases': ['le fichier est copié', 'fichier copié', '^le fichier est copié$', '^fichier copié$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le fichier est copié', 'handler': 'file_copied', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if file was copied', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.file_copied
[DEBUG] Core handler returned: ValidationCheck(expected='le fichier None a été copié vers None', actual_cmd='[ -f None ] && [ -f None ] && cmp -s None None', handler='file_copied', scope='global', params={'file1': None, 'file2': None, 'opposite': "le fichier None n'a pas été copié vers None"})
[DEBUG] get_action_shell_command called with: 'Créer le dossier = /tmp/data avec les droits = 0755'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le dossier = /tmp/data avec les droits = 0755' (normalized: 'créer le dossier = /tmp/data avec les droits = 0755')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le dossier = /tmp/data avec les droits = 0755', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/data avec les droits = 0755'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '= /tmp/data avec les droits = 0755'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le dossier = /tmp/data avec les droits = 0755', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/data avec les droits = 0755'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '= /tmp/data avec les droits = 0755'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x000001F053FC10D0>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '= /tmp/data avec les droits = 0755'
[DEBUG] compile_validation_expression called with: 'Le dossier est créé'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le dossier est créé', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le dossier = /tmp/data avec les droits = 0755'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le dossier est créé'
[DEBUG] compile_atomic: canonize_validation('Le dossier est créé') result: {'phrase': 'le dossier est créé', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le dossier est créé', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'Créer le dossier = /tmp/newdir'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le dossier = /tmp/newdir' (normalized: 'créer le dossier = /tmp/newdir')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x000001F054302710>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '= /tmp/newdir'
[DEBUG] compile_validation_expression called with: 'Le dossier est créé'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le dossier est créé', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le dossier = /tmp/newdir'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le dossier est créé'
[DEBUG] compile_atomic: canonize_validation('Le dossier est créé') result: {'phrase': 'le dossier est créé', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le dossier est créé', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'Créer le dossier = /tmp/newdir'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le dossier = /tmp/newdir' (normalized: 'créer le dossier = /tmp/newdir')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x000001F05434E710>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '= /tmp/newdir'
[DEBUG] compile_validation_expression called with: 'dossier créé'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='dossier créé', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le dossier = /tmp/newdir'}
[DEBUG] compile_atomic: Trying to canonize validation: 'dossier créé'
[DEBUG] compile_atomic: canonize_validation('dossier créé') result: {'phrase': 'dossier créé', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'dossier créé', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'Créer le dossier = /tmp/newdir'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer le dossier = /tmp/newdir' (normalized: 'créer le dossier = /tmp/newdir')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Found match with pattern 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: canonize_action matched handler 'create_dir' for phrase 'Créer le dossier {path}'
[DEBUG] get_action_shell_command: context={'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}
[DEBUG] get_action_shell_command: handler=create_dir, variables={'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Trying action handler: shtest_compiler.core.action_handlers.create_dir
[DEBUG] get_action_shell_command: Calling action handler with params={'context': {'action': 'Créer le dossier = /tmp/newdir', 'handler': 'create_dir', 'category': 'directory_operations', 'variables': {'path': '= /tmp/newdir'}, 'requirements': {'required_variables': ['path'], 'optional_variables': ['mode'], 'scope': 'global', 'description': 'Create a new directory', 'category': 'directory_operations', 'validation_rules': {'path': {'type': 'path', 'required': True}, 'mode': {'type': 'mode', 'required': False, 'pattern': '^[0-7]{3,4}$'}}}, 'patterns_matched': [{'type': 'phrase', 'pattern': 'Créer le dossier {path}', 'config': {'type': 'action', 'phrase': 'Créer le dossier {path}', 'aliases': ['créer un dossier {path}', 'faire un dossier {path}', 'nouveau dossier {path}', 'cr[ée]er le dossier (.+)', '^mkdir (.+)$'], 'handler': 'create_dir'}}], 'scope': 'global'}, 'path': '= /tmp/newdir'}
[DEBUG] get_action_shell_command: Action handler returned=<shtest_compiler.core.action_handlers.create_dir.CreateDirAction object at 0x000001F054341F50>
[DEBUG] get_action_shell_command: Generated shell command: mkdir -p '= /tmp/newdir'
[DEBUG] compile_validation_expression called with: 'le dossier est prêt'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le dossier est prêt', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer le dossier = /tmp/newdir'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le dossier est prêt'
[DEBUG] compile_atomic: canonize_validation('le dossier est prêt') result: {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le dossier est prêt', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'Créer dossier = /tmp/test_folder avec les droits = 0700'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer dossier = /tmp/test_folder avec les droits = 0700' (normalized: 'créer dossier = /tmp/test_folder avec les droits = 0700')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'afficher le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^afficher\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cat le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^cat\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cat (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cat (.+)$'
[DEBUG] canonize_action: Checking alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Checking alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script {script}' with handler 'run_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ (.+)$'
[DEBUG] canonize_action: Checking alias 'traiter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^traiter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter traitement.sh'
[DEBUG] canonize_action: Checking alias 'lancer traitement.sh'
[DEBUG] canonize_action: Checking alias 'traiter traitement.sh'
[DEBUG] canonize_action: Checking alias '^sh (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sh (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire tourner le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ tourner\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'démarrer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^démarrer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script SQL {script}' with handler 'run_sql_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script SQL {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter la requête SQL {query}' with handler 'sql_query'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exporter les résultats de la requête {query} vers {output}' with handler 'sql_export'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer les résultats de la requête {query1} avec {query2}' with handler 'sql_compare'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer le fichier {file1} avec {file2}' with handler 'compare_files'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} avec {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} et {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ et\ (.+)$'
[DEBUG] canonize_action: Checking alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Définir la variable {var} = {value}' with handler 'export_var'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Définir\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'définir la variable SQL_CONN = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^définir\ la\ variable\ SQL_CONN\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'définir la variable d'environnement {var} = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^définir\ la\ variable\ d'environnement\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter la variable {var} = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^export (.+)=(.+)$'
[DEBUG] canonize_action: Testing regex alias '^export (.+)=(.+)$'
[DEBUG] canonize_action: Checking alias 'définir la variable {var} = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^définir\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Mettre à jour la date du fichier {file} {date}' with handler 'touch_ts'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Mettre\ à\ jour\ la\ date\ du\ fichier\ (.+)\ (.+)$'
[DEBUG] canonize_action: Checking alias 'toucher le fichier {file} -t {date}'
[DEBUG] canonize_action: Testing alias regex '(?i)^toucher\ le\ fichier\ (.+)\ \-t\ (.+)$'
[DEBUG] canonize_action: Checking alias 'mettre à jour la date du fichier {file} {date}'
[DEBUG] canonize_action: Testing alias regex '(?i)^mettre\ à\ jour\ la\ date\ du\ fichier\ (.+)\ (.+)$'
[DEBUG] canonize_action: Checking alias '^touch -t (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch -t (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path} avec les droits {mode}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)\ avec\ les\ droits\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer le fichier = {path} avec les droits = {mode}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ le\ fichier\ =\ (.+)\ avec\ les\ droits\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Mettre à jour le fichier {path} avec les droits {mode}' with handler 'update_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Mettre\ à\ jour\ le\ fichier\ (.+)\ avec\ les\ droits\ (.+)$'
[DEBUG] canonize_action: Checking alias 'mettre à jour le fichier = {path} avec les droits = {mode}'
[DEBUG] canonize_action: Testing alias regex '(?i)^mettre\ à\ jour\ le\ fichier\ =\ (.+)\ avec\ les\ droits\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'maj fichier {path} droits {mode}'
[DEBUG] canonize_action: Testing alias regex '(?i)^maj\ fichier\ (.+)\ droits\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path} avec les droits {mode}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)\ avec\ les\ droits\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer le dossier = {path} avec les droits = {mode}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ le\ dossier\ =\ (.+)\ avec\ les\ droits\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: No match found for action 'Créer dossier = /tmp/test_folder avec les droits = 0700'
[DEBUG] get_action_shell_command: canonize_action returned None for 'Créer dossier = /tmp/test_folder avec les droits = 0700'
[DEBUG] compile_validation_expression called with: 'le dossier est prêt'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='le dossier est prêt', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer dossier = /tmp/test_folder avec les droits = 0700'}
[DEBUG] compile_atomic: Trying to canonize validation: 'le dossier est prêt'
[DEBUG] compile_atomic: canonize_validation('le dossier est prêt') result: {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'pattern_entry': {'phrase': 'Le dossier est prêt', 'handler': 'dir_ready', 'scope': 'last_action', 'opposite': {'phrase': 'Le dossier est absent'}, 'aliases': ['le dossier est prêt', 'dossier prêt', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est cree', 'dossier cree', 'le dossier est créé', 'dossier créé', 'le dossier est present', 'dossier present', 'le dossier est vide', 'dossier vide', '^le dossier est prêt$', '^dossier prêt$', '^le dossier est cree$', '^dossier cree$', '^le dossier est créé$', '^dossier créé$', '^le dossier est present$', '^dossier present$', '^le dossier est vide$', '^dossier vide$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'le dossier est prêt', 'handler': 'dir_ready', 'category': 'validation', 'variables': {}, 'requirements': {'required_variables': [], 'optional_variables': [], 'scope': 'last_action', 'description': 'Check if directory is ready', 'category': 'validation', 'validation_rules': {}}, 'patterns_matched': [], 'scope': 'last_action'}
[DEBUG] Final params for handler: {}
[DEBUG] Trying to import core handler: shtest_compiler.core.handlers.dir_ready
[DEBUG] Core handler ImportError: No module named 'shtest_compiler.core.handlers.dir_ready'
[DEBUG] get_action_shell_command called with: 'Créer fichier = /tmp/output.txt avec les droits = 0644'
[DEBUG] canonize_action: Loaded 21 action patterns
[DEBUG] canonize_action: Processing action 'Créer fichier = /tmp/output.txt avec les droits = 0644' (normalized: 'créer fichier = /tmp/output.txt avec les droits = 0644')
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le dossier (.+)'
[DEBUG] canonize_action: Checking alias '^mkdir (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mkdir (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le dossier {path}' with handler 'delete_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ dossier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le dossier {src} vers {dest}' with handler 'copy_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le dossier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp -r (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le dossier {src} vers {dest}' with handler 'move_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ dossier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le dossier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ dossier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Purger le répertoire {path}' with handler 'purge_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Purger\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'vider le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^vider\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nettoyer le répertoire {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nettoyer\ le\ répertoire\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Testing regex alias '^rm -rf (.+)/\\*$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire un fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ un\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'générer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^générer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cr[ée]er le fichier (.+)'
[DEBUG] canonize_action: Checking alias '^touch (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch (.+)$'
[DEBUG] canonize_action: Checking pattern 'Supprimer le fichier {path}' with handler 'delete_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Supprimer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'effacer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^effacer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'enlever le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^enlever\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'retirer le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^retirer\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias '^rm (.+)$'
[DEBUG] canonize_action: Testing regex alias '^rm (.+)$'
[DEBUG] canonize_action: Checking pattern 'Copier le fichier {src} vers {dest}' with handler 'copy_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'dupliquer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^dupliquer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cp (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'copier le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^copier\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Déplacer le fichier {src} vers {dest}' with handler 'move_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} à {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ à\ (.+)$'
[DEBUG] canonize_action: Checking alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^mv (.+) (.+)$'
[DEBUG] canonize_action: Checking alias 'déplacer le fichier {src} vers {dest}'
[DEBUG] canonize_action: Testing alias regex '(?i)^déplacer\ le\ fichier\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Afficher le contenu du fichier {path}' with handler 'cat_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Afficher\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'afficher le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^afficher\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'cat le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^cat\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier = {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^cat (.+)$'
[DEBUG] canonize_action: Testing regex alias '^cat (.+)$'
[DEBUG] canonize_action: Checking alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^afficher le contenu du fichier = (.+)$'
[DEBUG] canonize_action: Checking alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Testing regex alias '^lire le fichier = (.+)$'
[DEBUG] canonize_action: Checking alias 'voir le contenu du fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^voir\ le\ contenu\ du\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lire le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lire\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'consulter le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^consulter\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking alias 'ouvrir le fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^ouvrir\ le\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script {script}' with handler 'run_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ (.+)$'
[DEBUG] canonize_action: Checking alias 'traiter {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^traiter\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter traitement.sh'
[DEBUG] canonize_action: Checking alias 'lancer traitement.sh'
[DEBUG] canonize_action: Checking alias 'traiter traitement.sh'
[DEBUG] canonize_action: Checking alias '^sh (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sh (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'faire tourner le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^faire\ tourner\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking alias 'démarrer le script {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^démarrer\ le\ script\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter le script SQL {script}' with handler 'run_sql_script'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script SQL {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer le script sql {script}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ le\ script\ sql\ (.+)$'
[DEBUG] canonize_action: Checking alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Testing regex alias '^sqlplus (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exécuter la requête SQL {query}' with handler 'sql_query'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête SQL {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ SQL\ (.+)$'
[DEBUG] canonize_action: Checking alias 'lancer la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^lancer\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exécuter la requête {query}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exécuter\ la\ requête\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Exporter les résultats de la requête {query} vers {output}' with handler 'sql_export'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter les résultats de la requête {query} vers {output}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ les\ résultats\ de\ la\ requête\ (.+)\ vers\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer les résultats de la requête {query1} avec {query2}' with handler 'sql_compare'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer les résultats de la requête {query1} avec {query2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ les\ résultats\ de\ la\ requête\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Comparer le fichier {file1} avec {file2}' with handler 'compare_files'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} avec {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ avec\ (.+)$'
[DEBUG] canonize_action: Checking alias 'comparer le fichier {file1} et {file2}'
[DEBUG] canonize_action: Testing alias regex '(?i)^comparer\ le\ fichier\ (.+)\ et\ (.+)$'
[DEBUG] canonize_action: Checking alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^diff (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Définir la variable {var} = {value}' with handler 'export_var'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Définir\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'définir la variable SQL_CONN = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^définir\ la\ variable\ SQL_CONN\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'définir la variable d'environnement {var} = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^définir\ la\ variable\ d'environnement\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'exporter la variable {var} = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^exporter\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias '^export (.+)=(.+)$'
[DEBUG] canonize_action: Testing regex alias '^export (.+)=(.+)$'
[DEBUG] canonize_action: Checking alias 'définir la variable {var} = {value}'
[DEBUG] canonize_action: Testing alias regex '(?i)^définir\ la\ variable\ (.+)\ =\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Mettre à jour la date du fichier {file} {date}' with handler 'touch_ts'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Mettre\ à\ jour\ la\ date\ du\ fichier\ (.+)\ (.+)$'
[DEBUG] canonize_action: Checking alias 'toucher le fichier {file} -t {date}'
[DEBUG] canonize_action: Testing alias regex '(?i)^toucher\ le\ fichier\ (.+)\ \-t\ (.+)$'
[DEBUG] canonize_action: Checking alias 'mettre à jour la date du fichier {file} {date}'
[DEBUG] canonize_action: Testing alias regex '(?i)^mettre\ à\ jour\ la\ date\ du\ fichier\ (.+)\ (.+)$'
[DEBUG] canonize_action: Checking alias '^touch -t (.+) (.+)$'
[DEBUG] canonize_action: Testing regex alias '^touch -t (.+) (.+)$'
[DEBUG] canonize_action: Checking pattern 'Créer le fichier {path} avec les droits {mode}' with handler 'create_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ fichier\ (.+)\ avec\ les\ droits\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer le fichier = {path} avec les droits = {mode}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ le\ fichier\ =\ (.+)\ avec\ les\ droits\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau fichier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ fichier\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Mettre à jour le fichier {path} avec les droits {mode}' with handler 'update_file'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Mettre\ à\ jour\ le\ fichier\ (.+)\ avec\ les\ droits\ (.+)$'
[DEBUG] canonize_action: Checking alias 'mettre à jour le fichier = {path} avec les droits = {mode}'
[DEBUG] canonize_action: Testing alias regex '(?i)^mettre\ à\ jour\ le\ fichier\ =\ (.+)\ avec\ les\ droits\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'maj fichier {path} droits {mode}'
[DEBUG] canonize_action: Testing alias regex '(?i)^maj\ fichier\ (.+)\ droits\ (.+)$'
[DEBUG] canonize_action: Checking pattern 'Créer le dossier {path} avec les droits {mode}' with handler 'create_dir'
[DEBUG] canonize_action: Testing regex pattern '(?i)^Créer\ le\ dossier\ (.+)\ avec\ les\ droits\ (.+)$'
[DEBUG] canonize_action: Checking alias 'créer le dossier = {path} avec les droits = {mode}'
[DEBUG] canonize_action: Testing alias regex '(?i)^créer\ le\ dossier\ =\ (.+)\ avec\ les\ droits\ =\ (.+)$'
[DEBUG] canonize_action: Checking alias 'nouveau dossier {path}'
[DEBUG] canonize_action: Testing alias regex '(?i)^nouveau\ dossier\ (.+)$'
[DEBUG] canonize_action: No match found for action 'Créer fichier = /tmp/output.txt avec les droits = 0644'
[DEBUG] get_action_shell_command: canonize_action returned None for 'Créer fichier = /tmp/output.txt avec les droits = 0644'
[DEBUG] compile_validation_expression called with: 'Le fichier est présent'
[DEBUG] compile_validation_expression: Detected atomic expression, using compile_atomic
[DEBUG] compile_atomic called with: expected='Le fichier est présent', varname='result', last_file_var=None, extracted_args=None, action_context={'command': 'Créer fichier = /tmp/output.txt avec les droits = 0644'}
[DEBUG] compile_atomic: Trying to canonize validation: 'Le fichier est présent'
[DEBUG] compile_atomic: canonize_validation('Le fichier est présent') result: {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'pattern_entry': {'phrase': 'Le fichier est présent', 'handler': 'file_present', 'scope': 'global', 'opposite': {'phrase': 'Le fichier est absent'}, 'aliases': ['Le fichier est présent', 'le fichier existe', 'fichier présent', 'le fichier est cree', 'fichier cree', 'le fichier est créé', 'fichier créé', 'le fichier est initialisé', 'fichier initialisé', 'le fichier est present', 'fichier present', 'le fichier est cree', 'fichier cree', 'le fichier est cree', 'fichier cree', 'le fichier est initialise', 'fichier initialise', '^le fichier est présent$', '^le fichier existe$', '^fichier présent$', '^le fichier est cree$', '^fichier cree$', '^le fichier est créé$', '^fichier créé$', '^le fichier est initialisé$', '^fichier initialisé$', '^le fichier est present$', '^fichier present$', '^le fichier est cree$', '^fichier cree$', '^le fichier est initialise$', '^fichier initialise$']}, 'params': {}}
[DEBUG] extract_context_from_action result: {'action': 'Le fichier est présent', 'handler': 'file_present', 'category': 'file_operations', 'variables': {}, 'requirements': {'required_variables': ['file'], 'optional_variables': [], 'scope': 'global', 'description': 'Check if a file exists', 'category': 'file_operations', 'validation_rules': {'file': {'type': 'file', 'required': True}}}, 'patterns_matched': [], 'scope': 'global'}
[DEBUG] Validation context errors for 'Le fichier est présent': Handler file_present requires 'file' variable
[ERROR] ValidationParseError: Validation context errors for 'Le fichier est présent': Handler file_present requires 'file' variable
Traceback (most recent call last):
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\compiler\shell_generator.py", line 171, in visit
    shellframework_ast = ShtestToShellFrameworkVisitor().visit(node)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\visitor.py", line 23, in visit
    return visitor_method(node)
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\shtest_to_shellframework_visitor.py", line 166, in visit_shtestfile
    validation_lines = self.compile_validation_expression(action.result_expr, action_context={'command': action.command})
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\ast\shtest_to_shellframework_visitor.py", line 237, in compile_validation_expression
    return compile_atomic(expression, varname="result", last_file_var=None, action_context=action_context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Sventer\OneDrive\Documents\batch testing\src\shtest_compiler\compiler\atomic_compiler.py", line 63, in compile_atomic
    raise ValidationParseError(error_msg)
shtest_compiler.core.errors.ValidationParseError: Validation context errors for 'Le fichier est présent': Handler file_present requires 'file' variable

Compiled C:\Users\Sventer\OneDrive\Documents\batch testing\docs\catalogue_tests\catalogue.shtest -> C:\Users\Sventer\OneDrive\Documents\batch testing\docs\catalogue_tests\catalogue.sh
